[
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L3-L3",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "This line begins a schema definition for 'msmarco', which likely pertains to data processing or retrieval related to the MS MARCO dataset, a common benchmark for search and question answering tasks.\n```\nschema msmarco {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema msmarco {",
            "explanation": "This line begins a schema definition for 'msmarco', which likely pertains to data processing or retrieval related to the MS MARCO dataset, a common benchmark for search and question answering tasks.",
            "keywords": [
                "schema",
                "msmarco"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L4-L4",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The document definition named 'msmarco' indicates that the data structure being defined will include fields relevant to the MS MARCO dataset.\n```\ndocument msmarco {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document msmarco {",
            "explanation": "The document definition named 'msmarco' indicates that the data structure being defined will include fields relevant to the MS MARCO dataset.",
            "keywords": [
                "document",
                "msmarco"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L6-L6",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A field named 'language' of type 'string' is declared, suggesting it stores textual values representing language codes or similar identifiers.\n```\nfield language type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field language type string {",
            "explanation": "A field named 'language' of type 'string' is declared, suggesting it stores textual values representing language codes or similar identifiers.",
            "keywords": [
                "field",
                "language",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L7-L7",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "This specifies the indexing behavior for the 'language' field, indicating values are \"en\" and providing a mechanism to set the document's language context.\n```\nindexing: \"en\" | set_language\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: \"en\" | set_language",
            "explanation": "This specifies the indexing behavior for the 'language' field, indicating values are \"en\" and providing a mechanism to set the document's language context.",
            "keywords": [
                "indexing",
                "en",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L10-L10",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A string field 'id' is declared, likely used as a unique identifier for each document.\n```\nfield id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field id type string {",
            "explanation": "A string field 'id' is declared, likely used as a unique identifier for each document.",
            "keywords": [
                "field",
                "id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L11-L11",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The 'id' field is indexed both as a summary and as an attribute, enabling it to be easily accessed and queried in various contexts.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "indexing: summary | attribute",
            "explanation": "The 'id' field is indexed both as a summary and as an attribute, enabling it to be easily accessed and queried in various contexts.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L14-L14",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A string field named 'title' is declared, which is expected to store the title of the document.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "field title type string {",
            "explanation": "A string field named 'title' is declared, which is expected to store the title of the document.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L15-L15",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The 'title' field's indexing is configured for full-text search ('index') and display in search results ('summary').\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "indexing: index | summary",
            "explanation": "The 'title' field's indexing is configured for full-text search ('index') and display in search results ('summary').",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L16-L16",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "This enables BM25, a ranking function, for the 'title' field to improve search relevance based on term frequency and inverse document frequency.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "index: enable-bm25",
            "explanation": "This enables BM25, a ranking function, for the 'title' field to improve search relevance based on term frequency and inverse document frequency.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L19-L19",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A field named 'url' of type 'string' is declared, which is expected to store web addresses associated with the document.\n```\nfield url type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "field url type string {",
            "explanation": "A field named 'url' of type 'string' is declared, which is expected to store web addresses associated with the document.",
            "keywords": [
                "field",
                "url",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L24-L24",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A 'body' field of type 'string' is declared, aimed at storing the main content of the document.\n```\nfield body type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "field body type string {",
            "explanation": "A 'body' field of type 'string' is declared, aimed at storing the main content of the document.",
            "keywords": [
                "field",
                "body",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L26-L26",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The 'body' field uses 'dynamic' summarization, adapting the amount of content delivered in search results dynamically.\n```\nsummary: dynamic\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L26-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L26-L26",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 26,
            "code": "summary: dynamic",
            "explanation": "The 'body' field uses 'dynamic' summarization, adapting the amount of content delivered in search results dynamically.",
            "keywords": [
                "summary",
                "dynamic"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L32-L32",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A document summary named 'minimal' is defined to present a concise set of data, focusing here on offering just the necessary information, such as 'id'.\n```\ndocument-summary minimal {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L32-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L32-L32",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 32,
            "code": "document-summary minimal {",
            "explanation": "A document summary named 'minimal' is defined to present a concise set of data, focusing here on offering just the necessary information, such as 'id'.",
            "keywords": [
                "document-summary",
                "minimal"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L33-L33",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The 'minimal' document summary contains only the 'id' field, making it efficient for operations requiring minimal data transfer.\n```\nsummary id {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L33-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L33-L33",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 33,
            "code": "summary id {}",
            "explanation": "The 'minimal' document summary contains only the 'id' field, making it efficient for operations requiring minimal data transfer.",
            "keywords": [
                "summary",
                "id"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L36-L36",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "Creates a 'debug-tokens' document summary, likely used for debugging which includes token analysis for the URL field.\n```\ndocument-summary debug-tokens {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "document-summary debug-tokens {",
            "explanation": "Creates a 'debug-tokens' document summary, likely used for debugging which includes token analysis for the URL field.",
            "keywords": [
                "document-summary",
                "debug-tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L37-L37",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The 'debug-tokens' summary includes a 'url' field entry, indicating it will display URL data as part of this document summary.\n```\nsummary url {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "summary url {}",
            "explanation": "The 'debug-tokens' summary includes a 'url' field entry, indicating it will display URL data as part of this document summary.",
            "keywords": [
                "summary",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L38-L38",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "This summary entry 'url-tokens' processes the 'url' field to generate tokens, useful for debugging or analysis tasks.\n```\nsummary url-tokens {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "summary url-tokens {",
            "explanation": "This summary entry 'url-tokens' processes the 'url' field to generate tokens, useful for debugging or analysis tasks.",
            "keywords": [
                "summary",
                "url-tokens",
                "source",
                "url",
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L42-L42",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "This keyword suggests that the document summary reads directly from the disk, allowing data retrieval to bypass keeping the information in memory.\n```\nfrom-disk\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "from-disk",
            "explanation": "This keyword suggests that the document summary reads directly from the disk, allowing data retrieval to bypass keeping the information in memory.",
            "keywords": [
                "from-disk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L46-L46",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "Defines a default fieldset grouping containing 'title', 'body', and 'url', simplifying operations that work on these fields together.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L46-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L46-L46",
            "namespace": "code-p",
            "start_line": 46,
            "end_line": 46,
            "code": "fieldset default {",
            "explanation": "Defines a default fieldset grouping containing 'title', 'body', and 'url', simplifying operations that work on these fields together.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L50-L50",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A default ranking profile is defined to manage how documents are initially ranked during search, using a first-phase strategy.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L50-L50",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L50-L50",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 50,
            "code": "rank-profile default {",
            "explanation": "A default ranking profile is defined to manage how documents are initially ranked during search, using a first-phase strategy.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L52-L52",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "It uses the 'nativeRank' function to rank documents based on the content of 'title', 'body', and 'url' fields.\n```\nexpression: nativeRank(title, body,url)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L52-L52",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L52-L52",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 52,
            "code": "expression: nativeRank(title, body,url)",
            "explanation": "It uses the 'nativeRank' function to rank documents based on the content of 'title', 'body', and 'url' fields.",
            "keywords": [
                "expression",
                "nativeRank",
                "title",
                "body",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L56-L56",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "A ranking profile named 'bm25' is created, inheriting from 'default', to apply specialized ranking logic using the BM25 algorithm.\n```\nrank-profile bm25 inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L56-L56",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L56-L56",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 56,
            "code": "rank-profile bm25 inherits default {",
            "explanation": "A ranking profile named 'bm25' is created, inheriting from 'default', to apply specialized ranking logic using the BM25 algorithm.",
            "keywords": [
                "rank-profile",
                "bm25",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-search/schemas/msmarco.sd#L58-L58",
        "fields": {
            "title": "text-search/schemas/msmarco.sd",
            "doc_id": "text-search/schemas/msmarco.sd",
            "content": "The BM25 ranking expression computes a cumulative relevance score by applying the BM25 algorithm to 'title', 'body', and 'url' fields individually and summing the results.\n```\nexpression: bm25(title) + bm25(body) + bm25(url)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-search/schemas/msmarco.sd#L58-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-search/schemas/msmarco.sd#L58-L58",
            "namespace": "code-p",
            "start_line": 58,
            "end_line": 58,
            "code": "expression: bm25(title) + bm25(body) + bm25(url)",
            "explanation": "The BM25 ranking expression computes a cumulative relevance score by applying the BM25 algorithm to 'title', 'body', and 'url' fields individually and summing the results.",
            "keywords": [
                "expression",
                "bm25",
                "title",
                "bm25",
                "body",
                "bm25",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L3-L3",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This snippet declares a new schema named \"query\". This schema will define the structure and properties for documents and their fields within the Vespa application.\n```\nschema query {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema query {",
            "explanation": "This snippet declares a new schema named \"query\". This schema will define the structure and properties for documents and their fields within the Vespa application.",
            "keywords": [
                "schema",
                "query"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L5-L5",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Within the \"query\" schema, a document type named \"query\" is being defined. This document will hold various fields for indexing and retrieval.\n```\ndocument query {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document query {",
            "explanation": "Within the \"query\" schema, a document type named \"query\" is being defined. This document will hold various fields for indexing and retrieval.",
            "keywords": [
                "document",
                "query"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L7-L7",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This defines a field named \"query\" of type string within the document. It specifies that the field should be indexed as both a summary and attribute field, and also enables fast searching for its attribute.\n```\nfield query type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field query type string {",
            "explanation": "This defines a field named \"query\" of type string within the document. It specifies that the field should be indexed as both a summary and attribute field, and also enables fast searching for its attribute.",
            "keywords": [
                "field",
                "query",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L8-L8",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "The field is configured to be indexed for both summary and attribute purposes. This allows it to be used in document summaries and as an attribute for searching.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | attribute",
            "explanation": "The field is configured to be indexed for both summary and attribute purposes. This allows it to be used in document summaries and as an attribute for searching.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L9-L9",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This configuration enables fast search capability for the field as an attribute. Fast search allows more efficient search operations for this field.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "attribute: fast-search",
            "explanation": "This configuration enables fast search capability for the field as an attribute. Fast search allows more efficient search operations for this field.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L12-L12",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This snippet defines a field named \"score\" of type float in the document. It is indexed as a summary and an attribute, but doesn't enable fast-search.\n```\nfield score type float {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "field score type float {",
            "explanation": "This snippet defines a field named \"score\" of type float in the document. It is indexed as a summary and an attribute, but doesn't enable fast-search.",
            "keywords": [
                "field",
                "score",
                "type",
                "float",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L16-L16",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "The snippet defines a field named \"words\" which is an array of strings. The field has summary and attribute indexing and is also configured for fast search.\n```\nfield words type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "field words type array<string> {",
            "explanation": "The snippet defines a field named \"words\" which is an array of strings. The field has summary and attribute indexing and is also configured for fast search.",
            "keywords": [
                "field",
                "words",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This closes the definition block for the \"words\" field within the \"query\" document.\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "}",
            "explanation": "This closes the definition block for the \"words\" field within the \"query\" document.",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This closes the definition block for the \"query\" document.\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "}",
            "explanation": "This closes the definition block for the \"query\" document.",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L21-L21",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Defines a \"default\" fieldset which includes the \"query\" field. Fieldsets allow grouping of fields for specific purposes like retrieval.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "fieldset default {",
            "explanation": "Defines a \"default\" fieldset which includes the \"query\" field. Fieldsets allow grouping of fields for specific purposes like retrieval.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "query"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L24-L24",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "A document summary named \"query\" is defined, which dictates how results are formatted. It includes a summary named \"query\" without additional fields, indicating all fields in the document are included.\n```\ndocument-summary query {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "document-summary query {",
            "explanation": "A document summary named \"query\" is defined, which dictates how results are formatted. It includes a summary named \"query\" without additional fields, indicating all fields in the document are included.",
            "keywords": [
                "document-summary",
                "query",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L27-L27",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Defines a ranking profile named \"default\" that inherits from the existing \"default\" ranking profile. Ranking profiles determine how search results are scored and ordered.\n```\nrank-profile default inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L27-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L27-L27",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 27,
            "code": "rank-profile default inherits default {",
            "explanation": "Defines a ranking profile named \"default\" that inherits from the existing \"default\" ranking profile. Ranking profiles determine how search results are scored and ordered.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L28-L28",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "This snippet opens a block for the first phase of the ranking process. This phase defines a ranking expression to calculate document scores based on field attributes.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "first-phase {",
            "explanation": "This snippet opens a block for the first phase of the ranking process. This phase defines a ranking expression to calculate document scores based on field attributes.",
            "keywords": [
                "first-phase",
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L29-L29",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "The expression for the first phase of ranking calculates a score by combining matches from the \"query\" field and the \"words\" field. It includes a multiplier for the query attribute and considers query completeness for words.\n```\nexpression: 2*attributeMatch(query) + attributeMatch(words) + attributeMatch(words).queryCompleteness\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "expression: 2*attributeMatch(query) + attributeMatch(words) + attributeMatch(words).queryCompleteness",
            "explanation": "The expression for the first phase of ranking calculates a score by combining matches from the \"query\" field and the \"words\" field. It includes a multiplier for the query attribute and considers query completeness for words.",
            "keywords": [
                "expression",
                "attributeMatch",
                "query",
                "attributeMatch",
                "words",
                "queryCompleteness"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L31-L31",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Specifies match features used for the ranking logic. This includes the attribute matches for \"query\" and \"words\", as well as the query completeness of the words.\n```\nmatch-features: attributeMatch(query) attributeMatch(words) attributeMatch(words).queryCompleteness\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "match-features: attributeMatch(query) attributeMatch(words) attributeMatch(words).queryCompleteness",
            "explanation": "Specifies match features used for the ranking logic. This includes the attribute matches for \"query\" and \"words\", as well as the query completeness of the words.",
            "keywords": [
                "match-features",
                "attributeMatch",
                "query",
                "attributeMatch",
                "words",
                "queryCompleteness"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Closes the block for the first phase ranking expression within the \"default\" rank profile.\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "}",
            "explanation": "Closes the block for the first phase ranking expression within the \"default\" rank profile.",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Closes the block for the \"default\" rank profile definition.\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "}",
            "explanation": "Closes the block for the \"default\" rank profile definition.",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/query.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/query.sd",
            "content": "Closes the schema named \"query\".\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/query.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "}",
            "explanation": "Closes the schema named \"query\".",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L3-L3",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines the beginning of the schema section for a Vespa application named 'item'. This is the overall container for defining documents and related configurations within this schema.\n```\nschema item {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema item {",
            "explanation": "Defines the beginning of the schema section for a Vespa application named 'item'. This is the overall container for defining documents and related configurations within this schema.",
            "keywords": [
                "schema",
                "item"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L5-L5",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "The definition of a document type named 'item'. This encapsulates the data fields and structures for documents to be indexed and queried.\n```\ndocument item {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document item {",
            "explanation": "The definition of a document type named 'item'. This encapsulates the data fields and structures for documents to be indexed and queried.",
            "keywords": [
                "document",
                "item"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L7-L9",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Declares a field named 'asin' with the data type 'string'. This field is indexed as both summary and attribute.\n```\nfield asin type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field asin type string {\n    indexing: summary | attribute\n}",
            "explanation": "Declares a field named 'asin' with the data type 'string'. This field is indexed as both summary and attribute.",
            "keywords": [
                "field",
                "asin",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L11-L13",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a field named 'timestamp' with the data type 'long'. It is configured for both summary and attribute indexing.\n```\nfield timestamp type long {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field timestamp type long {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named 'timestamp' with the data type 'long'. It is configured for both summary and attribute indexing.",
            "keywords": [
                "field",
                "timestamp",
                "type",
                "long",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L15-L19",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Creates a field named 'brand' of type 'string'. It supports summary and attribute indexing and is optimized for fast-search with a ranking filter.\n```\nfield brand type string {\n    indexing: summary | attribute\n    rank: filter\n    attribute: fast-search\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L15-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L15-L19",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 19,
            "code": "field brand type string {\n    indexing: summary | attribute\n    rank: filter\n    attribute: fast-search\n}",
            "explanation": "Creates a field named 'brand' of type 'string'. It supports summary and attribute indexing and is optimized for fast-search with a ranking filter.",
            "keywords": [
                "field",
                "brand",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute",
                "rank",
                "filter",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L21-L23",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Introduces a field named 'title' with string type, indexed as a summary and for general indexing purposes.\n```\nfield title type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L21-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L21-L23",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 23,
            "code": "field title type string {\n    indexing: summary | index\n}",
            "explanation": "Introduces a field named 'title' with string type, indexed as a summary and for general indexing purposes.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L25-L27",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Describes a 'description' field with a string type, indexed for both summary retrieval and regular indexing.\n```\nfield description type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L25-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L25-L27",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 27,
            "code": "field description type string {\n    indexing: summary | index\n}",
            "explanation": "Describes a 'description' field with a string type, indexed for both summary retrieval and regular indexing.",
            "keywords": [
                "field",
                "description",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L29-L31",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'price' field as a float, capable of summary and attribute indexing.\n```\nfield price type float {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L29-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L29-L31",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 31,
            "code": "field price type float {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'price' field as a float, capable of summary and attribute indexing.",
            "keywords": [
                "field",
                "price",
                "type",
                "float",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L33-L37",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Specifies a 'categories' field as an array of strings, supporting summary and attribute indexing, and enhanced for fast-search with a ranking filter.\n```\nfield categories type array<string> {\n    indexing: summary | attribute\n    rank:filter\n    attribute: fast-search\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L33-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L33-L37",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 37,
            "code": "field categories type array<string> {\n    indexing: summary | attribute\n    rank:filter\n    attribute: fast-search\n}",
            "explanation": "Specifies a 'categories' field as an array of strings, supporting summary and attribute indexing, and enhanced for fast-search with a ranking filter.",
            "keywords": [
                "field",
                "categories",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "attribute",
                "rank",
                "filter",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L39-L41",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Introduces a 'categories_text' field of type string, meant exclusively for indexing purposes to facilitate text searches.\n```\nfield categories_text type string {\n    indexing: index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L39-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L39-L41",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 41,
            "code": "field categories_text type string {\n    indexing: index\n}",
            "explanation": "Introduces a 'categories_text' field of type string, meant exclusively for indexing purposes to facilitate text searches.",
            "keywords": [
                "field",
                "categories_text",
                "type",
                "string",
                "indexing",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L43-L45",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines an 'images' field as an array of strings, with indexing in both summary and attribute forms.\n```\nfield images type array<string> {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L43-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L43-L45",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 45,
            "code": "field images type array<string> {\n    indexing: summary | attribute\n}",
            "explanation": "Defines an 'images' field as an array of strings, with indexing in both summary and attribute forms.",
            "keywords": [
                "field",
                "images",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L47-L49",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Describes a 'related' field which is an array of strings, indexed exclusively for summaries only.\n```\nfield related type array<string> {\n    indexing: summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L47-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L47-L49",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 49,
            "code": "field related type array<string> {\n    indexing: summary\n}",
            "explanation": "Describes a 'related' field which is an array of strings, indexed exclusively for summaries only.",
            "keywords": [
                "field",
                "related",
                "type",
                "array",
                "string",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L51-L53",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Names a 'rating_stars' field as an integer, configured for summary and attribute indexing.\n```\nfield rating_stars type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L51-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L51-L53",
            "namespace": "code-p",
            "start_line": 51,
            "end_line": 53,
            "code": "field rating_stars type int {\n    indexing: summary | attribute\n}",
            "explanation": "Names a 'rating_stars' field as an integer, configured for summary and attribute indexing.",
            "keywords": [
                "field",
                "rating_stars",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L55-L57",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Describes a 'rating_count' field using int type for both summary retrieval and attribute indexing.\n```\nfield rating_count type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L55-L57",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L55-L57",
            "namespace": "code-p",
            "start_line": 55,
            "end_line": 57,
            "code": "field rating_count type int {\n    indexing: summary | attribute\n}",
            "explanation": "Describes a 'rating_count' field using int type for both summary retrieval and attribute indexing.",
            "keywords": [
                "field",
                "rating_count",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L61-L63",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'brand_text' field of type string, indexed by processing input from the 'brand' field along with regular indexing.\n```\nfield brand_text type string {\n    indexing: input brand | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L61-L63",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L61-L63",
            "namespace": "code-p",
            "start_line": 61,
            "end_line": 63,
            "code": "field brand_text type string {\n    indexing: input brand | index\n}",
            "explanation": "Defines a 'brand_text' field of type string, indexed by processing input from the 'brand' field along with regular indexing.",
            "keywords": [
                "field",
                "brand_text",
                "type",
                "string",
                "indexing",
                "input",
                "brand",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L65-L66",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Initiates a new document summary named 'short', which retrieves content directly from disk.\n```\ndocument-summary short {\n    from-disk\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L65-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L65-L66",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 66,
            "code": "document-summary short {\n    from-disk",
            "explanation": "Initiates a new document summary named 'short', which retrieves content directly from disk.",
            "keywords": [
                "document-summary",
                "short",
                "from-disk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L67-L71",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines fields within the 'short' document summary to include 'asin', 'title', 'price', 'brand', and 'categories'.\n```\nsummary asin { }\nsummary title { }\nsummary price { }\nsummary brand { }\nsummary categories { }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L67-L71",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L67-L71",
            "namespace": "code-p",
            "start_line": 67,
            "end_line": 71,
            "code": "summary asin { }\nsummary title { }\nsummary price { }\nsummary brand { }\nsummary categories { }",
            "explanation": "Defines fields within the 'short' document summary to include 'asin', 'title', 'price', 'brand', and 'categories'.",
            "keywords": [
                "summary",
                "asin",
                "summary",
                "title",
                "summary",
                "price",
                "summary",
                "brand",
                "summary",
                "categories"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L72-L74",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Expands the 'short' document summary to include 'images', 'rating_stars', and 'rating_count' fields.\n```\nsummary images { }\nsummary rating_stars { }\nsummary rating_count { }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L72-L74",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L72-L74",
            "namespace": "code-p",
            "start_line": 72,
            "end_line": 74,
            "code": "summary images { }\nsummary rating_stars { }\nsummary rating_count { }",
            "explanation": "Expands the 'short' document summary to include 'images', 'rating_stars', and 'rating_count' fields.",
            "keywords": [
                "summary",
                "images",
                "summary",
                "rating_stars",
                "summary",
                "rating_count"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L77-L79",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a fieldset named 'default' containing fields 'title', 'description', 'categories_text', and 'brand_text' for group operations.\n```\nfieldset default {\n    fields: title, description, categories_text, brand_text\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L77-L79",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L77-L79",
            "namespace": "code-p",
            "start_line": 77,
            "end_line": 79,
            "code": "fieldset default {\n    fields: title, description, categories_text, brand_text\n}",
            "explanation": "Defines a fieldset named 'default' containing fields 'title', 'description', 'categories_text', and 'brand_text' for group operations.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "description",
                "categories_text",
                "brand_text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L81-L86",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Specifies an 'embedding' field structured as a tensor with float values over a dimension of 384, supporting embedding and indexing with an angular distance metric attribute.\n```\nfield embedding type tensor<float>(x[384]) {\n    indexing: input title | embed | attribute | index\n    attribute {\n        distance-metric: angular\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L81-L86",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L81-L86",
            "namespace": "code-p",
            "start_line": 81,
            "end_line": 86,
            "code": "field embedding type tensor<float>(x[384]) {\n    indexing: input title | embed | attribute | index\n    attribute {\n        distance-metric: angular\n    }\n}",
            "explanation": "Specifies an 'embedding' field structured as a tensor with float values over a dimension of 384, supporting embedding and indexing with an angular distance metric attribute.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "x",
                "indexing",
                "input",
                "title",
                "embed",
                "attribute",
                "index",
                "attribute",
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L88-L92",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a default ranking profile that accepts input for tensor queries with a 'query_embedding' of dimension 384 float values.\n```\nrank-profile default {\n   inputs {\n        query(query_embedding) tensor<float>(x[384])\n   }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L88-L92",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L88-L92",
            "namespace": "code-p",
            "start_line": 88,
            "end_line": 92,
            "code": "rank-profile default {\n   inputs {\n        query(query_embedding) tensor<float>(x[384])\n   }\n}",
            "explanation": "Defines a default ranking profile that accepts input for tensor queries with a 'query_embedding' of dimension 384 float values.",
            "keywords": [
                "rank-profile",
                "default",
                "inputs",
                "query",
                "query_embedding",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L94-L94",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Creates an 'item' rank-profile inheriting properties from the 'default' profile.\n```\nrank-profile item inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L94-L94",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L94-L94",
            "namespace": "code-p",
            "start_line": 94,
            "end_line": 94,
            "code": "rank-profile item inherits default {",
            "explanation": "Creates an 'item' rank-profile inheriting properties from the 'default' profile.",
            "keywords": [
                "rank-profile",
                "item",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L96-L98",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines an inline function 'average_rating' to calculate average by dividing 'rating_stars' by 'rating_count', provided the count is greater than zero.\n```\nfunction inline average_rating() {\n    expression: if(attribute(rating_count) > 0, attribute(rating_stars) / attribute(rating_count), 0)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L96-L98",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L96-L98",
            "namespace": "code-p",
            "start_line": 96,
            "end_line": 98,
            "code": "function inline average_rating() {\n    expression: if(attribute(rating_count) > 0, attribute(rating_stars) / attribute(rating_count), 0)\n}",
            "explanation": "Defines an inline function 'average_rating' to calculate average by dividing 'rating_stars' by 'rating_count', provided the count is greater than zero.",
            "keywords": [
                "function",
                "inline",
                "average_rating",
                "expression",
                "if",
                "attribute",
                "rating_count",
                "attribute",
                "rating_stars"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L100-L102",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Specifies a 'rating' function that computes a scaled rating by checking if 'rating_count' exceeds 5 and then divides 'average_rating' by 5.\n```\nfunction rating() {\n    expression: if(attribute(rating_count) > 5, average_rating / 5, 0)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L100-L102",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L100-L102",
            "namespace": "code-p",
            "start_line": 100,
            "end_line": 102,
            "code": "function rating() {\n    expression: if(attribute(rating_count) > 5, average_rating / 5, 0)\n}",
            "explanation": "Specifies a 'rating' function that computes a scaled rating by checking if 'rating_count' exceeds 5 and then divides 'average_rating' by 5.",
            "keywords": [
                "function",
                "rating",
                "expression",
                "if",
                "attribute",
                "rating_count",
                "average_rating"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L104-L109",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'keyword' function to calculate a combined score using nativeRank of various fields such as categories, title, and description, among others.\n```\nfunction keyword() {\n    expression {\n        (nativeRank(categories) + nativeRank(categories_text) + 2*nativeRank(title) + nativeRank(description) +\n        nativeRank(brand_text))/6\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L104-L109",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L104-L109",
            "namespace": "code-p",
            "start_line": 104,
            "end_line": 109,
            "code": "function keyword() {\n    expression {\n        (nativeRank(categories) + nativeRank(categories_text) + 2*nativeRank(title) + nativeRank(description) +\n        nativeRank(brand_text))/6\n    }\n}",
            "explanation": "Defines a 'keyword' function to calculate a combined score using nativeRank of various fields such as categories, title, and description, among others.",
            "keywords": [
                "function",
                "keyword",
                "expression",
                "nativeRank",
                "categories",
                "nativeRank",
                "categories_text",
                "nativeRank",
                "title",
                "nativeRank",
                "description",
                "nativeRank",
                "brand_text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L111-L113",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'semantic' function to evaluate the cosine of the distance between a field and an embedding, often used in semantic search calculations.\n```\nfunction semantic() {\n    expression: cos(distance(field,embedding))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L111-L113",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L111-L113",
            "namespace": "code-p",
            "start_line": 111,
            "end_line": 113,
            "code": "function semantic() {\n    expression: cos(distance(field,embedding))\n}",
            "explanation": "Defines a 'semantic' function to evaluate the cosine of the distance between a field and an embedding, often used in semantic search calculations.",
            "keywords": [
                "function",
                "semantic",
                "expression",
                "cos",
                "distance",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L115-L119",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Creates a 'default_ranking' function expression that blends keyword, semantic, and rating scores for comprehensive ranking operations.\n```\nfunction default_ranking() {\n    expression {\n        0.6*keyword + 0.3*semantic + 0.05*rating\n     }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L115-L119",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L115-L119",
            "namespace": "code-p",
            "start_line": 115,
            "end_line": 119,
            "code": "function default_ranking() {\n    expression {\n        0.6*keyword + 0.3*semantic + 0.05*rating\n     }\n}",
            "explanation": "Creates a 'default_ranking' function expression that blends keyword, semantic, and rating scores for comprehensive ranking operations.",
            "keywords": [
                "function",
                "default_ranking",
                "expression",
                "keyword",
                "semantic",
                "rating"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L121-L123",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Introduces 'within_rating_limits', checking if average_rating lies between min_rating and max_rating queries, returning 1 if true, else 0.\n```\nfunction within_rating_limits() {\n    expression: if ( average_rating > query(min_rating) && (average_rating < query(max_rating)), 1, 0)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L121-L123",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L121-L123",
            "namespace": "code-p",
            "start_line": 121,
            "end_line": 123,
            "code": "function within_rating_limits() {\n    expression: if ( average_rating > query(min_rating) && (average_rating < query(max_rating)), 1, 0)\n}",
            "explanation": "Introduces 'within_rating_limits', checking if average_rating lies between min_rating and max_rating queries, returning 1 if true, else 0.",
            "keywords": [
                "function",
                "within_rating_limits",
                "expression",
                "if",
                "average_rating",
                "query",
                "min_rating",
                "query",
                "max_rating"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L125-L130",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'rating_filter' function to adjust ranking based on 'use_rating_filter'. It uses 'within_rating_limits' to apply or negate the value provided.\n```\nfunction rating_filter(val) {\n    expression {\n        if (query(use_rating_filter) == 1,\n            if(within_rating_limits == 1, val, -200.0), val)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L125-L130",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L125-L130",
            "namespace": "code-p",
            "start_line": 125,
            "end_line": 130,
            "code": "function rating_filter(val) {\n    expression {\n        if (query(use_rating_filter) == 1,\n            if(within_rating_limits == 1, val, -200.0), val)\n    }\n}",
            "explanation": "Defines a 'rating_filter' function to adjust ranking based on 'use_rating_filter'. It uses 'within_rating_limits' to apply or negate the value provided.",
            "keywords": [
                "function",
                "rating_filter",
                "expression",
                "if",
                "query",
                "use_rating_filter",
                "within_rating_limits",
                "val"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L132-L134",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Creates an inline function 'apply_ranking_filters' to directly apply the rating filter function to the given value 'val'.\n```\nfunction inline apply_ranking_filters(val) {\n    expression: rating_filter(val)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L132-L134",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L132-L134",
            "namespace": "code-p",
            "start_line": 132,
            "end_line": 134,
            "code": "function inline apply_ranking_filters(val) {\n    expression: rating_filter(val)\n}",
            "explanation": "Creates an inline function 'apply_ranking_filters' to directly apply the rating filter function to the given value 'val'.",
            "keywords": [
                "function",
                "inline",
                "apply_ranking_filters",
                "expression",
                "rating_filter"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L136-L141",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines the first-phase ranking logic, applying 'apply_ranking_filters' to 'default_ranking' based on conditions related to keyword and semantic scores, with a rank-score-drop-limit of -100.\n```\nfirst-phase {\n    expression {\n        if(apply_ranking_filters(default_ranking) > -200, if(keyword < 0.005 && semantic < 0.45 && semantic > -0.95, -200, apply_ranking_filters(default_ranking)), apply_ranking_filters(default_ranking))\n    }\n    rank-score-drop-limit: -100.0\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L136-L141",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L136-L141",
            "namespace": "code-p",
            "start_line": 136,
            "end_line": 141,
            "code": "first-phase {\n    expression {\n        if(apply_ranking_filters(default_ranking) > -200, if(keyword < 0.005 && semantic < 0.45 && semantic > -0.95, -200, apply_ranking_filters(default_ranking)), apply_ranking_filters(default_ranking))\n    }\n    rank-score-drop-limit: -100.0\n}",
            "explanation": "Defines the first-phase ranking logic, applying 'apply_ranking_filters' to 'default_ranking' based on conditions related to keyword and semantic scores, with a rank-score-drop-limit of -100.",
            "keywords": [
                "first-phase",
                "expression",
                "if",
                "apply_ranking_filters",
                "default_ranking",
                "keyword",
                "semantic",
                "rank-score-drop-limit"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L143-L157",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Lists match features including computed values like 'rating', 'semantic', and attributes like 'distance' for embeddings, alongside natively ranked fields.\n```\nmatch-features {\n    rating\n    semantic\n    distance(field, embedding)\n    keyword\n    query(min_rating)\n    query(max_rating)\n    average_rating\n    within_rating_limits\n    nativeRank(categories)\n    nativeRank(categories_text)\n    nativeRank(brand_text)\n    nativeRank(title)\n    nativeRank(description)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L143-L157",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L143-L157",
            "namespace": "code-p",
            "start_line": 143,
            "end_line": 157,
            "code": "match-features {\n    rating\n    semantic\n    distance(field, embedding)\n    keyword\n    query(min_rating)\n    query(max_rating)\n    average_rating\n    within_rating_limits\n    nativeRank(categories)\n    nativeRank(categories_text)\n    nativeRank(brand_text)\n    nativeRank(title)\n    nativeRank(description)\n}",
            "explanation": "Lists match features including computed values like 'rating', 'semantic', and attributes like 'distance' for embeddings, alongside natively ranked fields.",
            "keywords": [
                "match-features",
                "rating",
                "semantic",
                "distance",
                "field",
                "embedding",
                "keyword",
                "query",
                "min_rating",
                "query",
                "max_rating",
                "average_rating",
                "within_rating_limits",
                "nativeRank",
                "categories",
                "nativeRank",
                "categories_text",
                "nativeRank",
                "brand_text",
                "nativeRank",
                "title",
                "nativeRank",
                "description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L161-L165",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Defines a 'promoted' ranking profile inheriting from 'item', using a first-phase expression that factors 'average_rating' with random for enhancements.\n```\nrank-profile promoted inherits item {\n    first-phase {\n        expression: (average_rating / 5) + random\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L161-L165",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L161-L165",
            "namespace": "code-p",
            "start_line": 161,
            "end_line": 165,
            "code": "rank-profile promoted inherits item {\n    first-phase {\n        expression: (average_rating / 5) + random\n    }\n}",
            "explanation": "Defines a 'promoted' ranking profile inheriting from 'item', using a first-phase expression that factors 'average_rating' with random for enhancements.",
            "keywords": [
                "rank-profile",
                "promoted",
                "inherits",
                "item",
                "first-phase",
                "expression",
                "average_rating",
                "random"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L167-L171",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Specifies a 'sort_by_price' ranking profile, using a 'default_ranking' function to sort by price directed by a 'sort_direction' query.\n```\nrank-profile sort_by_price inherits item {\n    function inline default_ranking() {\n        expression: query(sort_direction) * attribute(price)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L167-L171",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L167-L171",
            "namespace": "code-p",
            "start_line": 167,
            "end_line": 171,
            "code": "rank-profile sort_by_price inherits item {\n    function inline default_ranking() {\n        expression: query(sort_direction) * attribute(price)\n    }\n}",
            "explanation": "Specifies a 'sort_by_price' ranking profile, using a 'default_ranking' function to sort by price directed by a 'sort_direction' query.",
            "keywords": [
                "rank-profile",
                "sort_by_price",
                "inherits",
                "item",
                "function",
                "inline",
                "default_ranking",
                "expression",
                "query",
                "sort_direction",
                "attribute",
                "price"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/item.sd#L173-L177",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/item.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/item.sd",
            "content": "Describes a 'sort_by_rating' ranking profile that sorts based on 'average_rating' determined by the 'sort_direction' query.\n```\nrank-profile sort_by_rating inherits item {\n    function inline default_ranking() {\n        expression: query(sort_direction) * average_rating\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/item.sd#L173-L177",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/item.sd#L173-L177",
            "namespace": "code-p",
            "start_line": 173,
            "end_line": 177,
            "code": "rank-profile sort_by_rating inherits item {\n    function inline default_ranking() {\n        expression: query(sort_direction) * average_rating\n    }\n}",
            "explanation": "Describes a 'sort_by_rating' ranking profile that sorts based on 'average_rating' determined by the 'sort_direction' query.",
            "keywords": [
                "rank-profile",
                "sort_by_rating",
                "inherits",
                "item",
                "function",
                "inline",
                "default_ranking",
                "expression",
                "query",
                "sort_direction",
                "average_rating"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L3-L3",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "This snippet defines a schema named \"review\". In Vespa, a schema is a blueprint for how the data structure is organized for indexing and searching.\n```\nschema review {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema review {",
            "explanation": "This snippet defines a schema named \"review\". In Vespa, a schema is a blueprint for how the data structure is organized for indexing and searching.",
            "keywords": [
                "schema",
                "review"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L5-L5",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "This snippet declares a document type named \"review\" within the \"review\" schema. Document types define the structure of the indexed data.\n```\ndocument review {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document review {",
            "explanation": "This snippet declares a document type named \"review\" within the \"review\" schema. Document types define the structure of the indexed data.",
            "keywords": [
                "document",
                "review"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L7-L9",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Defines a field \"asin\" of type string, which is indexed for both summary and attribute search. \"asin\" is likely used for storing product identifiers in the review document.\n```\nfield asin type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field asin type string {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field \"asin\" of type string, which is indexed for both summary and attribute search. \"asin\" is likely used for storing product identifiers in the review document.",
            "keywords": [
                "field",
                "asin",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L11-L13",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "This code snippet defines a \"timestamp\" field with a data type of long. It is indexed as a summary and attribute, potentially used for sorting or filtering reviews based on time.\n```\nfield timestamp type long {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field timestamp type long {\n    indexing: summary | attribute\n}",
            "explanation": "This code snippet defines a \"timestamp\" field with a data type of long. It is indexed as a summary and attribute, potentially used for sorting or filtering reviews based on time.",
            "keywords": [
                "field",
                "timestamp",
                "type",
                "long",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L15-L17",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Declares a field \"reviewer_id\" of type string, indexed for summary and attribute retrieval. This field likely stores a unique identifier for the reviewer.\n```\nfield reviewer_id type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field reviewer_id type string {\n    indexing: summary | attribute\n}",
            "explanation": "Declares a field \"reviewer_id\" of type string, indexed for summary and attribute retrieval. This field likely stores a unique identifier for the reviewer.",
            "keywords": [
                "field",
                "reviewer_id",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L19-L21",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Introduces a \"reviewer_name\" field of string type, indexed as both summary and attribute. It is used to store the name of the individual who submitted the review.\n```\nfield reviewer_name type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field reviewer_name type string {\n    indexing: summary | attribute\n}",
            "explanation": "Introduces a \"reviewer_name\" field of string type, indexed as both summary and attribute. It is used to store the name of the individual who submitted the review.",
            "keywords": [
                "field",
                "reviewer_name",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L23-L25",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "This snippet defines a \"title\" field of string type. It is indexed for both summary and full-text search, allowing for querying and displaying review titles.\n```\nfield title type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L23-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L23-L25",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 25,
            "code": "field title type string {\n    indexing: summary | index\n}",
            "explanation": "This snippet defines a \"title\" field of string type. It is indexed for both summary and full-text search, allowing for querying and displaying review titles.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L27-L29",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Defines a \"text\" field with a string data type, indexed for summary and searchable indexing to allow full-text search of the review content.\n```\nfield text type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L27-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L27-L29",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 29,
            "code": "field text type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a \"text\" field with a string data type, indexed for summary and searchable indexing to allow full-text search of the review content.",
            "keywords": [
                "field",
                "text",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L31-L33",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "The \"stars\" field is defined with an integer type and is indexed for summary and attribute retrieval. This likely represents the rating given in a review.\n```\nfield stars type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L31-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L31-L33",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 33,
            "code": "field stars type int {\n    indexing: summary | attribute\n}",
            "explanation": "The \"stars\" field is defined with an integer type and is indexed for summary and attribute retrieval. This likely represents the rating given in a review.",
            "keywords": [
                "field",
                "stars",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L35-L37",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "This snippet declares an \"upvotes\" field of type int, indexed as a summary and attribute, intended to track the number of positive votes a review receives.\n```\nfield upvotes type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L35-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L35-L37",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 37,
            "code": "field upvotes type int {\n    indexing: summary | attribute\n}",
            "explanation": "This snippet declares an \"upvotes\" field of type int, indexed as a summary and attribute, intended to track the number of positive votes a review receives.",
            "keywords": [
                "field",
                "upvotes",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L39-L41",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Introduces a \"downvotes\" field with an integer type, indexed for both summary and attribute access, likely used to keep count of negative votes for a review.\n```\nfield downvotes type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L39-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L39-L41",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 41,
            "code": "field downvotes type int {\n    indexing: summary | attribute\n}",
            "explanation": "Introduces a \"downvotes\" field with an integer type, indexed for both summary and attribute access, likely used to keep count of negative votes for a review.",
            "keywords": [
                "field",
                "downvotes",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L45-L45",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Defines a ranking profile named \"review\" that inherits from the default ranking profile. Ranking profiles modify how documents are scored and ranked during search.\n```\nrank-profile review inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L45-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L45-L45",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 45,
            "code": "rank-profile review inherits default {",
            "explanation": "Defines a ranking profile named \"review\" that inherits from the default ranking profile. Ranking profiles modify how documents are scored and ranked during search.",
            "keywords": [
                "rank-profile",
                "review",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::use-case-shopping/src/main/application/schemas/review.sd#L46-L48",
        "fields": {
            "title": "use-case-shopping/src/main/application/schemas/review.sd",
            "doc_id": "use-case-shopping/src/main/application/schemas/review.sd",
            "content": "Specifies the first phase of ranking using the \"freshness\" function applied to the \"timestamp\" field. This boosts the relevance score of newer reviews.\n```\nfirst-phase {\n    expression: freshness(timestamp)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "use-case-shopping/src/main/application/schemas/review.sd#L46-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/use-case-shopping/src/main/application/schemas/review.sd#L46-L48",
            "namespace": "code-p",
            "start_line": 46,
            "end_line": 48,
            "code": "first-phase {\n    expression: freshness(timestamp)\n}",
            "explanation": "Specifies the first phase of ranking using the \"freshness\" function applied to the \"timestamp\" field. This boosts the relevance score of newer reviews.",
            "keywords": [
                "first-phase",
                "expression",
                "freshness",
                "timestamp"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "The schema definition starts here and is named 'doc'. This encapsulates the structure and behavior that will be applied to documents of this type in Vespa.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "schema doc {",
            "explanation": "The schema definition starts here and is named 'doc'. This encapsulates the structure and behavior that will be applied to documents of this type in Vespa.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "A document is defined within the schema. This specifies that the document type is also 'doc', indicating it aligns with the schema.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "document doc {",
            "explanation": "A document is defined within the schema. This specifies that the document type is also 'doc', indicating it aligns with the schema.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L8-L10",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines a field named 'id' of type 'string'. The field is indexed for summary, which means its value is stored in each result but not used for searching.\n```\nfield id type string {\n    indexing: summary \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L8-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L8-L10",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 10,
            "code": "field id type string {\n    indexing: summary \n}",
            "explanation": "Defines a field named 'id' of type 'string'. The field is indexed for summary, which means its value is stored in each result but not used for searching.",
            "keywords": [
                "field",
                "id",
                "type",
                "string",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L11-L14",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines a field named 'title' of type 'string', which is indexed both for search and summary. BM25 ranking is enabled to provide probabilistic scoring based on term frequency and document length in the index.\n```\nfield title type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L11-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L11-L14",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 14,
            "code": "field title type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a field named 'title' of type 'string', which is indexed both for search and summary. BM25 ranking is enabled to provide probabilistic scoring based on term frequency and document length in the index.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L15-L18",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines a field named 'chunk' also of type 'string', similarly indexed for search and summary. BM25 ranking is enabled to optimize search relevance for chunks of text.\n```\nfield chunk type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L15-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L15-L18",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 18,
            "code": "field chunk type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a field named 'chunk' also of type 'string', similarly indexed for search and summary. BM25 ranking is enabled to optimize search relevance for chunks of text.",
            "keywords": [
                "field",
                "chunk",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L20-L22",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Introduces a fieldset named 'default' that includes the 'title' and 'chunk' fields. Fieldsets are used to group several fields together, often to apply operations collectively.\n```\nfieldset default {\n      fields: title, chunk\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L20-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L20-L22",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 22,
            "code": "fieldset default {\n      fields: title, chunk\n}",
            "explanation": "Introduces a fieldset named 'default' that includes the 'title' and 'chunk' fields. Fieldsets are used to group several fields together, often to apply operations collectively.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "chunk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L24-L27",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines 'splade_chunk_embedding' as a tensor field with bfloat16 precision, derived from tokenized 'chunk' input. The field is embedded using SPLADE, indexed as an attribute and summary, with paged memory storage for larger data.\n```\nfield splade_chunk_embedding type tensor<bfloat16>(token{}) {\n    indexing: input chunk | embed splade | attribute | summary\n    attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L24-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L24-L27",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 27,
            "code": "field splade_chunk_embedding type tensor<bfloat16>(token{}) {\n    indexing: input chunk | embed splade | attribute | summary\n    attribute: paged\n}",
            "explanation": "Defines 'splade_chunk_embedding' as a tensor field with bfloat16 precision, derived from tokenized 'chunk' input. The field is embedded using SPLADE, indexed as an attribute and summary, with paged memory storage for larger data.",
            "keywords": [
                "field",
                "splade_chunk_embedding",
                "type",
                "tensor",
                "bfloat16",
                "token{}",
                "indexing",
                "input",
                "chunk",
                "embed",
                "splade",
                "attribute",
                "summary",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L28-L30",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines 'splade_title_embedding' as a tensor field analogous to 'splade_chunk_embedding', but using the 'title' input for embedding. It supports similar indexing for attribute and summary use, without paged storage.\n```\nfield splade_title_embedding type tensor<bfloat16>(token{}) {\n    indexing: input title | embed splade | attribute | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L28-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L28-L30",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 30,
            "code": "field splade_title_embedding type tensor<bfloat16>(token{}) {\n    indexing: input title | embed splade | attribute | summary\n}",
            "explanation": "Defines 'splade_title_embedding' as a tensor field analogous to 'splade_chunk_embedding', but using the 'title' input for embedding. It supports similar indexing for attribute and summary use, without paged storage.",
            "keywords": [
                "field",
                "splade_title_embedding",
                "type",
                "tensor",
                "bfloat16",
                "token{}",
                "indexing",
                "input",
                "title",
                "embed",
                "splade",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L33-L33",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Begins the definition of a ranking profile called 'default', which inherits base search and ranking configurations from the existing 'default' profile.\n```\nrank-profile default inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L33-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L33-L33",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 33,
            "code": "rank-profile default inherits default {",
            "explanation": "Begins the definition of a ranking profile called 'default', which inherits base search and ranking configurations from the existing 'default' profile.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L34-L36",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Specifies query inputs for the ranking profile, with 'q' being a tensor of bfloat16 representing tokenized data. This tensor forms the basis for evaluating rank functions and expressions.\n```\ninputs {\n    query(q) tensor<bfloat16>(token{})\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L34-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L34-L36",
            "namespace": "code-p",
            "start_line": 34,
            "end_line": 36,
            "code": "inputs {\n    query(q) tensor<bfloat16>(token{})\n}",
            "explanation": "Specifies query inputs for the ranking profile, with 'q' being a tensor of bfloat16 representing tokenized data. This tensor forms the basis for evaluating rank functions and expressions.",
            "keywords": [
                "inputs",
                "query",
                "q",
                "tensor",
                "bfloat16",
                "token{}"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L37-L39",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "First-phase ranking expression combines BM25 scores from 'title' and 'chunk' fields. This expression calculates initial relevance scores for documents during retrieval.\n```\nfirst-phase {\n    expression: bm25(title) + bm25(chunk)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L37-L39",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L37-L39",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 39,
            "code": "first-phase {\n    expression: bm25(title) + bm25(chunk)\n}",
            "explanation": "First-phase ranking expression combines BM25 scores from 'title' and 'chunk' fields. This expression calculates initial relevance scores for documents during retrieval.",
            "keywords": [
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "chunk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L40-L42",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines a custom function 'title_token_scores' to calculate scores for title tokens by multiplying the query tensor with the 'splade_title_embedding' attribute. This function aids in custom ranking logic based on title embeddings.\n```\nfunction title_token_scores() {\n    expression: query(q) * attribute(splade_title_embedding)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L40-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L40-L42",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 42,
            "code": "function title_token_scores() {\n    expression: query(q) * attribute(splade_title_embedding)\n}",
            "explanation": "Defines a custom function 'title_token_scores' to calculate scores for title tokens by multiplying the query tensor with the 'splade_title_embedding' attribute. This function aids in custom ranking logic based on title embeddings.",
            "keywords": [
                "function",
                "title_token_scores",
                "expression",
                "query",
                "q",
                "attribute",
                "splade_title_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L43-L45",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Defines a custom function 'chunk_token_scores' similar to 'title_token_scores', computing scores for 'chunk' based on query and 'splade_chunk_embedding'. It supports advanced ranking by interpreting chunk-level embeddings.\n```\nfunction chunk_token_scores() {\n    expression: query(q) * attribute(splade_chunk_embedding)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L43-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L43-L45",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 45,
            "code": "function chunk_token_scores() {\n    expression: query(q) * attribute(splade_chunk_embedding)\n}",
            "explanation": "Defines a custom function 'chunk_token_scores' similar to 'title_token_scores', computing scores for 'chunk' based on query and 'splade_chunk_embedding'. It supports advanced ranking by interpreting chunk-level embeddings.",
            "keywords": [
                "function",
                "chunk_token_scores",
                "expression",
                "query",
                "q",
                "attribute",
                "splade_chunk_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L46-L48",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Second-phase ranking expression aggregates scores from 'title_token_scores' and 'chunk_token_scores'. This advanced scoring step refines document ranking beyond initial relevance, using accumulated token scores.\n```\nsecond-phase {\n    expression: sum(title_token_scores()) + sum(chunk_token_scores())\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L46-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L46-L48",
            "namespace": "code-p",
            "start_line": 46,
            "end_line": 48,
            "code": "second-phase {\n    expression: sum(title_token_scores()) + sum(chunk_token_scores())\n}",
            "explanation": "Second-phase ranking expression aggregates scores from 'title_token_scores' and 'chunk_token_scores'. This advanced scoring step refines document ranking beyond initial relevance, using accumulated token scores.",
            "keywords": [
                "second-phase",
                "expression",
                "sum",
                "title_token_scores",
                "sum",
                "chunk_token_scores"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::splade/schemas/doc.sd#L49-L49",
        "fields": {
            "title": "splade/schemas/doc.sd",
            "doc_id": "splade/schemas/doc.sd",
            "content": "Specifies a list of match features available for debugging and analysis in ranking. It includes scores and fields like 'title_token_scores', 'chunk_token_scores', 'bm25', and 'query(q)', providing insight into ranking decisions.\n```\nmatch-features: title_token_scores chunk_token_scores bm25(title) bm25(chunk) query(q)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "splade/schemas/doc.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/splade/schemas/doc.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "match-features: title_token_scores chunk_token_scores bm25(title) bm25(chunk) query(q)",
            "explanation": "Specifies a list of match features available for debugging and analysis in ranking. It includes scores and fields like 'title_token_scores', 'chunk_token_scores', 'bm25', and 'query(q)', providing insight into ranking decisions.",
            "keywords": [
                "match-features",
                "title_token_scores",
                "chunk_token_scores",
                "bm25",
                "title",
                "bm25",
                "chunk",
                "query",
                "q"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L3-L3",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A schema named 'passage' is being defined which will encapsulate all field and rank profile configurations related to the passage document type.\n```\nschema passage {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema passage {",
            "explanation": "A schema named 'passage' is being defined which will encapsulate all field and rank profile configurations related to the passage document type.",
            "keywords": [
                "schema",
                "passage"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L5-L5",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A document type called 'passage' is being defined within the schema to hold and define the fields of a passage.\n```\ndocument passage {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document passage {",
            "explanation": "A document type called 'passage' is being defined within the schema to hold and define the fields of a passage.",
            "keywords": [
                "document",
                "passage"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L7-L7",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A field named 'id' of type 'string' is declared in the document to uniquely identify each passage.\n```\nfield id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field id type string {",
            "explanation": "A field named 'id' of type 'string' is declared in the document to uniquely identify each passage.",
            "keywords": [
                "field",
                "id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L8-L8",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The 'id' field is configured for indexing to be used both in summaries and as an attribute, enabling efficient document retrieval based on this field.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | attribute",
            "explanation": "The 'id' field is configured for indexing to be used both in summaries and as an attribute, enabling efficient document retrieval based on this field.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L10-L10",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A field named 'text' of type 'string' is declared in the document to hold the text content of the passage.\n```\nfield text type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field text type string {",
            "explanation": "A field named 'text' of type 'string' is declared in the document to hold the text content of the passage.",
            "keywords": [
                "field",
                "text",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L11-L11",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The 'text' field is set to be indexed for both summary retrieval and general indexing purposes, making it searchable.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "indexing: summary | index",
            "explanation": "The 'text' field is set to be indexed for both summary retrieval and general indexing purposes, making it searchable.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L12-L12",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The 'text' field has BM25 indexing enabled to improve full-text search capabilities using the BM25 ranking algorithm.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "index: enable-bm25",
            "explanation": "The 'text' field has BM25 indexing enabled to improve full-text search capabilities using the BM25 ranking algorithm.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L16-L16",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A fieldset named 'default' is defined to group fields for convenience in ranking and retrieval operations.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "fieldset default {",
            "explanation": "A fieldset named 'default' is defined to group fields for convenience in ranking and retrieval operations.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L17-L17",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The 'default' fieldset includes the 'text' field, suggesting its importance for operations like ranking.\n```\nfields: text\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "fields: text",
            "explanation": "The 'default' fieldset includes the 'text' field, suggesting its importance for operations like ranking.",
            "keywords": [
                "fields",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L20-L20",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "A ranking profile named 'default' is defined to control the ranking of documents during retrieval with a specified ranking function.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "rank-profile default {",
            "explanation": "A ranking profile named 'default' is defined to control the ranking of documents during retrieval with a specified ranking function.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L21-L21",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The 'first-phase' block inside the default rank-profile specifies the first phase of ranking that will be applied during retrieval.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "first-phase {",
            "explanation": "The 'first-phase' block inside the default rank-profile specifies the first phase of ranking that will be applied during retrieval.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::retrieval-augmented-generation/schemas/passage.sd#L22-L22",
        "fields": {
            "title": "retrieval-augmented-generation/schemas/passage.sd",
            "doc_id": "retrieval-augmented-generation/schemas/passage.sd",
            "content": "The ranking expression uses the BM25 algorithm on the 'text' field to score and rank the matched documents.\n```\nexpression: bm25(text)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "retrieval-augmented-generation/schemas/passage.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/retrieval-augmented-generation/schemas/passage.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "expression: bm25(text)",
            "explanation": "The ranking expression uses the BM25 algorithm on the 'text' field to score and rank the matched documents.",
            "keywords": [
                "expression",
                "bm25",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L5-L5",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This snippet defines a document named 'passage'. It is essentially a container for fields that will be used for indexing and search purposes within the Vespa application.\n```\ndocument passage {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document passage {\n",
            "explanation": "This snippet defines a document named 'passage'. It is essentially a container for fields that will be used for indexing and search purposes within the Vespa application.",
            "keywords": [
                "document",
                "passage"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L7-L9",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'id' field is defined as a string type. It is indexed to be used in both summary and attribute contexts. This can facilitate fast lookups and retrievals when the id field is accessed.\n```\nfield id type string {\n  indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field id type string {\n  indexing: summary | attribute\n}",
            "explanation": "The 'id' field is defined as a string type. It is indexed to be used in both summary and attribute contexts. This can facilitate fast lookups and retrievals when the id field is accessed.",
            "keywords": [
                "field",
                "id",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L10-L13",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'text' field is defined as a string type and is indexed for retrieval in both summary and index modes. The BM25 indexing model is enabled for better relevance scoring based on term frequency and document length.\n```\nfield text type string {\n  indexing: summary | index\n  index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L10-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L10-L13",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 13,
            "code": "field text type string {\n  indexing: summary | index\n  index: enable-bm25\n}",
            "explanation": "The 'text' field is defined as a string type and is indexed for retrieval in both summary and index modes. The BM25 indexing model is enabled for better relevance scoring based on term frequency and document length.",
            "keywords": [
                "field",
                "text",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L19-L23",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'text_token_ids' field is a tensor of floats with a specified dimension. This field stores token IDs generated by the Hugging Face tokenizer, used by a cross-encoder. It is indexed and stored as a paged attribute for efficient retrieval.\n```\nfield text_token_ids type tensor<float>(d0[64])  {\n  # hf tokenizer - token ids used by cross-encoder \n  indexing: input text | embed tokenizer | attribute \n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L19-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L19-L23",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 23,
            "code": "field text_token_ids type tensor<float>(d0[64])  {\n  # hf tokenizer - token ids used by cross-encoder \n  indexing: input text | embed tokenizer | attribute \n  attribute: paged\n}",
            "explanation": "The 'text_token_ids' field is a tensor of floats with a specified dimension. This field stores token IDs generated by the Hugging Face tokenizer, used by a cross-encoder. It is indexed and stored as a paged attribute for efficient retrieval.",
            "keywords": [
                "field",
                "text_token_ids",
                "type",
                "tensor",
                "float",
                "d0",
                "indexing",
                "input",
                "text",
                "embed",
                "tokenizer",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L25-L30",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5' field is defined as a tensor of 'bfloat16' type with 384 dimensions and is used for indexing with embeddings based on 'e5' prefix instruction. The field uses 'angular' distance metric for measuring similarity between embeddings.\n```\nfield e5 type tensor<bfloat16>(x[384]) {\n  # e5 prefix instruction for document \n  indexing: input text | embed e5 | attribute | index\n  attribute {\n    distance-metric: angular\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L25-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L25-L30",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 30,
            "code": "field e5 type tensor<bfloat16>(x[384]) {\n  # e5 prefix instruction for document \n  indexing: input text | embed e5 | attribute | index\n  attribute {\n    distance-metric: angular\n  }",
            "explanation": "The 'e5' field is defined as a tensor of 'bfloat16' type with 384 dimensions and is used for indexing with embeddings based on 'e5' prefix instruction. The field uses 'angular' distance metric for measuring similarity between embeddings.",
            "keywords": [
                "field",
                "e5",
                "type",
                "tensor",
                "bfloat16",
                "x",
                "indexing",
                "input",
                "text",
                "embed",
                "e5",
                "attribute",
                "index",
                "attribute",
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L31-L36",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This snippet defines index settings for the 'e5' tensor field, specifically HNSW (Hierarchical Navigable Small World) graph parameters. It customizes the maximum links per node to 32 and the number of neighbors to explore at insertion to 400 for better search efficiency.\n```\nindex { # override default hnsw settings \n  hnsw {\n    max-links-per-node: 32\n    neighbors-to-explore-at-insert: 400\n  } \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L31-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L31-L36",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 36,
            "code": "index { # override default hnsw settings \n  hnsw {\n    max-links-per-node: 32\n    neighbors-to-explore-at-insert: 400\n  } \n}",
            "explanation": "This snippet defines index settings for the 'e5' tensor field, specifically HNSW (Hierarchical Navigable Small World) graph parameters. It customizes the maximum links per node to 32 and the number of neighbors to explore at insertion to 400 for better search efficiency.",
            "keywords": [
                "index",
                "hnsw",
                "max-links-per-node",
                "neighbors-to-explore-at-insert"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L39-L43",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'colbert' field is defined as a tensor of 'int8' type, designed with dimensions for ranking purposes rather than retrieval. It stores embeddings produced by the ColBERT model and is stored as a paged attribute.\n```\nfield colbert type tensor<int8>(dt{}, x[16]) {\n  # No index - used for ranking, not retrieval \n  indexing: input text | embed colbert | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L39-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L39-L43",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 43,
            "code": "field colbert type tensor<int8>(dt{}, x[16]) {\n  # No index - used for ranking, not retrieval \n  indexing: input text | embed colbert | attribute\n  attribute: paged\n}",
            "explanation": "The 'colbert' field is defined as a tensor of 'int8' type, designed with dimensions for ranking purposes rather than retrieval. It stores embeddings produced by the ColBERT model and is stored as a paged attribute.",
            "keywords": [
                "field",
                "colbert",
                "type",
                "tensor",
                "int8",
                "dt",
                "x",
                "indexing",
                "input",
                "text",
                "embed",
                "colbert",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L45-L51",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This snippet defines an ONNX model named 'ranker' for the Vespa application. It specifies the model file location and the necessary inputs, such as 'input_ids', 'attention_mask', and 'token_type_ids', needed for the model's functionality. A GPU device is allocated for efficient processing.\n```\nonnx-model ranker {\n  file: models/model.onnx\n  input input_ids: input_ids\n  input attention_mask: attention_mask\n  input token_type_ids: token_type_ids\n  gpu-device: 0\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L45-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L45-L51",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 51,
            "code": "onnx-model ranker {\n  file: models/model.onnx\n  input input_ids: input_ids\n  input attention_mask: attention_mask\n  input token_type_ids: token_type_ids\n  gpu-device: 0\n}",
            "explanation": "This snippet defines an ONNX model named 'ranker' for the Vespa application. It specifies the model file location and the necessary inputs, such as 'input_ids', 'attention_mask', and 'token_type_ids', needed for the model's functionality. A GPU device is allocated for efficient processing.",
            "keywords": [
                "onnx-model",
                "ranker",
                "file",
                "models/model.onnx",
                "input",
                "input_ids",
                "attention_mask",
                "token_type_ids",
                "gpu-device",
                "0"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L53-L57",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This rank profile snippet defines a basic ranking model using the BM25 algorithm, which involves a first-phase ranking expression that scores the 'text' field using BM25's term frequency and inverse document frequency formula.\n```\nrank-profile bm25 {\n  first-phase {\n    expression: bm25(text)\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L53-L57",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L53-L57",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 57,
            "code": "rank-profile bm25 {\n  first-phase {\n    expression: bm25(text)\n  }\n}",
            "explanation": "This rank profile snippet defines a basic ranking model using the BM25 algorithm, which involves a first-phase ranking expression that scores the 'text' field using BM25's term frequency and inverse document frequency formula.",
            "keywords": [
                "rank-profile",
                "bm25",
                "first-phase",
                "expression",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L59-L66",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5' rank-profile uses input query tensors to measure closeness between the query and document 'e5' embeddings. It performs a first-phase ranking to determine how closely the query matches the document representation based on embedding similarity.\n```\nrank-profile e5 {\n  inputs {\n    query(q) tensor<float>(x[384])\n  }\n  first-phase {\n    expression: closeness(field, e5)\n  } \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L59-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L59-L66",
            "namespace": "code-p",
            "start_line": 59,
            "end_line": 66,
            "code": "rank-profile e5 {\n  inputs {\n    query(q) tensor<float>(x[384])\n  }\n  first-phase {\n    expression: closeness(field, e5)\n  } \n}",
            "explanation": "The 'e5' rank-profile uses input query tensors to measure closeness between the query and document 'e5' embeddings. It performs a first-phase ranking to determine how closely the query matches the document representation based on embedding similarity.",
            "keywords": [
                "rank-profile",
                "e5",
                "inputs",
                "query",
                "q",
                "tensor",
                "float",
                "x",
                "first-phase",
                "expression",
                "closeness",
                "field",
                "e5"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L68-L72",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This rank profile 'bm25-colbert' inherits settings from 'e5-colbert' and adds a BM25-based first-phase ranking for the 'text' field. It combines BM25 scoring with potential complex rank expressions from the inherited profiles.\n```\nrank-profile bm25-colbert inherits e5-colbert {\n  first-phase {\n    expression: bm25(text)\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L68-L72",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L68-L72",
            "namespace": "code-p",
            "start_line": 68,
            "end_line": 72,
            "code": "rank-profile bm25-colbert inherits e5-colbert {\n  first-phase {\n    expression: bm25(text)\n  }\n}",
            "explanation": "This rank profile 'bm25-colbert' inherits settings from 'e5-colbert' and adds a BM25-based first-phase ranking for the 'text' field. It combines BM25 scoring with potential complex rank expressions from the inherited profiles.",
            "keywords": [
                "rank-profile",
                "bm25-colbert",
                "inherits",
                "e5-colbert",
                "first-phase",
                "expression",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L74-L81",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5-colbert' rank-profile inherits from 'e5' and uses inputs for query tensors. It defines a function 'cos_sim' to compute the cosine similarity between documents' 'e5' embeddings and the query, aiding in ranking based on vector similarity.\n```\nrank-profile e5-colbert inherits e5 {\n  inputs {\n    query(qt) tensor<float>(qt{},x[128])\n    query(q) tensor<float>(x[384])\n  }\n  function cos_sim() {\n    expression: cos(distance(field, e5))\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L74-L81",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L74-L81",
            "namespace": "code-p",
            "start_line": 74,
            "end_line": 81,
            "code": "rank-profile e5-colbert inherits e5 {\n  inputs {\n    query(qt) tensor<float>(qt{},x[128])\n    query(q) tensor<float>(x[384])\n  }\n  function cos_sim() {\n    expression: cos(distance(field, e5))\n  }",
            "explanation": "The 'e5-colbert' rank-profile inherits from 'e5' and uses inputs for query tensors. It defines a function 'cos_sim' to compute the cosine similarity between documents' 'e5' embeddings and the query, aiding in ranking based on vector similarity.",
            "keywords": [
                "rank-profile",
                "e5-colbert",
                "inherits",
                "e5",
                "inputs",
                "query",
                "qt",
                "tensor",
                "float",
                "x",
                "q",
                "function",
                "cos_sim",
                "expression",
                "cos",
                "distance",
                "field",
                "e5"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L82-L94",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'max_sim' function is defined to compute the maximal similarity score from query tensors and 'colbert' attributes by performing sums and reductions across specified tensor dimensions. This is useful for determining the most similar documents during ranking.\n```\nfunction max_sim() {\n  expression {\n    sum(\n      reduce(\n        sum(\n          query(qt) * unpack_bits(attribute(colbert)), x\n        ),\n        max, dt\n      ),\n      qt\n    )\n   }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L82-L94",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L82-L94",
            "namespace": "code-p",
            "start_line": 82,
            "end_line": 94,
            "code": "function max_sim() {\n  expression {\n    sum(\n      reduce(\n        sum(\n          query(qt) * unpack_bits(attribute(colbert)), x\n        ),\n        max, dt\n      ),\n      qt\n    )\n   }\n}",
            "explanation": "The 'max_sim' function is defined to compute the maximal similarity score from query tensors and 'colbert' attributes by performing sums and reductions across specified tensor dimensions. This is useful for determining the most similar documents during ranking.",
            "keywords": [
                "function",
                "max_sim",
                "expression",
                "sum",
                "reduce",
                "query",
                "qt",
                "unpack_bits",
                "attribute",
                "colbert",
                "x",
                "max",
                "dt"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L96-L100",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The second-phase of the 'e5-colbert' rank profile involves re-ranking the top 100 documents using the 'max_sim' function. The match features include both 'max_sim' and 'cos_sim', allowing for multi-faceted ranking criteria.\n```\nsecond-phase {\n  rerank-count: 100\n  expression: max_sim()\n}\nmatch-features: max_sim() cos_sim()\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L96-L100",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L96-L100",
            "namespace": "code-p",
            "start_line": 96,
            "end_line": 100,
            "code": "second-phase {\n  rerank-count: 100\n  expression: max_sim()\n}\nmatch-features: max_sim() cos_sim()",
            "explanation": "The second-phase of the 'e5-colbert' rank profile involves re-ranking the top 100 documents using the 'max_sim' function. The match features include both 'max_sim' and 'cos_sim', allowing for multi-faceted ranking criteria.",
            "keywords": [
                "second-phase",
                "rerank-count",
                "expression",
                "max_sim",
                "match-features",
                "max_sim",
                "cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L103-L110",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5-colbert-rrf' rank profile inherits from 'e5-colbert' and includes a global phase for re-ranking based on reciprocal rank combined from 'cos_sim' and 'max_sim'. It sets re-rank count to 200, emphasizing accurate ordering of features.\n```\nrank-profile e5-colbert-rrf inherits e5-colbert {\n   \n  global-phase {\n    rerank-count: 200\n    expression: reciprocal_rank(cos_sim) + reciprocal_rank(max_sim)\n  }\n  match-features: max_sim() cos_sim()\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L103-L110",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L103-L110",
            "namespace": "code-p",
            "start_line": 103,
            "end_line": 110,
            "code": "rank-profile e5-colbert-rrf inherits e5-colbert {\n   \n  global-phase {\n    rerank-count: 200\n    expression: reciprocal_rank(cos_sim) + reciprocal_rank(max_sim)\n  }\n  match-features: max_sim() cos_sim()\n}",
            "explanation": "The 'e5-colbert-rrf' rank profile inherits from 'e5-colbert' and includes a global phase for re-ranking based on reciprocal rank combined from 'cos_sim' and 'max_sim'. It sets re-rank count to 200, emphasizing accurate ordering of features.",
            "keywords": [
                "rank-profile",
                "e5-colbert-rrf",
                "inherits",
                "e5-colbert",
                "global-phase",
                "rerank-count",
                "expression",
                "reciprocal_rank",
                "cos_sim",
                "reciprocal_rank",
                "max_sim",
                "match-features",
                "max_sim",
                "cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L112-L117",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5-colbert-cross-encoder-rrf' rank profile supports queries with tensors for 'q', 'qt', and 'query_token_ids'. This setup facilitates diverse query formats, including token-based queries for cross-encoder efficiency.\n```\nrank-profile e5-colbert-cross-encoder-rrf {\n  inputs {\n    query(q) tensor<float>(x[384])\n    query(qt) tensor<float>(qt{},x[128])\n    query(query_token_ids) tensor<float>(d0[32])\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L112-L117",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L112-L117",
            "namespace": "code-p",
            "start_line": 112,
            "end_line": 117,
            "code": "rank-profile e5-colbert-cross-encoder-rrf {\n  inputs {\n    query(q) tensor<float>(x[384])\n    query(qt) tensor<float>(qt{},x[128])\n    query(query_token_ids) tensor<float>(d0[32])\n  }",
            "explanation": "The 'e5-colbert-cross-encoder-rrf' rank profile supports queries with tensors for 'q', 'qt', and 'query_token_ids'. This setup facilitates diverse query formats, including token-based queries for cross-encoder efficiency.",
            "keywords": [
                "rank-profile",
                "e5-colbert-cross-encoder-rrf",
                "inputs",
                "query",
                "q",
                "tensor",
                "float",
                "x",
                "qt",
                "query",
                "query_token_ids",
                "d0"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L118-L120",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'input_ids' function calculates token input IDs by processing the 'query_token_ids' and 'text_token_ids', returning a 96-length tensor. This is crucial for handling tokenized input sequences in neural computations.\n```\nfunction input_ids() {\n    expression: tokenInputIds(96, query(query_token_ids), attribute(text_token_ids))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L118-L120",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L118-L120",
            "namespace": "code-p",
            "start_line": 118,
            "end_line": 120,
            "code": "function input_ids() {\n    expression: tokenInputIds(96, query(query_token_ids), attribute(text_token_ids))\n}",
            "explanation": "The 'input_ids' function calculates token input IDs by processing the 'query_token_ids' and 'text_token_ids', returning a 96-length tensor. This is crucial for handling tokenized input sequences in neural computations.",
            "keywords": [
                "function",
                "input_ids",
                "expression",
                "tokenInputIds",
                "query",
                "query_token_ids",
                "attribute",
                "text_token_ids"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L121-L123",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'token_type_ids' function creates token type identifiers by evaluating the tokenized query and attribute fields. It ensures compatibility with models requiring specified token types for contextual input understanding.\n```\nfunction token_type_ids() {\n  expression: tokenTypeIds(96, query(query_token_ids), attribute(text_token_ids))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L121-L123",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L121-L123",
            "namespace": "code-p",
            "start_line": 121,
            "end_line": 123,
            "code": "function token_type_ids() {\n  expression: tokenTypeIds(96, query(query_token_ids), attribute(text_token_ids))\n}",
            "explanation": "The 'token_type_ids' function creates token type identifiers by evaluating the tokenized query and attribute fields. It ensures compatibility with models requiring specified token types for contextual input understanding.",
            "keywords": [
                "function",
                "token_type_ids",
                "expression",
                "tokenTypeIds",
                "query",
                "query_token_ids",
                "attribute",
                "text_token_ids"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L124-L126",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'attention_mask' function sets up attention masks for token sequences, essential for models like Transformers that utilize selective focus across tokens during processing.\n```\nfunction attention_mask() {\n  expression: tokenAttentionMask(96, query(query_token_ids), attribute(text_token_ids))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L124-L126",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L124-L126",
            "namespace": "code-p",
            "start_line": 124,
            "end_line": 126,
            "code": "function attention_mask() {\n  expression: tokenAttentionMask(96, query(query_token_ids), attribute(text_token_ids))\n}",
            "explanation": "The 'attention_mask' function sets up attention masks for token sequences, essential for models like Transformers that utilize selective focus across tokens during processing.",
            "keywords": [
                "function",
                "attention_mask",
                "expression",
                "tokenAttentionMask",
                "query",
                "query_token_ids",
                "attribute",
                "text_token_ids"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L127-L139",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'colbert_max_sim' function computes maximal similarity using ColBERT and query tensors. It processes by summing and reducing across specified tensor dimensions for high-fidelity similarity scoring.\n```\nfunction colbert_max_sim() {\n  expression {\n    sum(\n      reduce(\n        sum(\n          query(qt) * unpack_bits(attribute(colbert)), x\n        ),\n        max, dt\n      ),\n      qt\n    )\n   }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L127-L139",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L127-L139",
            "namespace": "code-p",
            "start_line": 127,
            "end_line": 139,
            "code": "function colbert_max_sim() {\n  expression {\n    sum(\n      reduce(\n        sum(\n          query(qt) * unpack_bits(attribute(colbert)), x\n        ),\n        max, dt\n      ),\n      qt\n    )\n   }\n}",
            "explanation": "The 'colbert_max_sim' function computes maximal similarity using ColBERT and query tensors. It processes by summing and reducing across specified tensor dimensions for high-fidelity similarity scoring.",
            "keywords": [
                "function",
                "colbert_max_sim",
                "expression",
                "sum",
                "reduce",
                "query",
                "qt",
                "unpack_bits",
                "attribute",
                "colbert",
                "x",
                "max",
                "dt"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L140-L142",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'e5_cos_sim' function is used to calculate the cosine similarity between the query and 'e5' tensors, facilitating the comparison of vectors for relevance scoring in ranking phases.\n```\nfunction e5_cos_sim() {\n  expression: cos(distance(field, e5))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L140-L142",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L140-L142",
            "namespace": "code-p",
            "start_line": 140,
            "end_line": 142,
            "code": "function e5_cos_sim() {\n  expression: cos(distance(field, e5))\n}",
            "explanation": "The 'e5_cos_sim' function is used to calculate the cosine similarity between the query and 'e5' tensors, facilitating the comparison of vectors for relevance scoring in ranking phases.",
            "keywords": [
                "function",
                "e5_cos_sim",
                "expression",
                "cos",
                "distance",
                "field",
                "e5"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L143-L145",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The 'cross_encoder' function applies the ONNX model named 'ranker' to compute cross-encoded similarities. This model intervention helps in jointly learning and ranking based on complex embedding interactions.\n```\nfunction cross_encoder() {\n  expression: onnx(ranker){d0:0,d1:0}\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L143-L145",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L143-L145",
            "namespace": "code-p",
            "start_line": 143,
            "end_line": 145,
            "code": "function cross_encoder() {\n  expression: onnx(ranker){d0:0,d1:0}\n}",
            "explanation": "The 'cross_encoder' function applies the ONNX model named 'ranker' to compute cross-encoded similarities. This model intervention helps in jointly learning and ranking based on complex embedding interactions.",
            "keywords": [
                "function",
                "cross_encoder",
                "expression",
                "onnx",
                "ranker",
                "d0",
                "d1"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L146-L148",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The first-phase snippet employs 'e5_cos_sim' as its ranking expression. This phase uses cosine similarity score based on 'e5' tensors to preliminarily rank documents.\n```\nfirst-phase {\n    expression: e5_cos_sim\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L146-L148",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L146-L148",
            "namespace": "code-p",
            "start_line": 146,
            "end_line": 148,
            "code": "first-phase {\n    expression: e5_cos_sim\n}",
            "explanation": "The first-phase snippet employs 'e5_cos_sim' as its ranking expression. This phase uses cosine similarity score based on 'e5' tensors to preliminarily rank documents.",
            "keywords": [
                "first-phase",
                "expression",
                "e5_cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L149-L152",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "During the second-phase, the rank profile re-ranks the top 1000 documents based on the 'colbert_max_sim' function. This phase emphasizes refined document selection through ColBERT-based similarity evaluation.\n```\nsecond-phase {\n  rerank-count: 1000\n  expression: colbert_max_sim()\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L149-L152",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L149-L152",
            "namespace": "code-p",
            "start_line": 149,
            "end_line": 152,
            "code": "second-phase {\n  rerank-count: 1000\n  expression: colbert_max_sim()\n}",
            "explanation": "During the second-phase, the rank profile re-ranks the top 1000 documents based on the 'colbert_max_sim' function. This phase emphasizes refined document selection through ColBERT-based similarity evaluation.",
            "keywords": [
                "second-phase",
                "rerank-count",
                "expression",
                "colbert_max_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L153-L160",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "The global-phase combines reciprocal ranks from 'e5_cos_sim', 'colbert_max_sim', and 'cross_encoder' scoring mechanisms. It performs final re-ranking for top 12 documents to ensure optimal ordering based on the cumulative rank calculations.\n```\nglobal-phase {\n  rerank-count: 12\n  expression {\n    reciprocal_rank(e5_cos_sim) + \n    reciprocal_rank(colbert_max_sim) + \n    reciprocal_rank(cross_encoder)\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L153-L160",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L153-L160",
            "namespace": "code-p",
            "start_line": 153,
            "end_line": 160,
            "code": "global-phase {\n  rerank-count: 12\n  expression {\n    reciprocal_rank(e5_cos_sim) + \n    reciprocal_rank(colbert_max_sim) + \n    reciprocal_rank(cross_encoder)\n  }\n}",
            "explanation": "The global-phase combines reciprocal ranks from 'e5_cos_sim', 'colbert_max_sim', and 'cross_encoder' scoring mechanisms. It performs final re-ranking for top 12 documents to ensure optimal ordering based on the cumulative rank calculations.",
            "keywords": [
                "global-phase",
                "rerank-count",
                "expression",
                "reciprocal_rank",
                "e5_cos_sim",
                "reciprocal_rank",
                "colbert_max_sim",
                "reciprocal_rank",
                "cross_encoder"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::msmarco-ranking/schemas/passage.sd#L161-L161",
        "fields": {
            "title": "msmarco-ranking/schemas/passage.sd",
            "doc_id": "msmarco-ranking/schemas/passage.sd",
            "content": "This line incorporates 'colbert_max_sim' and 'e5_cos_sim' as matching features used during the ranking process. It enables the ranking system to leverage multiple feature calculations for relevance determination.\n```\nmatch-features: colbert_max_sim e5_cos_sim\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "msmarco-ranking/schemas/passage.sd#L161-L161",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/msmarco-ranking/schemas/passage.sd#L161-L161",
            "namespace": "code-p",
            "start_line": 161,
            "end_line": 161,
            "code": "match-features: colbert_max_sim e5_cos_sim",
            "explanation": "This line incorporates 'colbert_max_sim' and 'e5_cos_sim' as matching features used during the ranking process. It enables the ranking system to leverage multiple feature calculations for relevance determination.",
            "keywords": [
                "match-features",
                "colbert_max_sim",
                "e5_cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L3-L3",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "The code begins by defining a schema named 'mail'. It sets up the overall structure for indexing and retrieving documents related to mail.\n```\nschema mail {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema mail {",
            "explanation": "The code begins by defining a schema named 'mail'. It sets up the overall structure for indexing and retrieving documents related to mail.",
            "keywords": [
                "schema",
                "mail"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L4-L4",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "This line specifies the definition of a document type also named 'mail', which will hold the fields necessary for mail-related data.\n```\ndocument mail {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document mail {",
            "explanation": "This line specifies the definition of a document type also named 'mail', which will hold the fields necessary for mail-related data.",
            "keywords": [
                "document",
                "mail"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L5-L5",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Defines the 'timestamp' field within the 'mail' document. This field is of type 'long' and will store the time-related data associated with each mail document.\n```\nfield timestamp type long {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "field timestamp type long {",
            "explanation": "Defines the 'timestamp' field within the 'mail' document. This field is of type 'long' and will store the time-related data associated with each mail document.",
            "keywords": [
                "field",
                "timestamp",
                "type",
                "long"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L6-L6",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Specifies the indexing properties for the 'timestamp' field, indicating that it should be used as both an 'attribute' and included in the 'summary' of the document.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "indexing: attribute | summary",
            "explanation": "Specifies the indexing properties for the 'timestamp' field, indicating that it should be used as both an 'attribute' and included in the 'summary' of the document.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L8-L8",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Declares a field named 'subject' of type 'string' within the 'mail' document. This field is used to store the subject line of the email.\n```\nfield subject type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field subject type string {",
            "explanation": "Declares a field named 'subject' of type 'string' within the 'mail' document. This field is used to store the subject line of the email.",
            "keywords": [
                "field",
                "subject",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L9-L9",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "For the 'subject' field, it specifies that the data should be indexed for search purposes and included in the summary of the document.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: index | summary",
            "explanation": "For the 'subject' field, it specifies that the data should be indexed for search purposes and included in the summary of the document.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L11-L11",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Introduces a field named 'content' of type 'string' in the 'mail' document. This field holds the body content of the email message.\n```\nfield content type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field content type string {",
            "explanation": "Introduces a field named 'content' of type 'string' in the 'mail' document. This field holds the body content of the email message.",
            "keywords": [
                "field",
                "content",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L9-L9",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Defines the indexing behavior for the 'content' field, allowing it to be both searchable (index) and included in the document summary.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: index | summary",
            "explanation": "Defines the indexing behavior for the 'content' field, allowing it to be both searchable (index) and included in the document summary.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L15-L15",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Specifies a field named 'embedding' of type 'tensor<bfloat16>(x[384])'. This field is likely used for storing vector embeddings related to the mail document.\n```\nfield embedding type tensor<bfloat16>(x[384]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "field embedding type tensor<bfloat16>(x[384]) {",
            "explanation": "Specifies a field named 'embedding' of type 'tensor<bfloat16>(x[384])'. This field is likely used for storing vector embeddings related to the mail document.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "bfloat16"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L16-L16",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Describes the indexing process for the 'embedding' field. It combines the 'subject' and 'content' fields to create embeddings, which are then stored as attributes.\n```\nindexing: (input subject || \"\") . \" \" . (input content || \"\") | embed | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "indexing: (input subject || \"\") . \" \" . (input content || \"\") | embed | attribute",
            "explanation": "Describes the indexing process for the 'embedding' field. It combines the 'subject' and 'content' fields to create embeddings, which are then stored as attributes.",
            "keywords": [
                "indexing",
                "input",
                "subject",
                "content",
                "embed",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L17-L17",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Specifies additional properties for the 'embedding' field when it is used as an attribute, including how the distance between embeddings should be measured.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "attribute {",
            "explanation": "Specifies additional properties for the 'embedding' field when it is used as an attribute, including how the distance between embeddings should be measured.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L18-L18",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Set the 'distance-metric' for the 'embedding' field to 'angular', indicating that angular distance will be used for comparing embeddings.\n```\ndistance-metric: angular\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "distance-metric: angular",
            "explanation": "Set the 'distance-metric' for the 'embedding' field to 'angular', indicating that angular distance will be used for comparing embeddings.",
            "keywords": [
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L21-L21",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Introduces a 'rank-profile' named 'default', which will define specific ranking configurations and properties for scoring and retrieving mail documents.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "rank-profile default {",
            "explanation": "Introduces a 'rank-profile' named 'default', which will define specific ranking configurations and properties for scoring and retrieving mail documents.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L22-L22",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Begins a 'rank-properties' section in the rank-profile, where specific properties related to ranking will be defined.\n```\nrank-properties {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "rank-properties {",
            "explanation": "Begins a 'rank-properties' section in the rank-profile, where specific properties related to ranking will be defined.",
            "keywords": [
                "rank-properties"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L23-L23",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Sets a rank property for 'freshness' based on the 'timestamp' field, with a maximum age of 77760000 seconds (approximately 900 days), which affects document scoring.\n```\nfreshness(timestamp).maxAge: 77760000\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "freshness(timestamp).maxAge: 77760000",
            "explanation": "Sets a rank property for 'freshness' based on the 'timestamp' field, with a maximum age of 77760000 seconds (approximately 900 days), which affects document scoring.",
            "keywords": [
                "freshness",
                "timestamp",
                "maxAge"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L25-L25",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Opens a section to define 'inputs' required by the rank-profile, which will be used in ranking calculations.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L25-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L25-L25",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 25,
            "code": "inputs {",
            "explanation": "Opens a section to define 'inputs' required by the rank-profile, which will be used in ranking calculations.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L26-L26",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Defines an input named 'qemb' as a tensor with the same dimensions and type as the 'embedding' field. This input will be utilized in ranking calculations.\n```\nquery(qemb) tensor<bfloat16>(x[384])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L26-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L26-L26",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 26,
            "code": "query(qemb) tensor<bfloat16>(x[384])",
            "explanation": "Defines an input named 'qemb' as a tensor with the same dimensions and type as the 'embedding' field. This input will be utilized in ranking calculations.",
            "keywords": [
                "query",
                "qemb",
                "tensor",
                "bfloat16"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L28-L28",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Begins the 'first-phase' section, where the initial ranking expression will be defined for scoring documents.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "first-phase {",
            "explanation": "Begins the 'first-phase' section, where the initial ranking expression will be defined for scoring documents.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L29-L29",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Specifies the ranking expression used in the first-phase, combining closeness of the embedding and freshness of the timestamp to score documents.\n```\nexpression: closeness(field,embedding) + freshness(timestamp)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "expression: closeness(field,embedding) + freshness(timestamp)",
            "explanation": "Specifies the ranking expression used in the first-phase, combining closeness of the embedding and freshness of the timestamp to score documents.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "embedding",
                "freshness",
                "timestamp"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::vector-streaming-search/schemas/mail.sd#L31-L31",
        "fields": {
            "title": "vector-streaming-search/schemas/mail.sd",
            "doc_id": "vector-streaming-search/schemas/mail.sd",
            "content": "Defines 'match-features' for the rank-profile, specifying which features should be calculated and available for each matched document: closeness and freshness.\n```\nmatch-features: closeness(field, embedding) freshness(timestamp)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "vector-streaming-search/schemas/mail.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/vector-streaming-search/schemas/mail.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "match-features: closeness(field, embedding) freshness(timestamp)",
            "explanation": "Defines 'match-features' for the rank-profile, specifying which features should be calculated and available for each matched document: closeness and freshness.",
            "keywords": [
                "match-features",
                "closeness",
                "field",
                "embedding",
                "freshness",
                "timestamp"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L3-L3",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Begins the definition of the schema named 'wiki' for the Vespa application.\n```\nschema wiki {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema wiki {",
            "explanation": "Begins the definition of the schema named 'wiki' for the Vespa application.",
            "keywords": [
                "schema",
                "wiki"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L5-L5",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a document type named 'wiki' within the schema.\n```\ndocument wiki {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "  document wiki {",
            "explanation": "Defines a document type named 'wiki' within the schema.",
            "keywords": [
                "document",
                "wiki"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L7-L7",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Specifies a field named 'id' with data type 'int' within the 'wiki' document.\n```\nfield id type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "    field id type int {",
            "explanation": "Specifies a field named 'id' with data type 'int' within the 'wiki' document.",
            "keywords": [
                "field",
                "id",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L8-L8",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Configures the 'id' field to be used for both attribute and summary indexing, allowing it to be utilized during search and retrieval operations.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "      indexing: attribute | summary",
            "explanation": "Configures the 'id' field to be used for both attribute and summary indexing, allowing it to be utilized during search and retrieval operations.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L11-L11",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a field named 'title' with a type of 'string' for the 'wiki' document.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "    field title type string {",
            "explanation": "Defines a field named 'title' with a type of 'string' for the 'wiki' document.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L12-L12",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Enables both index and summary functionalities for the 'title' field, allowing it to be text-searchable and included in query responses.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "      indexing: index | summary",
            "explanation": "Enables both index and summary functionalities for the 'title' field, allowing it to be text-searchable and included in query responses.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L13-L13",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Activates the BM25 ranking function for the 'title' field, which enhances full-text search capabilities by using a probabilistic model.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "      index: enable-bm25",
            "explanation": "Activates the BM25 ranking function for the 'title' field, which enhances full-text search capabilities by using a probabilistic model.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L16-L16",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Declares a 'url' field of type 'string' in the 'wiki' document.\n```\nfield url type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "    field url type string {",
            "explanation": "Declares a 'url' field of type 'string' in the 'wiki' document.",
            "keywords": [
                "field",
                "url",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L12-L12",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Marks the 'url' field for use in both indexing and summary, facilitating search and quick access to the field.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "      indexing: index | summary",
            "explanation": "Marks the 'url' field for use in both indexing and summary, facilitating search and quick access to the field.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L13-L13",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Applies BM25 indexing to the 'url' field, which aids in ranking documents based on relevance during search queries.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "      index: enable-bm25",
            "explanation": "Applies BM25 indexing to the 'url' field, which aids in ranking documents based on relevance during search queries.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L21-L21",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Introduces a 'paragraphs' field that holds an array of strings, allowing for multiple paragraphs per document.\n```\nfield paragraphs type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "    field paragraphs type array<string> {",
            "explanation": "Introduces a 'paragraphs' field that holds an array of strings, allowing for multiple paragraphs per document.",
            "keywords": [
                "field",
                "paragraphs",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L12-L12",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Configures the 'paragraphs' field for indexing and summary, helping in both search capabilities and quick retrieval.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "      indexing: index | summary",
            "explanation": "Configures the 'paragraphs' field for indexing and summary, helping in both search capabilities and quick retrieval.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L23-L23",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Enables BM25 indexing for the 'paragraphs' field, computing scores over all paragraph elements as a bag of words.\n```\nindex: enable-bm25 # bm25 computed over all elements (bag of words)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "      index: enable-bm25 # bm25 computed over all elements (bag of words)",
            "explanation": "Enables BM25 indexing for the 'paragraphs' field, computing scores over all paragraph elements as a bag of words.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L24-L24",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Activates bolding in search result snippets for the 'paragraphs' field, highlighting relevant query terms.\n```\nbolding: on\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "      bolding: on",
            "explanation": "Activates bolding in search result snippets for the 'paragraphs' field, highlighting relevant query terms.",
            "keywords": [
                "bolding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L28-L28",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a 'paragraph_embeddings' field with a tensor type featuring dynamic dimension 'p' and fixed dimension 'x' for 384 float values, used for machine learning tasks.\n```\nfield paragraph_embeddings type tensor<float>(p{},x[384]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "  field paragraph_embeddings type tensor<float>(p{},x[384]) {",
            "explanation": "Defines a 'paragraph_embeddings' field with a tensor type featuring dynamic dimension 'p' and fixed dimension 'x' for 384 float values, used for machine learning tasks.",
            "keywords": [
                "field",
                "paragraph_embeddings",
                "type",
                "tensor",
                "float",
                "p",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L29-L29",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Begins the indexing configuration for 'paragraph_embeddings', detailing how it will be preprocessed and stored.\n```\nindexing {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "    indexing {",
            "explanation": "Begins the indexing configuration for 'paragraph_embeddings', detailing how it will be preprocessed and stored.",
            "keywords": [
                "indexing"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L30-L30",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Specifies that the 'paragraph_embeddings' are derived from the 'paragraphs' field as input, enabling transformation into embeddings.\n```\ninput paragraphs |\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L30-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L30-L30",
            "namespace": "code-p",
            "start_line": 30,
            "end_line": 30,
            "code": "      input paragraphs |",
            "explanation": "Specifies that the 'paragraph_embeddings' are derived from the 'paragraphs' field as input, enabling transformation into embeddings.",
            "keywords": [
                "input",
                "paragraphs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L31-L31",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Initiates a loop to apply operations individually to each element from the input field 'paragraphs'.\n```\nfor_each {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "        for_each {",
            "explanation": "Initiates a loop to apply operations individually to each element from the input field 'paragraphs'.",
            "keywords": [
                "for_each"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L32-L32",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Concatenates the 'title' with each paragraph, separated by space, handling cases where 'title' or paragraphs may be missing using logical OR.\n```\n(input title || \"\") . \" \" . ( _ || \"\")\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L32-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L32-L32",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 32,
            "code": "         (input title || \"\") . \" \" . ( _ || \"\")",
            "explanation": "Concatenates the 'title' with each paragraph, separated by space, handling cases where 'title' or paragraphs may be missing using logical OR.",
            "keywords": [
                "input",
                "title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L33-L33",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Converts the prepared text into embeddings via the 'embed e5' function, stores them as attributes, and makes them searchable with an index, suitable for use with HNSW.\n```\n} | embed e5 | attribute | index # Index keyword enables HNSW index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L33-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L33-L33",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 33,
            "code": "        } | embed e5 | attribute | index # Index keyword enables HNSW index",
            "explanation": "Converts the prepared text into embeddings via the 'embed e5' function, stores them as attributes, and makes them searchable with an index, suitable for use with HNSW.",
            "keywords": [
                "embed",
                "e5",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L35-L35",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Opens the attribute configuration section for 'paragraph_embeddings', providing additional attribute-specific settings.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "    attribute {",
            "explanation": "Opens the attribute configuration section for 'paragraph_embeddings', providing additional attribute-specific settings.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L36-L36",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Sets the distance metric for the tensor to 'angular', aligning with the metric used by the E5 embedding model for nearest neighbor search.\n```\ndistance-metric: angular #match the E5 embedding model distance metric\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "      distance-metric: angular #match the E5 embedding model distance metric",
            "explanation": "Sets the distance metric for the tensor to 'angular', aligning with the metric used by the E5 embedding model for nearest neighbor search.",
            "keywords": [
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L40-L40",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Creates a fieldset named 'default' that groups specified fields for convenient access and usage.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L40-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L40-L40",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 40,
            "code": "  fieldset default {",
            "explanation": "Creates a fieldset named 'default' that groups specified fields for convenient access and usage.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L41-L41",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Includes 'title', 'url', and 'paragraphs' fields in the 'default' fieldset, so they can be referenced together.\n```\nfields: title, url, paragraphs\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "    fields: title, url, paragraphs ",
            "explanation": "Includes 'title', 'url', and 'paragraphs' fields in the 'default' fieldset, so they can be referenced together.",
            "keywords": [
                "fields",
                "title",
                "url",
                "paragraphs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L44-L44",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a rank profile named 'semantic' that inherits configurations from the 'default' profile, used for scoring search results.\n```\nrank-profile semantic inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "  rank-profile semantic inherits default {",
            "explanation": "Defines a rank profile named 'semantic' that inherits configurations from the 'default' profile, used for scoring search results.",
            "keywords": [
                "rank-profile",
                "semantic",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L45-L45",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Begins the section to specify additional inputs required for the ranking expressions in the 'semantic' profile.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L45-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L45-L45",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 45,
            "code": "    inputs {",
            "explanation": "Begins the section to specify additional inputs required for the ranking expressions in the 'semantic' profile.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L46-L46",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Declares an input named 'query(q)' as a tensor with dimension 'x' of size 384, anticipated for ranking computations.\n```\nquery(q) tensor<float>(x[384])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L46-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L46-L46",
            "namespace": "code-p",
            "start_line": 46,
            "end_line": 46,
            "code": "      query(q) tensor<float>(x[384])",
            "explanation": "Declares an input named 'query(q)' as a tensor with dimension 'x' of size 384, anticipated for ranking computations.",
            "keywords": [
                "query",
                "q",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L48-L48",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Starts the block for defining the first-phase ranking expression in the 'semantic' rank profile.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 48,
            "code": "    first-phase {",
            "explanation": "Starts the block for defining the first-phase ranking expression in the 'semantic' rank profile.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L49-L49",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Specifies the first-phase ranking expression using cosine distance between query embeddings and document 'paragraph_embeddings'.\n```\nexpression: cos(distance(field,paragraph_embeddings))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "      expression: cos(distance(field,paragraph_embeddings))",
            "explanation": "Specifies the first-phase ranking expression using cosine distance between query embeddings and document 'paragraph_embeddings'.",
            "keywords": [
                "expression",
                "cos",
                "distance",
                "field",
                "paragraph_embeddings"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L51-L51",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Opens a block to list and configure features used while matching documents in the ranking profile.\n```\nmatch-features {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L51-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L51-L51",
            "namespace": "code-p",
            "start_line": 51,
            "end_line": 51,
            "code": "    match-features {",
            "explanation": "Opens a block to list and configure features used while matching documents in the ranking profile.",
            "keywords": [
                "match-features"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L52-L52",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Uses the 'closest' feature with 'paragraph_embeddings' to find nearest neighbors matching the query.\n```\nclosest(paragraph_embeddings)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L52-L52",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L52-L52",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 52,
            "code": "      closest(paragraph_embeddings)",
            "explanation": "Uses the 'closest' feature with 'paragraph_embeddings' to find nearest neighbors matching the query.",
            "keywords": [
                "closest",
                "paragraph_embeddings"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L56-L56",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Specifies a ranking profile named 'bm25', tailored for BM25-based scoring.\n```\nrank-profile bm25 {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L56-L56",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L56-L56",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 56,
            "code": "  rank-profile bm25 {",
            "explanation": "Specifies a ranking profile named 'bm25', tailored for BM25-based scoring.",
            "keywords": [
                "rank-profile",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L48-L48",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Opens the first phase ranking block within the 'bm25' ranking profile.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 48,
            "code": "    first-phase {",
            "explanation": "Opens the first phase ranking block within the 'bm25' ranking profile.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L58-L58",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Multiplicatively weighs BM25 scores from the 'title' field twice as much as from 'paragraphs' to calculate relevance in the first phase.\n```\nexpression: 2*bm25(title) + bm25(paragraphs)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L58-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L58-L58",
            "namespace": "code-p",
            "start_line": 58,
            "end_line": 58,
            "code": "      expression: 2*bm25(title) + bm25(paragraphs) ",
            "explanation": "Multiplicatively weighs BM25 scores from the 'title' field twice as much as from 'paragraphs' to calculate relevance in the first phase.",
            "keywords": [
                "expression",
                "bm25",
                "title",
                "bm25",
                "paragraphs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L62-L62",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Initiates the definition of a 'hybrid' ranking profile inheriting from 'semantic', combining semantic and keyword-based scoring strategies.\n```\nrank-profile hybrid inherits semantic {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L62-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L62-L62",
            "namespace": "code-p",
            "start_line": 62,
            "end_line": 62,
            "code": "  rank-profile hybrid inherits semantic {",
            "explanation": "Initiates the definition of a 'hybrid' ranking profile inheriting from 'semantic', combining semantic and keyword-based scoring strategies.",
            "keywords": [
                "rank-profile",
                "hybrid",
                "inherits",
                "semantic"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L64-L64",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a function named 'all_paragraph_similarities' to compute similarities between query embeddings and all paragraph embeddings.\n```\nfunction all_paragraph_similarities() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L64-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L64-L64",
            "namespace": "code-p",
            "start_line": 64,
            "end_line": 64,
            "code": "    function all_paragraph_similarities() {",
            "explanation": "Defines a function named 'all_paragraph_similarities' to compute similarities between query embeddings and all paragraph embeddings.",
            "keywords": [
                "function",
                "all_paragraph_similarities"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L65-L65",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Starts a block to specify the expression calculation for the 'all_paragraph_similarities' function.\n```\nexpression {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 65,
            "code": "      expression {",
            "explanation": "Starts a block to specify the expression calculation for the 'all_paragraph_similarities' function.",
            "keywords": [
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L66-L66",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Uses 'cosine_similarity' between the query embedding and document 'paragraph_embeddings' over dimension 'x'.\n```\ncosine_similarity(query(q),attribute(paragraph_embeddings), x)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L66-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L66-L66",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 66,
            "code": "        cosine_similarity(query(q),attribute(paragraph_embeddings), x)",
            "explanation": "Uses 'cosine_similarity' between the query embedding and document 'paragraph_embeddings' over dimension 'x'.",
            "keywords": [
                "cosine_similarity",
                "query",
                "q",
                "attribute",
                "paragraph_embeddings",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L70-L70",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Declares a function 'avg_paragraph_similarities' to average paragraph similarities for ranking.\n```\nfunction avg_paragraph_similarities() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L70-L70",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L70-L70",
            "namespace": "code-p",
            "start_line": 70,
            "end_line": 70,
            "code": "    function avg_paragraph_similarities() {",
            "explanation": "Declares a function 'avg_paragraph_similarities' to average paragraph similarities for ranking.",
            "keywords": [
                "function",
                "avg_paragraph_similarities"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L65-L65",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Opens an expression block to define calculations for 'avg_paragraph_similarities'.\n```\nexpression {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 65,
            "code": "      expression {",
            "explanation": "Opens an expression block to define calculations for 'avg_paragraph_similarities'.",
            "keywords": [
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L72-L72",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Averages the cosine similarities across embeddings, using 'reduce' with 'avg' on dimension 'p'.\n```\nreduce(cosine_similarity(query(q),attribute(paragraph_embeddings), x), avg, p)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L72-L72",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L72-L72",
            "namespace": "code-p",
            "start_line": 72,
            "end_line": 72,
            "code": "        reduce(cosine_similarity(query(q),attribute(paragraph_embeddings), x), avg, p)",
            "explanation": "Averages the cosine similarities across embeddings, using 'reduce' with 'avg' on dimension 'p'.",
            "keywords": [
                "reduce",
                "cosine_similarity",
                "query",
                "q",
                "attribute",
                "paragraph_embeddings",
                "x",
                "avg",
                "p"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L75-L75",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Introduces a 'keywords' function for BM25 keyword scoring on selected fields.\n```\nfunction keywords() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L75-L75",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L75-L75",
            "namespace": "code-p",
            "start_line": 75,
            "end_line": 75,
            "code": "    function keywords() {",
            "explanation": "Introduces a 'keywords' function for BM25 keyword scoring on selected fields.",
            "keywords": [
                "function",
                "keywords"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L76-L76",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Computes a combined BM25 score for 'title', 'paragraphs', and 'url' fields, applying weights to keyword relevance.\n```\nexpression: bm25(title) + bm25(paragraphs) + bm25(url)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L76-L76",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L76-L76",
            "namespace": "code-p",
            "start_line": 76,
            "end_line": 76,
            "code": "      expression: bm25(title) + bm25(paragraphs) + bm25(url)",
            "explanation": "Computes a combined BM25 score for 'title', 'paragraphs', and 'url' fields, applying weights to keyword relevance.",
            "keywords": [
                "expression",
                "bm25",
                "title",
                "bm25",
                "paragraphs",
                "bm25",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L78-L78",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines 'log_bm25', a function that applies a logarithmic scale to the keyword score, penalizing low or non-relevance cases.\n```\nfunction log_bm25() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L78-L78",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L78-L78",
            "namespace": "code-p",
            "start_line": 78,
            "end_line": 78,
            "code": "    function log_bm25() {",
            "explanation": "Defines 'log_bm25', a function that applies a logarithmic scale to the keyword score, penalizing low or non-relevance cases.",
            "keywords": [
                "function",
                "log_bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L79-L79",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Uses a conditional expression to compute the logarithm of BM25 scores if greater than zero, otherwise returns zero.\n```\nexpression: if(keywords > 0, log(keywords), 0)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L79-L79",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L79-L79",
            "namespace": "code-p",
            "start_line": 79,
            "end_line": 79,
            "code": "      expression: if(keywords > 0, log(keywords), 0)",
            "explanation": "Uses a conditional expression to compute the logarithm of BM25 scores if greater than zero, otherwise returns zero.",
            "keywords": [
                "expression",
                "if",
                "keywords",
                "log",
                "keywords"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L48-L48",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Starts defining the first-phase ranking logic inside the 'hybrid' rank profile, blending multiple scoring components.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L48-L48",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 48,
            "code": "    first-phase {",
            "explanation": "Starts defining the first-phase ranking logic inside the 'hybrid' rank profile, blending multiple scoring components.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L49-L49",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Implements cosine distance as the primary measure of semantic similarity in the first-phase ranking.\n```\nexpression: cos(distance(field,paragraph_embeddings))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "      expression: cos(distance(field,paragraph_embeddings)) ",
            "explanation": "Implements cosine distance as the primary measure of semantic similarity in the first-phase ranking.",
            "keywords": [
                "expression",
                "cos",
                "distance",
                "field",
                "paragraph_embeddings"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L85-L85",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Opens the block for the second-phase ranking expression in the 'hybrid' rank profile, adding refinements to the scoring model.\n```\nsecond-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L85-L85",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L85-L85",
            "namespace": "code-p",
            "start_line": 85,
            "end_line": 85,
            "code": "    second-phase {",
            "explanation": "Opens the block for the second-phase ranking expression in the 'hybrid' rank profile, adding refinements to the scoring model.",
            "keywords": [
                "second-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L65-L65",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines the calculation method for scoring in the second-phase ranking sequence for the 'hybrid' profile.\n```\nexpression {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L65-L65",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 65,
            "code": "      expression {",
            "explanation": "Defines the calculation method for scoring in the second-phase ranking sequence for the 'hybrid' profile.",
            "keywords": [
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L87-L87",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Combines first-phase score with logarithmic BM25 and scales the semantic similarity, enhancing overall precision functionally.\n```\nfirstPhase + log_bm25 + 10*cos(distance(field,paragraph_embeddings))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L87-L87",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L87-L87",
            "namespace": "code-p",
            "start_line": 87,
            "end_line": 87,
            "code": "        firstPhase + log_bm25 + 10*cos(distance(field,paragraph_embeddings))",
            "explanation": "Combines first-phase score with logarithmic BM25 and scales the semantic similarity, enhancing overall precision functionally.",
            "keywords": [
                "firstPhase",
                "log_bm25",
                "cos",
                "distance",
                "field",
                "paragraph_embeddings"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L51-L51",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Declares features used for matching within the 'hybrid' ranking profile, detailing how matches are calculated.\n```\nmatch-features {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L51-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L51-L51",
            "namespace": "code-p",
            "start_line": 51,
            "end_line": 51,
            "code": "    match-features {",
            "explanation": "Declares features used for matching within the 'hybrid' ranking profile, detailing how matches are calculated.",
            "keywords": [
                "match-features"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L92-L92",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Uses 'firstPhase' scores directly as part of matching features, encapsulating initial ranking criteria.\n```\nfirstPhase\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L92-L92",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L92-L92",
            "namespace": "code-p",
            "start_line": 92,
            "end_line": 92,
            "code": "      firstPhase",
            "explanation": "Uses 'firstPhase' scores directly as part of matching features, encapsulating initial ranking criteria.",
            "keywords": [
                "firstPhase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L52-L52",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Incorporates the 'closest' function for finding the nearest 'paragraph_embeddings', facilitating match finding.\n```\nclosest(paragraph_embeddings)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L52-L52",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L52-L52",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 52,
            "code": "      closest(paragraph_embeddings)",
            "explanation": "Incorporates the 'closest' function for finding the nearest 'paragraph_embeddings', facilitating match finding.",
            "keywords": [
                "closest",
                "paragraph_embeddings"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L94-L94",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Leverages BM25 score computations for the 'title' field as part of match criteria during retrieval operations.\n```\nbm25(title)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L94-L94",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L94-L94",
            "namespace": "code-p",
            "start_line": 94,
            "end_line": 94,
            "code": "      bm25(title)",
            "explanation": "Leverages BM25 score computations for the 'title' field as part of match criteria during retrieval operations.",
            "keywords": [
                "bm25",
                "title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L95-L95",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Uses BM25 scoring on 'paragraphs' to help in determining document match relevance.\n```\nbm25(paragraphs)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L95-L95",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L95-L95",
            "namespace": "code-p",
            "start_line": 95,
            "end_line": 95,
            "code": "      bm25(paragraphs)",
            "explanation": "Uses BM25 scoring on 'paragraphs' to help in determining document match relevance.",
            "keywords": [
                "bm25",
                "paragraphs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L96-L96",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Applies BM25 calculation for 'url', allowing enhanced match discovery based on page addresses.\n```\nbm25(url)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L96-L96",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L96-L96",
            "namespace": "code-p",
            "start_line": 96,
            "end_line": 96,
            "code": "      bm25(url)",
            "explanation": "Applies BM25 calculation for 'url', allowing enhanced match discovery based on page addresses.",
            "keywords": [
                "bm25",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L97-L97",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Incorporates 'log_bm25' function, incorporating logarithmic BM25 processed relevance scores into matching.\n```\nlog_bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L97-L97",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L97-L97",
            "namespace": "code-p",
            "start_line": 97,
            "end_line": 97,
            "code": "      log_bm25",
            "explanation": "Incorporates 'log_bm25' function, incorporating logarithmic BM25 processed relevance scores into matching.",
            "keywords": [
                "log_bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L98-L98",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Utilizes average paragraph similarities as features, gauging overall semantic alignment of document contents.\n```\navg_paragraph_similarities\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L98-L98",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L98-L98",
            "namespace": "code-p",
            "start_line": 98,
            "end_line": 98,
            "code": "      avg_paragraph_similarities",
            "explanation": "Utilizes average paragraph similarities as features, gauging overall semantic alignment of document contents.",
            "keywords": [
                "avg_paragraph_similarities"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L99-L99",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Takes into account all paragraph similarities to detail comprehensive semantic correlation capabilities in matching.\n```\nall_paragraph_similarities\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L99-L99",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L99-L99",
            "namespace": "code-p",
            "start_line": 99,
            "end_line": 99,
            "code": "      all_paragraph_similarities",
            "explanation": "Takes into account all paragraph similarities to detail comprehensive semantic correlation capabilities in matching.",
            "keywords": [
                "all_paragraph_similarities"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L103-L103",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Defines a 'document-summary' type named 'minimal', providing a concise view of selected document fields.\n```\ndocument-summary minimal {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L103-L103",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L103-L103",
            "namespace": "code-p",
            "start_line": 103,
            "end_line": 103,
            "code": "  document-summary minimal {",
            "explanation": "Defines a 'document-summary' type named 'minimal', providing a concise view of selected document fields.",
            "keywords": [
                "document-summary",
                "minimal"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L104-L104",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Summarizes the 'id' field in the minimal document summary as part of core information delivery.\n```\nsummary id {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L104-L104",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L104-L104",
            "namespace": "code-p",
            "start_line": 104,
            "end_line": 104,
            "code": "    summary id {}",
            "explanation": "Summarizes the 'id' field in the minimal document summary as part of core information delivery.",
            "keywords": [
                "summary",
                "id"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multi-vector-indexing/schemas/wiki.sd#L105-L105",
        "fields": {
            "title": "multi-vector-indexing/schemas/wiki.sd",
            "doc_id": "multi-vector-indexing/schemas/wiki.sd",
            "content": "Includes the 'title' field in the 'minimal' summary output for quick document identification.\n```\nsummary title {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multi-vector-indexing/schemas/wiki.sd#L105-L105",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multi-vector-indexing/schemas/wiki.sd#L105-L105",
            "namespace": "code-p",
            "start_line": 105,
            "end_line": 105,
            "code": "    summary title {}",
            "explanation": "Includes the 'title' field in the 'minimal' summary output for quick document identification.",
            "keywords": [
                "summary",
                "title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Declares a schema with the name 'doc' within the Vespa application, which serves as a blueprint for documents to be indexed and queried.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "schema doc {",
            "explanation": "Declares a schema with the name 'doc' within the Vespa application, which serves as a blueprint for documents to be indexed and queried.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Declares a document type named 'doc' within the schema. This represents a logical grouping for storing fields related to a particular type of document.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "document doc {",
            "explanation": "Declares a document type named 'doc' within the schema. This represents a logical grouping for storing fields related to a particular type of document.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L8-L8",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Defines a field named 'text' with the data type 'string'. This field will store string values and supports certain indexing configurations.\n```\nfield text type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field text type string {",
            "explanation": "Defines a field named 'text' with the data type 'string'. This field will store string values and supports certain indexing configurations.",
            "keywords": [
                "field",
                "text",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L9-L9",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Inside the 'text' field definition, specifies that the field should be indexed and included in the summary when querying, to support text search and retrieval functionalities.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: index | summary",
            "explanation": "Inside the 'text' field definition, specifies that the field should be indexed and included in the summary when querying, to support text search and retrieval functionalities.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L10-L10",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Indicates that BM25 ranking algorithm should be enabled for the 'text' field, enhancing the precision of text-based searches by using a probabilistic statistical model.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "index: enable-bm25",
            "explanation": "Indicates that BM25 ranking algorithm should be enabled for the 'text' field, enhancing the precision of text-based searches by using a probabilistic statistical model.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L13-L13",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Defines a fieldset named 'default' which groups fields for easier access or processing. In this case, it includes the 'text' field, providing a convenient way to refer to the field collectively.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "fieldset default {",
            "explanation": "Defines a fieldset named 'default' which groups fields for easier access or processing. In this case, it includes the 'text' field, providing a convenient way to refer to the field collectively.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L14-L14",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Lists 'text' as the field included in the 'default' fieldset, indicating which field should be associated with this fieldset for operations such as matching.\n```\nfields: text\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "fields: text",
            "explanation": "Lists 'text' as the field included in the 'default' fieldset, indicating which field should be associated with this fieldset for operations such as matching.",
            "keywords": [
                "fields",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L19-L19",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Declares a field named 'embedding' of tensor type with 384 dimensions of float elements. It represents a multi-dimensional data structure often used for machine learning models and vector storage.\n```\nfield embedding type tensor<float>(x[384]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "field embedding type tensor<float>(x[384]) {",
            "explanation": "Declares a field named 'embedding' of tensor type with 384 dimensions of float elements. It represents a multi-dimensional data structure often used for machine learning models and vector storage.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L20-L20",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Specifies a series of indexing operations for the 'embedding' field. It uses text as input, applies the 'e5' embedding transformation, and configures the field as an attribute for fast retrieval and indexing.\n```\nindexing: input text | embed e5 | attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "indexing: input text | embed e5 | attribute | index",
            "explanation": "Specifies a series of indexing operations for the 'embedding' field. It uses text as input, applies the 'e5' embedding transformation, and configures the field as an attribute for fast retrieval and indexing.",
            "keywords": [
                "indexing",
                "input",
                "text",
                "embed",
                "e5",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L21-L21",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Declares an attribute block for the 'embedding' field to specify additional configurations such as the distance metric for vector operations.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "attribute {",
            "explanation": "Declares an attribute block for the 'embedding' field to specify additional configurations such as the distance metric for vector operations.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L22-L22",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Within the 'attribute' block of the 'embedding' field, specifies that the 'angular' distance metric should be used for calculations involving the embedding vectors, suitable for measuring angular similarity.\n```\ndistance-metric: angular\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "distance-metric: angular",
            "explanation": "Within the 'attribute' block of the 'embedding' field, specifies that the 'angular' distance metric should be used for calculations involving the embedding vectors, suitable for measuring angular similarity.",
            "keywords": [
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L27-L27",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Defines a rank profile named 'default' which inherits configurations from another rank profile also named 'default'. This is used to influence how documents are ranked and scored during queries.\n```\nrank-profile default inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L27-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L27-L27",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 27,
            "code": "rank-profile default inherits default {",
            "explanation": "Defines a rank profile named 'default' which inherits configurations from another rank profile also named 'default'. This is used to influence how documents are ranked and scored during queries.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L28-L28",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Starts an inputs block within the rank profile definition for specifying input parameters needed in ranking expressions.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "inputs {",
            "explanation": "Starts an inputs block within the rank profile definition for specifying input parameters needed in ranking expressions.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L29-L29",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Declares an input with the name 'e', denoting a query parameter of tensor type with 384 float dimensions, typically used to match against document embeddings for similarity search.\n```\nquery(e) tensor<float>(x[384])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "query(e) tensor<float>(x[384])",
            "explanation": "Declares an input with the name 'e', denoting a query parameter of tensor type with 384 float dimensions, typically used to match against document embeddings for similarity search.",
            "keywords": [
                "query",
                "e",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L31-L31",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Begins the first-phase ranking configuration, used to define the initial ranking criteria applied to search results before secondary refinements.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "first-phase {",
            "explanation": "Begins the first-phase ranking configuration, used to define the initial ranking criteria applied to search results before secondary refinements.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L32-L32",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Specifies a ranking expression combining the native rank of the 'text' field with the closeness of the 'embedding' field, influencing the order of search results based on textual relevance and vector similarity.\n```\nexpression: nativeRank(text) + closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L32-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L32-L32",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 32,
            "code": "expression: nativeRank(text) + closeness(field, embedding)",
            "explanation": "Specifies a ranking expression combining the native rank of the 'text' field with the closeness of the 'embedding' field, influencing the order of search results based on textual relevance and vector similarity.",
            "keywords": [
                "expression",
                "nativeRank",
                "text",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L34-L34",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Lists additional features to consider during ranking, such as BM25 score of the 'text' field and closeness criterion of the 'embedding' field, providing extra signals to refine ranking results.\n```\nmatch-features: bm25(text) closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L34-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L34-L34",
            "namespace": "code-p",
            "start_line": 34,
            "end_line": 34,
            "code": "match-features: bm25(text) closeness(field, embedding)",
            "explanation": "Lists additional features to consider during ranking, such as BM25 score of the 'text' field and closeness criterion of the 'embedding' field, providing extra signals to refine ranking results.",
            "keywords": [
                "match-features",
                "bm25",
                "text",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L35-L35",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Starts the global-phase ranking configuration, allowing further refinement of the search results ranking post the initial phase based on global criteria.\n```\nglobal-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "global-phase {",
            "explanation": "Starts the global-phase ranking configuration, allowing further refinement of the search results ranking post the initial phase based on global criteria.",
            "keywords": [
                "global-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L36-L36",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Begins the block for specifying a ranking expression in the global-phase, which details the computations used to finalize document ranking.\n```\nexpression {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "expression {",
            "explanation": "Begins the block for specifying a ranking expression in the global-phase, which details the computations used to finalize document ranking.",
            "keywords": [
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L37-L37",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Part of a ranking expression, applying the reciprocal rank function to the closeness measure of the 'embedding' field, promoting higher-ranking for higher closeness values in search results.\n```\nreciprocal_rank(closeness(field,embedding)) +\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "reciprocal_rank(closeness(field,embedding)) +",
            "explanation": "Part of a ranking expression, applying the reciprocal rank function to the closeness measure of the 'embedding' field, promoting higher-ranking for higher closeness values in search results.",
            "keywords": [
                "reciprocal_rank",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::simple-semantic-search/schemas/doc.sd#L38-L38",
        "fields": {
            "title": "simple-semantic-search/schemas/doc.sd",
            "doc_id": "simple-semantic-search/schemas/doc.sd",
            "content": "Completes the ranking expression with the reciprocal rank of the BM25 score for the 'text' field, refining the order by emphasizing higher BM25 scores.\n```\nreciprocal_rank(bm25(text))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "simple-semantic-search/schemas/doc.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/simple-semantic-search/schemas/doc.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "reciprocal_rank(bm25(text))",
            "explanation": "Completes the ranking expression with the reciprocal rank of the BM25 score for the 'text' field, refining the order by emphasizing higher BM25 scores.",
            "keywords": [
                "reciprocal_rank",
                "bm25",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "The schema is named \"doc\" and encapsulates the document definitions and their fields for the Vespa application.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "schema doc {",
            "explanation": "The schema is named \"doc\" and encapsulates the document definitions and their fields for the Vespa application.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "This block begins the definition of a document within the schema, named \"doc\".\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "document doc {",
            "explanation": "This block begins the definition of a document within the schema, named \"doc\".",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L8-L10",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a field named \"id\" of type string, which is configured to be indexed for summary purposes.\n```\nfield id type string {\n    indexing: summary \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L8-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L8-L10",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 10,
            "code": "field id type string {\n    indexing: summary \n}",
            "explanation": "Defines a field named \"id\" of type string, which is configured to be indexed for summary purposes.",
            "keywords": [
                "field",
                "id",
                "type",
                "string",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L11-L14",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a field named \"title\" of type string. The field is indexed for both searching and summarizing, and it enables BM25 ranking with the \"enable-bm25\" option.\n```\nfield title type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L11-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L11-L14",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 14,
            "code": "field title type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a field named \"title\" of type string. The field is indexed for both searching and summarizing, and it enables BM25 ranking with the \"enable-bm25\" option.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L15-L18",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a field named \"chunk\" of type string with indexing configured for both full-text search and summary, and it also uses BM25 ranking.\n```\nfield chunk type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L15-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L15-L18",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 18,
            "code": "field chunk type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a field named \"chunk\" of type string with indexing configured for both full-text search and summary, and it also uses BM25 ranking.",
            "keywords": [
                "field",
                "chunk",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L20-L22",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a fieldset named \"default\" that includes the fields \"title\" and \"chunk\".\n```\nfieldset default {\n    fields: title, chunk\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L20-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L20-L22",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 22,
            "code": "fieldset default {\n    fields: title, chunk\n}",
            "explanation": "Defines a fieldset named \"default\" that includes the fields \"title\" and \"chunk\".",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "chunk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L24-L29",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a field \"embedding\" of tensor type, which combines \"title\" and \"chunk\" fields, applies the 'e5' embedding, and stores it as both an attribute and an index, utilizing angular distance metric for similarity search.\n```\nfield embedding type tensor<bfloat16>(x[384]) {\n    indexing: (input title || \"\") . \" \" . (input chunk || \"\") | embed e5 | attribute | index \n\tattribute {\n        distance-metric: angular\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L24-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L24-L29",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 29,
            "code": "field embedding type tensor<bfloat16>(x[384]) {\n    indexing: (input title || \"\") . \" \" . (input chunk || \"\") | embed e5 | attribute | index \n\tattribute {\n        distance-metric: angular\n    }\n}",
            "explanation": "Defines a field \"embedding\" of tensor type, which combines \"title\" and \"chunk\" fields, applies the 'e5' embedding, and stores it as both an attribute and an index, utilizing angular distance metric for similarity search.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "bfloat16",
                "indexing",
                "input",
                "title",
                "chunk",
                "embed",
                "e5",
                "attribute",
                "index",
                "attribute",
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L31-L33",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a field \"colbert\" of int8 tensor type. It concatenates \"title\" and \"chunk\", embeds it using 'colbert', and stores it as an attribute.\n```\nfield colbert type tensor<int8>(dt{}, x[16]) {\n    indexing: (input title || \"\") . \" \" . (input chunk || \"\") | embed colbert | attribute  \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L31-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L31-L33",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 33,
            "code": "field colbert type tensor<int8>(dt{}, x[16]) {\n    indexing: (input title || \"\") . \" \" . (input chunk || \"\") | embed colbert | attribute  \n}",
            "explanation": "Defines a field \"colbert\" of int8 tensor type. It concatenates \"title\" and \"chunk\", embeds it using 'colbert', and stores it as an attribute.",
            "keywords": [
                "field",
                "colbert",
                "type",
                "tensor",
                "int8",
                "indexing",
                "input",
                "title",
                "chunk",
                "embed",
                "colbert",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L36-L40",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a ranking profile named \"default\" that inherits Vespa's default settings, specifying input query tensors \"qt\" (float type) and \"q\" (bfloat16 type) for ranking calculations.\n```\nrank-profile default inherits default {\n    inputs {\n        query(qt) tensor<float>(qt{}, x[128])\n        query(q) tensor<bfloat16>(x[384])\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L36-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L36-L40",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 40,
            "code": "rank-profile default inherits default {\n    inputs {\n        query(qt) tensor<float>(qt{}, x[128])\n        query(q) tensor<bfloat16>(x[384])\n    }",
            "explanation": "Defines a ranking profile named \"default\" that inherits Vespa's default settings, specifying input query tensors \"qt\" (float type) and \"q\" (bfloat16 type) for ranking calculations.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "default",
                "inputs",
                "query",
                "qt",
                "tensor",
                "float",
                "qt",
                "x",
                "query",
                "q",
                "tensor",
                "bfloat16",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L41-L43",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Specifies a function \"unpack\" that unpacks the bits of the \"colbert\" attribute tensor using the unpack_bits expression.\n```\nfunction unpack() {\n    expression: unpack_bits(attribute(colbert))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L41-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L41-L43",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 43,
            "code": "function unpack() {\n    expression: unpack_bits(attribute(colbert))\n}",
            "explanation": "Specifies a function \"unpack\" that unpacks the bits of the \"colbert\" attribute tensor using the unpack_bits expression.",
            "keywords": [
                "function",
                "unpack",
                "expression",
                "unpack_bits",
                "attribute",
                "colbert"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L44-L46",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a function \"cos_sim\" to calculate the cosine similarity between the \"field\" tensor and the \"embedding\" tensor using the distance metric.\n```\nfunction cos_sim() {\n    expression: cos(distance(field, embedding))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L44-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L44-L46",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 46,
            "code": "function cos_sim() {\n    expression: cos(distance(field, embedding))\n}",
            "explanation": "Defines a function \"cos_sim\" to calculate the cosine similarity between the \"field\" tensor and the \"embedding\" tensor using the distance metric.",
            "keywords": [
                "function",
                "cos_sim",
                "expression",
                "cos",
                "distance",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L47-L59",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines the \"max_sim\" function, which calculates the maximum similarity by reducing the sum of the product of query \"qt\" and unpacked \"colbert\" tensor along the 'x' dimension, then summing over \"qt\".\n```\nfunction max_sim() {\n    expression {\n        sum(\n            reduce(\n                sum(\n                    query(qt) * unpack() , x\n                ),\n                max, dt\n            ),\n            qt\n        )\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L47-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L47-L59",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 59,
            "code": "function max_sim() {\n    expression {\n        sum(\n            reduce(\n                sum(\n                    query(qt) * unpack() , x\n                ),\n                max, dt\n            ),\n            qt\n        )\n    }\n}",
            "explanation": "Defines the \"max_sim\" function, which calculates the maximum similarity by reducing the sum of the product of query \"qt\" and unpacked \"colbert\" tensor along the 'x' dimension, then summing over \"qt\".",
            "keywords": [
                "function",
                "max_sim",
                "expression",
                "sum",
                "reduce",
                "sum",
                "query",
                "qt",
                "unpack",
                "x",
                "max",
                "dt",
                "qt"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L60-L62",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines the first-phase ranking expression using the \"cos_sim\" function within the \"rank-profile default\" context.\n```\nfirst-phase {\n    expression: cos_sim\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L60-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L60-L62",
            "namespace": "code-p",
            "start_line": 60,
            "end_line": 62,
            "code": "first-phase {\n    expression: cos_sim\n}",
            "explanation": "Defines the first-phase ranking expression using the \"cos_sim\" function within the \"rank-profile default\" context.",
            "keywords": [
                "first-phase",
                "expression",
                "cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L63-L65",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Specifies the second-phase ranking expression using the \"max_sim\" function within the \"rank-profile default\".\n```\nsecond-phase {\n    expression: max_sim\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L63-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L63-L65",
            "namespace": "code-p",
            "start_line": 63,
            "end_line": 65,
            "code": "second-phase {\n    expression: max_sim\n}",
            "explanation": "Specifies the second-phase ranking expression using the \"max_sim\" function within the \"rank-profile default\".",
            "keywords": [
                "second-phase",
                "expression",
                "max_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L66-L66",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Lists the match features used in ranking, which include \"max_sim\", \"cos_sim\", BM25 scores for \"title\" and \"chunk\" fields.\n```\nmatch-features: max_sim cos_sim bm25(title) bm25(chunk)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L66-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L66-L66",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 66,
            "code": "match-features: max_sim cos_sim bm25(title) bm25(chunk)",
            "explanation": "Lists the match features used in ranking, which include \"max_sim\", \"cos_sim\", BM25 scores for \"title\" and \"chunk\" fields.",
            "keywords": [
                "match-features",
                "max_sim",
                "cos_sim",
                "bm25",
                "title",
                "bm25",
                "chunk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L69-L72",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a \"bm25\" rank profile, inheriting settings from the default profile, using a first-phase ranking expression that sums BM25 scores of \"title\" and \"chunk\" fields.\n```\nrank-profile bm25 inherits default {\n    first-phase {\n        expression: bm25(title) + bm25(chunk)\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L69-L72",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L69-L72",
            "namespace": "code-p",
            "start_line": 69,
            "end_line": 72,
            "code": "rank-profile bm25 inherits default {\n    first-phase {\n        expression: bm25(title) + bm25(chunk)\n    }",
            "explanation": "Defines a \"bm25\" rank profile, inheriting settings from the default profile, using a first-phase ranking expression that sums BM25 scores of \"title\" and \"chunk\" fields.",
            "keywords": [
                "rank-profile",
                "bm25",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "chunk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L73-L75",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Specifies the second-phase ranking expression, using the result from the first-phase within the \"bm25\" rank profile.\n```\nsecond-phase {\n    expression: firstPhase\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L73-L75",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L73-L75",
            "namespace": "code-p",
            "start_line": 73,
            "end_line": 75,
            "code": "second-phase {\n    expression: firstPhase\n}",
            "explanation": "Specifies the second-phase ranking expression, using the result from the first-phase within the \"bm25\" rank profile.",
            "keywords": [
                "second-phase",
                "expression",
                "firstPhase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L78-L81",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Introduces an \"e5\" rank profile, inheriting settings from the default, with a first-phase expression that calculates cosine similarity using the \"cos_sim\" function.\n```\nrank-profile e5 inherits default {\n     first-phase {\n        expression: cos_sim\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L78-L81",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L78-L81",
            "namespace": "code-p",
            "start_line": 78,
            "end_line": 81,
            "code": "rank-profile e5 inherits default {\n     first-phase {\n        expression: cos_sim\n    }",
            "explanation": "Introduces an \"e5\" rank profile, inheriting settings from the default, with a first-phase expression that calculates cosine similarity using the \"cos_sim\" function.",
            "keywords": [
                "rank-profile",
                "e5",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "cos_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L73-L75",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Uses the result from the first-phase as the second-phase expression in the \"e5\" rank profile.\n```\nsecond-phase {\n    expression: firstPhase\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L73-L75",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L73-L75",
            "namespace": "code-p",
            "start_line": 73,
            "end_line": 75,
            "code": "second-phase {\n    expression: firstPhase\n}",
            "explanation": "Uses the result from the first-phase as the second-phase expression in the \"e5\" rank profile.",
            "keywords": [
                "second-phase",
                "expression",
                "firstPhase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert/schemas/doc.sd#L87-L96",
        "fields": {
            "title": "colbert/schemas/doc.sd",
            "doc_id": "colbert/schemas/doc.sd",
            "content": "Defines a \"hybrid\" rank profile inheriting default settings, featuring a global-phase expression that combines reciprocal ranks of \"max_sim\", \"cos_sim\", and BM25 scores for \"chunk\" and \"title\".\n```\nrank-profile hybrid inherits default {\n    global-phase {\n        expression {\n          reciprocal_rank(max_sim) + \n          reciprocal_rank(cos_sim) + \n          reciprocal_rank(bm25(chunk)) + \n          reciprocal_rank(bm25(title))\n        }\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert/schemas/doc.sd#L87-L96",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert/schemas/doc.sd#L87-L96",
            "namespace": "code-p",
            "start_line": 87,
            "end_line": 96,
            "code": "rank-profile hybrid inherits default {\n    global-phase {\n        expression {\n          reciprocal_rank(max_sim) + \n          reciprocal_rank(cos_sim) + \n          reciprocal_rank(bm25(chunk)) + \n          reciprocal_rank(bm25(title))\n        }\n    }\n}",
            "explanation": "Defines a \"hybrid\" rank profile inheriting default settings, featuring a global-phase expression that combines reciprocal ranks of \"max_sim\", \"cos_sim\", and BM25 scores for \"chunk\" and \"title\".",
            "keywords": [
                "rank-profile",
                "hybrid",
                "inherits",
                "default",
                "global-phase",
                "expression",
                "reciprocal_rank",
                "max_sim",
                "reciprocal_rank",
                "cos_sim",
                "reciprocal_rank",
                "bm25",
                "chunk",
                "reciprocal_rank",
                "bm25",
                "title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L2-L2",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Begins the definition of a schema named \"image\", which will contain the structure and configuration for handling image documents in a Vespa application.\n```\nschema image {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema image {",
            "explanation": "Begins the definition of a schema named \"image\", which will contain the structure and configuration for handling image documents in a Vespa application.",
            "keywords": [
                "schema",
                "image"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L4-L4",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Declares a document type named \"image\" within the \"image\" schema, which will specify different fields and their properties for storing and querying image data.\n```\ndocument image {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document image {",
            "explanation": "Declares a document type named \"image\" within the \"image\" schema, which will specify different fields and their properties for storing and querying image data.",
            "keywords": [
                "document",
                "image"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L6-L9",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a field named \"language\" of type string. It suggests that this field does not require language guessing as it is set directly using \"en\" as the language, and it applies the 'set_language' indexing action.\n```\n# Don't need to guess language\nfield language type string {\n  indexing: \"en\" | set_language\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L6-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L6-L9",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 9,
            "code": "# Don't need to guess language\nfield language type string {\n  indexing: \"en\" | set_language\n}",
            "explanation": "Defines a field named \"language\" of type string. It suggests that this field does not require language guessing as it is set directly using \"en\" as the language, and it applies the 'set_language' indexing action.",
            "keywords": [
                "field",
                "language",
                "type",
                "string",
                "indexing",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L11-L13",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a field \"url\" of type string which will be indexed for search and stored in summary for retrieval, making it accessible in query results and searchable.\n```\nfield url type string {\n  indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field url type string {\n  indexing: summary | index\n}",
            "explanation": "Defines a field \"url\" of type string which will be indexed for search and stored in summary for retrieval, making it accessible in query results and searchable.",
            "keywords": [
                "field",
                "url",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L15-L17",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Declares a \"caption\" field of type string, which is indexed and included in the summary for document retrieval and search capabilities.\n```\nfield caption type string {\n  indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field caption type string {\n  indexing: summary | index\n}",
            "explanation": "Declares a \"caption\" field of type string, which is indexed and included in the summary for document retrieval and search capabilities.",
            "keywords": [
                "field",
                "caption",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L19-L23",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Describes a \"license\" field that is indexed and summarized. It uses a rank filter for ranking and matches words to improve the search precision.\n```\nfield license type string {\n  indexing: summary | index\n  rank:filter\n  match:word\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L19-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L19-L23",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 23,
            "code": "field license type string {\n  indexing: summary | index\n  rank:filter\n  match:word\n}",
            "explanation": "Describes a \"license\" field that is indexed and summarized. It uses a rank filter for ranking and matches words to improve the search precision.",
            "keywords": [
                "field",
                "license",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "rank",
                "filter",
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L25-L29",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Describes a \"nsfw\" field, where content is flagged as potentially not safe for work. It is indexed, stored in the summary, uses filter ranking, and matches based on whole words to ensure accurate search results.\n```\nfield nsfw type string {\n  indexing: summary | index\n  rank:filter\n  match:word\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L25-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L25-L29",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 29,
            "code": "field nsfw type string {\n  indexing: summary | index\n  rank:filter\n  match:word\n}",
            "explanation": "Describes a \"nsfw\" field, where content is flagged as potentially not safe for work. It is indexed, stored in the summary, uses filter ranking, and matches based on whole words to ensure accurate search results.",
            "keywords": [
                "field",
                "nsfw",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "rank",
                "filter",
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L31-L34",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a \"similarity\" field of type byte, which is indexed and stored as an attribute with paging enabled. It is noted that the byte value is scaled from a float, potentially representing image similarity scores.\n```\nfield similarity type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L31-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L31-L34",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 34,
            "code": "field similarity type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}",
            "explanation": "Defines a \"similarity\" field of type byte, which is indexed and stored as an attribute with paging enabled. It is noted that the byte value is scaled from a float, potentially representing image similarity scores.",
            "keywords": [
                "field",
                "similarity",
                "type",
                "byte",
                "indexing",
                "summary",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L36-L39",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Describes an \"aesthetic\" field of type byte, indexed and stored as an attribute with paging capability, where its value represents an aesthetic score scaled from a float.\n```\nfield aesthetic type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L36-L39",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L36-L39",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 39,
            "code": "field aesthetic type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}",
            "explanation": "Describes an \"aesthetic\" field of type byte, indexed and stored as an attribute with paging capability, where its value represents an aesthetic score scaled from a float.",
            "keywords": [
                "field",
                "aesthetic",
                "type",
                "byte",
                "indexing",
                "summary",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L41-L43",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Specifies a \"watermark\" field of type byte, indexed and summarized, scaled from a float, to identify the presence of watermarks in images.\n```\nfield watermark type byte { #scaled from float\n  indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L41-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L41-L43",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 43,
            "code": "field watermark type byte { #scaled from float\n  indexing: summary | attribute\n}",
            "explanation": "Specifies a \"watermark\" field of type byte, indexed and summarized, scaled from a float, to identify the presence of watermarks in images.",
            "keywords": [
                "field",
                "watermark",
                "type",
                "byte",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L45-L48",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Declares a \"punsafe\" field to represent potentially unsafe image content, indexed and stored as a paged attribute, with the value scaled from a float for compact representation.\n```\nfield punsafe type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L45-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L45-L48",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 48,
            "code": "field punsafe type byte { #scaled from float\n  indexing: summary | attribute\n  attribute: paged\n}",
            "explanation": "Declares a \"punsafe\" field to represent potentially unsafe image content, indexed and stored as a paged attribute, with the value scaled from a float for compact representation.",
            "keywords": [
                "field",
                "punsafe",
                "type",
                "byte",
                "indexing",
                "summary",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L50-L53",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a \"height\" field as an integer, which is indexed and stored as a paged attribute, crucial for queries involving image dimensions.\n```\nfield height type int {\n  indexing: summary | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L50-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L50-L53",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 53,
            "code": "field height type int {\n  indexing: summary | attribute\n  attribute: paged\n}",
            "explanation": "Defines a \"height\" field as an integer, which is indexed and stored as a paged attribute, crucial for queries involving image dimensions.",
            "keywords": [
                "field",
                "height",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L55-L58",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Specifies a \"width\" field of integer type, indexed and stored with paging, essential for handling queries related to image dimensions.\n```\nfield width type int {\n  indexing: summary | attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L55-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L55-L58",
            "namespace": "code-p",
            "start_line": 55,
            "end_line": 58,
            "code": "field width type int {\n  indexing: summary | attribute\n  attribute: paged\n}",
            "explanation": "Specifies a \"width\" field of integer type, indexed and stored with paging, essential for handling queries related to image dimensions.",
            "keywords": [
                "field",
                "width",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L60-L65",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Describes a \"centroids\" field as an array of strings, indexed and summarized. It performs word matching without stemming and applies ranking as a filter, useful for clustering-related data.\n```\nfield centroids type array<string> {\n  indexing: summary | index\n  match:word\n  stemming:none\n  rank: filter\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L60-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L60-L65",
            "namespace": "code-p",
            "start_line": 60,
            "end_line": 65,
            "code": "field centroids type array<string> {\n  indexing: summary | index\n  match:word\n  stemming:none\n  rank: filter\n}",
            "explanation": "Describes a \"centroids\" field as an array of strings, indexed and summarized. It performs word matching without stemming and applies ranking as a filter, useful for clustering-related data.",
            "keywords": [
                "field",
                "centroids",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "index",
                "match",
                "word",
                "stemming",
                "none",
                "rank",
                "filter"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L67-L70",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Declares a \"reduced_vector\" field of tensor type with 128 dimensions (bfloat16), intended for retrieval as a paged attribute, aiding in efficient storage of dimensionality-reduced image vectors.\n```\nfield reduced_vector type tensor<bfloat16>(x[128]) {\n  indexing: attribute\n  attribute: paged\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L67-L70",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L67-L70",
            "namespace": "code-p",
            "start_line": 67,
            "end_line": 70,
            "code": "field reduced_vector type tensor<bfloat16>(x[128]) {\n  indexing: attribute\n  attribute: paged\n}",
            "explanation": "Declares a \"reduced_vector\" field of tensor type with 128 dimensions (bfloat16), intended for retrieval as a paged attribute, aiding in efficient storage of dimensionality-reduced image vectors.",
            "keywords": [
                "field",
                "reduced_vector",
                "type",
                "tensor",
                "bfloat16",
                "indexing",
                "attribute",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L72-L74",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a \"vector\" field as a dense tensor of 768 dimensions using bfloat16, indexed for summary retrieval, generally representing complete feature vectors for the documents.\n```\nfield vector type tensor<bfloat16>(x[768]) {\n  indexing: summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L72-L74",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L72-L74",
            "namespace": "code-p",
            "start_line": 72,
            "end_line": 74,
            "code": "field vector type tensor<bfloat16>(x[768]) {\n  indexing: summary\n}",
            "explanation": "Defines a \"vector\" field as a dense tensor of 768 dimensions using bfloat16, indexed for summary retrieval, generally representing complete feature vectors for the documents.",
            "keywords": [
                "field",
                "vector",
                "type",
                "tensor",
                "bfloat16",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L78-L81",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a document summary named \"vector-summary\" that loads summary fields from disk, specifically including a \"vector\" summary field. This is used for vector data retrieval in query results.\n```\ndocument-summary vector-summary {\n  from-disk\n  summary vector { }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L78-L81",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L78-L81",
            "namespace": "code-p",
            "start_line": 78,
            "end_line": 81,
            "code": "document-summary vector-summary {\n  from-disk\n  summary vector { }\n}",
            "explanation": "Defines a document summary named \"vector-summary\" that loads summary fields from disk, specifically including a \"vector\" summary field. This is used for vector data retrieval in query results.",
            "keywords": [
                "document-summary",
                "vector-summary",
                "from-disk",
                "summary",
                "vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L83-L85",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a default fieldset named \"default\", grouping the fields \"caption\" and \"url\" to be used together in query operations, allowing for simple field selection.\n```\nfieldset default {\n  fields: caption, url\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L83-L85",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L83-L85",
            "namespace": "code-p",
            "start_line": 83,
            "end_line": 85,
            "code": "fieldset default {\n  fields: caption, url\n}",
            "explanation": "Defines a default fieldset named \"default\", grouping the fields \"caption\" and \"url\" to be used together in query operations, allowing for simple field selection.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "caption",
                "url"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L87-L91",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Sets up a rank profile named \"default\" that takes query inputs as tensors, specifying a main query tensor with 768 dimensions and a reduced query tensor with 128 dimensions. This facilitates advanced ranking computations based on vector similarity.\n```\nrank-profile default {\n    inputs {\n      query(q) tensor<float>(x[768])\n      query(q_reduced) tensor<float>(x[128])\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L87-L91",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L87-L91",
            "namespace": "code-p",
            "start_line": 87,
            "end_line": 91,
            "code": "rank-profile default {\n    inputs {\n      query(q) tensor<float>(x[768])\n      query(q_reduced) tensor<float>(x[128])\n    }",
            "explanation": "Sets up a rank profile named \"default\" that takes query inputs as tensors, specifying a main query tensor with 768 dimensions and a reduced query tensor with 128 dimensions. This facilitates advanced ranking computations based on vector similarity.",
            "keywords": [
                "rank-profile",
                "default",
                "inputs",
                "query",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L92-L96",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Configures the first phase of ranking to use two threads per search. It computes relevance by summing the product of a reduced query tensor and a reduced attribute vector, setting match features to evaluate on the first phase's output.\n```\nnum-threads-per-search: 2\n    first-phase {\n      expression: sum(query(q_reduced) * attribute(reduced_vector))\n    }\n    match-features: firstPhase\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L92-L96",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L92-L96",
            "namespace": "code-p",
            "start_line": 92,
            "end_line": 96,
            "code": "    num-threads-per-search: 2\n    first-phase {\n      expression: sum(query(q_reduced) * attribute(reduced_vector))\n    }\n    match-features: firstPhase",
            "explanation": "Configures the first phase of ranking to use two threads per search. It computes relevance by summing the product of a reduced query tensor and a reduced attribute vector, setting match features to evaluate on the first phase's output.",
            "keywords": [
                "num-threads-per-search",
                "first-phase",
                "expression",
                "sum",
                "match-features",
                "firstPhase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/image.sd#L99-L104",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/image.sd",
            "content": "Defines a \"text\" rank profile, which also uses two threads per search. In its first phase, it ranks documents by combining native ranking scores of the \"caption\" and \"url\" fields, optimizing for text relevance.\n```\nrank-profile text {\n  num-threads-per-search: 2\n  first-phase {\n    expression: nativeRank(caption) + nativeRank(url)\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/image.sd#L99-L104",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/image.sd#L99-L104",
            "namespace": "code-p",
            "start_line": 99,
            "end_line": 104,
            "code": "rank-profile text {\n  num-threads-per-search: 2\n  first-phase {\n    expression: nativeRank(caption) + nativeRank(url)\n  }\n}",
            "explanation": "Defines a \"text\" rank profile, which also uses two threads per search. In its first phase, it ranks documents by combining native ranking scores of the \"caption\" and \"url\" fields, optimizing for text relevance.",
            "keywords": [
                "rank-profile",
                "text",
                "num-threads-per-search",
                "first-phase",
                "expression",
                "nativeRank"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L2-L2",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Defines a new schema named 'centroid'. A schema in Vespa defines the structure for documents that will be indexed or searched. This schema will encapsulate documents related to centroids.\n```\nschema centroid {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema centroid {",
            "explanation": "Defines a new schema named 'centroid'. A schema in Vespa defines the structure for documents that will be indexed or searched. This schema will encapsulate documents related to centroids.",
            "keywords": [
                "schema",
                "centroid"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L4-L4",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Begins the definition of a document type named 'centroid' within the centroid schema. Document types define the specific fields and attributes for data that will be stored and queried in Vespa.\n```\ndocument centroid {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document centroid {",
            "explanation": "Begins the definition of a document type named 'centroid' within the centroid schema. Document types define the specific fields and attributes for data that will be stored and queried in Vespa.",
            "keywords": [
                "document",
                "centroid"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L6-L6",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Declares a field named 'id' of type 'int' within the 'centroid' document. This field is used to store integer values representing some identification number for the document.\n```\nfield id type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field id type int {",
            "explanation": "Declares a field named 'id' of type 'int' within the 'centroid' document. This field is used to store integer values representing some identification number for the document.",
            "keywords": [
                "field",
                "id",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L7-L7",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Specifies the indexing schema for the 'id' field, indicating that the field should be stored as an attribute and available in summaries. Attributes are optimized for fast access, and summaries are used to store data that can be retrieved but are not needed for searching.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: attribute | summary",
            "explanation": "Specifies the indexing schema for the 'id' field, indicating that the field should be stored as an attribute and available in summaries. Attributes are optimized for fast access, and summaries are used to store data that can be retrieved but are not needed for searching.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L10-L10",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Defines a field named 'vector' which is a tensor consisting of 768 dimensions. The element type of the tensor is bfloat16, which allows for compact representation useful in machine learning tasks.\n```\nfield vector type tensor<bfloat16>(x[768]) {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field vector type tensor<bfloat16>(x[768]) {}",
            "explanation": "Defines a field named 'vector' which is a tensor consisting of 768 dimensions. The element type of the tensor is bfloat16, which allows for compact representation useful in machine learning tasks.",
            "keywords": [
                "field",
                "vector",
                "type",
                "tensor",
                "bfloat16"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L12-L12",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Introduces a field named 'reduced_vector' which is a tensor of 128 dimensions. The bfloat16 type is used to maintain precision in reduced dimensional embeddings.\n```\nfield reduced_vector type tensor<bfloat16>(x[128]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "field reduced_vector type tensor<bfloat16>(x[128]) {",
            "explanation": "Introduces a field named 'reduced_vector' which is a tensor of 128 dimensions. The bfloat16 type is used to maintain precision in reduced dimensional embeddings.",
            "keywords": [
                "field",
                "reduced_vector",
                "type",
                "tensor",
                "bfloat16"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L13-L13",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "For the 'reduced_vector' field, specifies that it should be indexed both as an attribute for fast retrieval, and as an index for efficient search operations.\n```\nindexing: attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "indexing: attribute | index",
            "explanation": "For the 'reduced_vector' field, specifies that it should be indexed both as an attribute for fast retrieval, and as an index for efficient search operations.",
            "keywords": [
                "indexing",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L14-L14",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Begins the declaration of an index configuration for the 'reduced_vector' field, allowing customized behavior during search operations.\n```\nindex {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "index {",
            "explanation": "Begins the declaration of an index configuration for the 'reduced_vector' field, allowing customized behavior during search operations.",
            "keywords": [
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L15-L15",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Specifies the usage of the HNSW (Hierarchical Navigable Small World) algorithm for indexing the 'reduced_vector' field. HNSW is a popular algorithm for efficient approximate nearest neighbor search in high-dimensional spaces.\n```\nhnsw {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "hnsw {",
            "explanation": "Specifies the usage of the HNSW (Hierarchical Navigable Small World) algorithm for indexing the 'reduced_vector' field. HNSW is a popular algorithm for efficient approximate nearest neighbor search in high-dimensional spaces.",
            "keywords": [
                "hnsw"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L16-L16",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Sets a parameter for the HNSW index, specifying the maximum number of connections, or links, each node can have. Limiting links can affect the performance and accuracy of neighbor searches.\n```\nmax-links-per-node: 24\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "max-links-per-node: 24",
            "explanation": "Sets a parameter for the HNSW index, specifying the maximum number of connections, or links, each node can have. Limiting links can affect the performance and accuracy of neighbor searches.",
            "keywords": [
                "max-links-per-node"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L17-L17",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Configures the number of neighbors to be explored when inserting an item into the HNSW index. This parameter can influence the build time and search quality of the index.\n```\nneighbors-to-explore-at-insert: 200\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "neighbors-to-explore-at-insert: 200",
            "explanation": "Configures the number of neighbors to be explored when inserting an item into the HNSW index. This parameter can influence the build time and search quality of the index.",
            "keywords": [
                "neighbors-to-explore-at-insert"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L20-L20",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Begins configuration settings for the attribute aspect of the 'reduced_vector' field. This includes potential search or retrieval strategies like distance measurement.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "attribute {",
            "explanation": "Begins configuration settings for the attribute aspect of the 'reduced_vector' field. This includes potential search or retrieval strategies like distance measurement.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L21-L21",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Sets the distance metric to 'innerproduct' for computations involving the 'reduced_vector' attribute. Inner product is commonly used in applications like recommendation systems where similarity between vectors is critical.\n```\ndistance-metric: innerproduct\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "distance-metric: innerproduct",
            "explanation": "Sets the distance metric to 'innerproduct' for computations involving the 'reduced_vector' attribute. Inner product is commonly used in applications like recommendation systems where similarity between vectors is critical.",
            "keywords": [
                "distance-metric",
                "innerproduct"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L26-L26",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Defines a default rank profile for scoring and ordering documents during search queries. Rank profiles determine how search matches are calculated and ranked.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L26-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L26-L26",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 26,
            "code": "rank-profile default {",
            "explanation": "Defines a default rank profile for scoring and ordering documents during search queries. Rank profiles determine how search matches are calculated and ranked.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L27-L27",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Specifies the number of threads to be used per search query when using this rank profile. Limiting to one thread can help manage resources or ensure determinism in execution.\n```\nnum-threads-per-search: 1\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L27-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L27-L27",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 27,
            "code": "num-threads-per-search: 1",
            "explanation": "Specifies the number of threads to be used per search query when using this rank profile. Limiting to one thread can help manage resources or ensure determinism in execution.",
            "keywords": [
                "num-threads-per-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L28-L28",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Defines additional input data, specifically tensors, that can be supplied with a query to influence ranking calculations. This setup facilitates customizable search relevance adjustments.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "inputs {",
            "explanation": "Defines additional input data, specifically tensors, that can be supplied with a query to influence ranking calculations. This setup facilitates customizable search relevance adjustments.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L29-L29",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Specifies an expected query input named 'q_reduced' which is a tensor of 128 dimensions with elements of type float. This input is presumably used for query-time adjustments in ranking or retrieval.\n```\nquery(q_reduced) tensor<float>(x[128])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "query(q_reduced) tensor<float>(x[128])",
            "explanation": "Specifies an expected query input named 'q_reduced' which is a tensor of 128 dimensions with elements of type float. This input is presumably used for query-time adjustments in ranking or retrieval.",
            "keywords": [
                "query",
                "q_reduced",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L31-L31",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Starts the configuration of the first-phase ranking expression, which is used to compute initial scoring of documents during a search query.\n```\nfirst-phase  {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "first-phase  {",
            "explanation": "Starts the configuration of the first-phase ranking expression, which is used to compute initial scoring of documents during a search query.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L32-L32",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Assigns an expression for the first-phase ranking to evaluate the closeness metric between the query and the 'reduced_vector' field. Closeness is a measure used for determining the similarity or relevancy of the field to the query input.\n```\nexpression: closeness(field, reduced_vector)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L32-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L32-L32",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 32,
            "code": "expression: closeness(field, reduced_vector)",
            "explanation": "Assigns an expression for the first-phase ranking to evaluate the closeness metric between the query and the 'reduced_vector' field. Closeness is a measure used for determining the similarity or relevancy of the field to the query input.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "reduced_vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-image-search/src/main/application/schemas/centroid.sd#L34-L34",
        "fields": {
            "title": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "doc_id": "billion-scale-image-search/src/main/application/schemas/centroid.sd",
            "content": "Lists features to include in the search match response: the 'id' attribute and the result of the closeness metric between the query and the 'reduced_vector'. This provides detailed context about the matched documents during retrieval.\n```\nmatch-features: attribute(id) closeness(field, reduced_vector)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-image-search/src/main/application/schemas/centroid.sd#L34-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-image-search/src/main/application/schemas/centroid.sd#L34-L34",
            "namespace": "code-p",
            "start_line": 34,
            "end_line": 34,
            "code": "match-features: attribute(id) closeness(field, reduced_vector)",
            "explanation": "Lists features to include in the search match response: the 'id' attribute and the result of the closeness metric between the query and the 'reduced_vector'. This provides detailed context about the matched documents during retrieval.",
            "keywords": [
                "match-features",
                "attribute",
                "id",
                "closeness",
                "field",
                "reduced_vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L7-L9",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a field named 'language' of type 'string' that is used for setting the language during indexing and includes it in the summary.\n```\nfield language type string {\n  indexing: set_language | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field language type string {\n  indexing: set_language | summary\n}",
            "explanation": "Defines a field named 'language' of type 'string' that is used for setting the language during indexing and includes it in the summary.",
            "keywords": [
                "field",
                "language",
                "type",
                "string",
                "indexing",
                "set_language",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L11-L14",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a field named 'title' of type 'string', enabling it for indexing and summary, and configures BM25 ranking for the index.\n```\nfield title type string {\n  indexing: index | summary\n  index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L11-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L11-L14",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 14,
            "code": "field title type string {\n  indexing: index | summary\n  index: enable-bm25\n}",
            "explanation": "Defines a field named 'title' of type 'string', enabling it for indexing and summary, and configures BM25 ranking for the index.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L16-L19",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a field named 'doc_id' of type 'string' that is indexed and included in summaries. It uses word matching for searches.\n```\nfield doc_id type string {\n  indexing: index | summary\n  match: word \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L16-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L16-L19",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 19,
            "code": "field doc_id type string {\n  indexing: index | summary\n  match: word \n}",
            "explanation": "Defines a field named 'doc_id' of type 'string' that is indexed and included in summaries. It uses word matching for searches.",
            "keywords": [
                "field",
                "doc_id",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L21-L25",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a 'text' field of type 'string' that supports indexing, is included in summaries, enables BM25 indexing, and has bolding turned on for matched terms.\n```\nfield text type string {\n  indexing: index | summary\n  index: enable-bm25\n  bolding: on \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L21-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L21-L25",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 25,
            "code": "field text type string {\n  indexing: index | summary\n  index: enable-bm25\n  bolding: on \n}",
            "explanation": "Defines a 'text' field of type 'string' that supports indexing, is included in summaries, enables BM25 indexing, and has bolding turned on for matched terms.",
            "keywords": [
                "field",
                "text",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25",
                "bolding",
                "on"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L28-L33",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines an 'embedding' field of type 'tensor<float>' with 384 dimensions. It combines the title and text inputs for embedding and its attribute uses an angular distance metric.\n```\nfield embedding type tensor<float>(x[384]) {\n  indexing: input title . \" \" . input text | embed | attribute\n  attribute {\n    distance-metric: angular\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L28-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L28-L33",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 33,
            "code": "field embedding type tensor<float>(x[384]) {\n  indexing: input title . \" \" . input text | embed | attribute\n  attribute {\n    distance-metric: angular\n  }\n}",
            "explanation": "Defines an 'embedding' field of type 'tensor<float>' with 384 dimensions. It combines the title and text inputs for embedding and its attribute uses an angular distance metric.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "indexing",
                "input",
                "title",
                "embed",
                "attribute",
                "attribute",
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L35-L37",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a fieldset named 'default' containing the fields 'title' and 'text', grouping them for retrieval or ranking purposes.\n```\nfieldset default {\n  fields: title, text \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L35-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L35-L37",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 37,
            "code": "fieldset default {\n  fields: title, text \n}",
            "explanation": "Defines a fieldset named 'default' containing the fields 'title' and 'text', grouping them for retrieval or ranking purposes.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L39-L42",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a 'semantic' rank profile inheriting from 'default' with an input query tensor of 384 dimensions for use in ranking expressions.\n```\nrank-profile semantic inherits default {\n  inputs {\n    query(q) tensor<float>(x[384])\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L39-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L39-L42",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 42,
            "code": "rank-profile semantic inherits default {\n  inputs {\n    query(q) tensor<float>(x[384])\n  }",
            "explanation": "Defines a 'semantic' rank profile inheriting from 'default' with an input query tensor of 384 dimensions for use in ranking expressions.",
            "keywords": [
                "rank-profile",
                "semantic",
                "inherits",
                "default",
                "inputs",
                "query",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L43-L45",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Specifies the first-phase ranking expression for the 'semantic' profile using cosine of the angular distance between fields and embeddings for ranking.\n```\nfirst-phase {\n  expression: cos(distance(field,embedding))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L43-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L43-L45",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 45,
            "code": "first-phase {\n  expression: cos(distance(field,embedding))\n}",
            "explanation": "Specifies the first-phase ranking expression for the 'semantic' profile using cosine of the angular distance between fields and embeddings for ranking.",
            "keywords": [
                "first-phase",
                "expression",
                "cos",
                "distance",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L48-L51",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a 'hybrid' rank profile inheriting from 'semantic' with a function 'keywords' computing BM25 scores for both title and text fields.\n```\nrank-profile hybrid inherits semantic {\n  function keywords() {\n    expression: bm25(title) + bm25(text) \n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L48-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L48-L51",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 51,
            "code": "rank-profile hybrid inherits semantic {\n  function keywords() {\n    expression: bm25(title) + bm25(text) \n  }",
            "explanation": "Defines a 'hybrid' rank profile inheriting from 'semantic' with a function 'keywords' computing BM25 scores for both title and text fields.",
            "keywords": [
                "rank-profile",
                "hybrid",
                "inherits",
                "semantic",
                "function",
                "keywords",
                "expression",
                "bm25",
                "title",
                "bm25",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L52-L54",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Specifies a function 'log_bm25' within the 'hybrid' profile, returning the logarithm of the 'keywords' score if it is greater than zero, otherwise resulting in zero.\n```\nfunction log_bm25() {\n  expression: if(keywords > 0, log(keywords), 0)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L52-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L52-L54",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 54,
            "code": "function log_bm25() {\n  expression: if(keywords > 0, log(keywords), 0)\n}",
            "explanation": "Specifies a function 'log_bm25' within the 'hybrid' profile, returning the logarithm of the 'keywords' score if it is greater than zero, otherwise resulting in zero.",
            "keywords": [
                "function",
                "log_bm25",
                "expression",
                "if",
                "keywords",
                "log"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L56-L58",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Describes the first-phase ranking expression for the 'hybrid' profile, combining the 'log_bm25' score and cosine distance measurement for enhanced ranking.\n```\nfirst-phase {\n  expression: log_bm25/2 + 2*cos(distance(field,embedding))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L56-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L56-L58",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 58,
            "code": "first-phase {\n  expression: log_bm25/2 + 2*cos(distance(field,embedding))\n}",
            "explanation": "Describes the first-phase ranking expression for the 'hybrid' profile, combining the 'log_bm25' score and cosine distance measurement for enhanced ranking.",
            "keywords": [
                "first-phase",
                "expression",
                "log_bm25",
                "cos",
                "distance",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L61-L64",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Defines a 'bm25' ranking profile inheriting from 'semantic', using a first-phase ranking that sums BM25 scores for title and text fields.\n```\nrank-profile bm25 inherits semantic {\n  first-phase {\n    expression: bm25(title) + bm25(text)\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L61-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L61-L64",
            "namespace": "code-p",
            "start_line": 61,
            "end_line": 64,
            "code": "rank-profile bm25 inherits semantic {\n  first-phase {\n    expression: bm25(title) + bm25(text)\n  }",
            "explanation": "Defines a 'bm25' ranking profile inheriting from 'semantic', using a first-phase ranking that sums BM25 scores for title and text fields.",
            "keywords": [
                "rank-profile",
                "bm25",
                "inherits",
                "semantic",
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L65-L70",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Configures BM25 scoring properties for fields 'title' and 'abstract', setting parameter values for 'k1' and 'b' to tweak the ranking impact.\n```\nrank-properties {\n  bm25(title).k1: 0.9\n  bm25(title).b: 0.4\n  bm25(abstract).k1: 0.9\n  bm25(abstract).b: 0.4\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L65-L70",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L65-L70",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 70,
            "code": "rank-properties {\n  bm25(title).k1: 0.9\n  bm25(title).b: 0.4\n  bm25(abstract).k1: 0.9\n  bm25(abstract).b: 0.4\n}",
            "explanation": "Configures BM25 scoring properties for fields 'title' and 'abstract', setting parameter values for 'k1' and 'b' to tweak the ranking impact.",
            "keywords": [
                "rank-properties",
                "bm25",
                "title",
                "k1",
                "b",
                "bm25",
                "abstract",
                "k1",
                "b"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::multilingual-search/schemas/doc.sd#L73-L75",
        "fields": {
            "title": "multilingual-search/schemas/doc.sd",
            "doc_id": "multilingual-search/schemas/doc.sd",
            "content": "Creates a 'minimal' document summary which only includes the 'doc_id', useful for lightweight retrieval and display purposes.\n```\ndocument-summary minimal {\n  summary doc_id {}\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "multilingual-search/schemas/doc.sd#L73-L75",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/multilingual-search/schemas/doc.sd#L73-L75",
            "namespace": "code-p",
            "start_line": 73,
            "end_line": 75,
            "code": "document-summary minimal {\n  summary doc_id {}\n}",
            "explanation": "Creates a 'minimal' document summary which only includes the 'doc_id', useful for lightweight retrieval and display purposes.",
            "keywords": [
                "document-summary",
                "minimal",
                "summary",
                "doc_id"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L3-L3",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Defines a schema named 'mydoc'. This schema will contain the structure for documents and potentially other configurations related to indexing and retrieval.\n```\nschema mydoc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema mydoc {",
            "explanation": "Defines a schema named 'mydoc'. This schema will contain the structure for documents and potentially other configurations related to indexing and retrieval.",
            "keywords": [
                "schema",
                "mydoc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L4-L4",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Within the schema 'mydoc', a document type also named 'mydoc' is defined. This establishes the document structure that will be indexed and queried.\n```\ndocument mydoc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document mydoc {",
            "explanation": "Within the schema 'mydoc', a document type also named 'mydoc' is defined. This establishes the document structure that will be indexed and queried.",
            "keywords": [
                "document",
                "mydoc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L5-L5",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Declares a field named 'id' of type 'string' within the document 'mydoc'. This field will store string values, typically used as unique identifiers.\n```\nfield id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "field id type string {",
            "explanation": "Declares a field named 'id' of type 'string' within the document 'mydoc'. This field will store string values, typically used as unique identifiers.",
            "keywords": [
                "field",
                "id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L6-L6",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Specifies the indexing policy for the 'id' field, enabling both full-text search ('index') and keeping it available for result summaries ('summary').\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "indexing: index | summary",
            "explanation": "Specifies the indexing policy for the 'id' field, enabling both full-text search ('index') and keeping it available for result summaries ('summary').",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L8-L8",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Declares a field named 'tokens' of type 'tensor<int8>' with dimension 'tokens[10]', used for storing small integer vectors, typically utilized in machine learning or tokenized text.\n```\nfield tokens type tensor<int8>(tokens[10]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field tokens type tensor<int8>(tokens[10]) {",
            "explanation": "Declares a field named 'tokens' of type 'tensor<int8>' with dimension 'tokens[10]', used for storing small integer vectors, typically utilized in machine learning or tokenized text.",
            "keywords": [
                "field",
                "tokens",
                "type",
                "tensor",
                "int8",
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L9-L9",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Specifies the indexing policy for the 'tokens' field, storing it as an attribute for fast access and making it available for summaries.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: attribute | summary",
            "explanation": "Specifies the indexing policy for the 'tokens' field, storing it as an attribute for fast access and making it available for summaries.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L11-L11",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Defines a field named 'embedding' with the type 'tensor<float>' and dimension 'x[16]'. This is often used to store fixed-size vector representations of items, such as embeddings from machine learning models.\n```\nfield embedding type tensor<float>(x[16]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field embedding type tensor<float>(x[16]) {",
            "explanation": "Defines a field named 'embedding' with the type 'tensor<float>' and dimension 'x[16]'. This is often used to store fixed-size vector representations of items, such as embeddings from machine learning models.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L16-L16",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Begins the definition of a 'rank-profile' named 'default', which will contain configurations for ranking documents according to certain criteria during search operations.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "rank-profile default {",
            "explanation": "Begins the definition of a 'rank-profile' named 'default', which will contain configurations for ranking documents according to certain criteria during search operations.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L17-L17",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Defines the input section for the 'default' rank-profile, which will specify expected query inputs used in ranking expressions.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "inputs {",
            "explanation": "Defines the input section for the 'default' rank-profile, which will specify expected query inputs used in ranking expressions.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L18-L18",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Specifies that the rank-profile expects a query input named 'embedding' with type 'tensor<float>' and dimension 'x[16]', matching the field 'embedding'.\n```\nquery(embedding) tensor<float>(x[16])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "query(embedding) tensor<float>(x[16])",
            "explanation": "Specifies that the rank-profile expects a query input named 'embedding' with type 'tensor<float>' and dimension 'x[16]', matching the field 'embedding'.",
            "keywords": [
                "query",
                "embedding",
                "tensor",
                "float",
                "x"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L20-L20",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Begins the definition of the first-phase ranking expression which determines the initial document scoring during searches.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "first-phase {",
            "explanation": "Begins the definition of the first-phase ranking expression which determines the initial document scoring during searches.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::model-inference/src/main/application/schemas/mydoc.sd#L21-L21",
        "fields": {
            "title": "model-inference/src/main/application/schemas/mydoc.sd",
            "doc_id": "model-inference/src/main/application/schemas/mydoc.sd",
            "content": "Defines a ranking expression that calculates the sum of element-wise multiplication between the query embedding and the document's attribute embedding, often used in similarity searches.\n```\nexpression: sum(query(embedding) * attribute(embedding))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "model-inference/src/main/application/schemas/mydoc.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/model-inference/src/main/application/schemas/mydoc.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "expression: sum(query(embedding) * attribute(embedding))",
            "explanation": "Defines a ranking expression that calculates the sum of element-wise multiplication between the query embedding and the document's attribute embedding, often used in similarity searches.",
            "keywords": [
                "expression",
                "sum",
                "query",
                "embedding",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Begins the definition of a Vespa schema named 'doc', which will contain document types and configuration for indexing and ranking.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "schema doc {",
            "explanation": "Begins the definition of a Vespa schema named 'doc', which will contain document types and configuration for indexing and ranking.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a document type 'doc' within the Vespa schema, where fields and attributes are specified for indexing and summary purposes.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "document doc {",
            "explanation": "Defines a document type 'doc' within the Vespa schema, where fields and attributes are specified for indexing and summary purposes.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L8-L8",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a field named 'id' with a data type of 'string', intended for storing document identifiers.\n```\nfield id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field id type string {",
            "explanation": "Defines a field named 'id' with a data type of 'string', intended for storing document identifiers.",
            "keywords": [
                "field",
                "id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L9-L9",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies that the 'id' field should be indexed for inclusion in the summary response when documents are retrieved.\n```\nindexing: summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: summary ",
            "explanation": "Specifies that the 'id' field should be indexed for inclusion in the summary response when documents are retrieved.",
            "keywords": [
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L11-L11",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a field named 'text' as an array of strings, indicating it can hold multiple string values for each document.\n```\nfield text type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field text type array<string> {",
            "explanation": "Defines a field named 'text' as an array of strings, indicating it can hold multiple string values for each document.",
            "keywords": [
                "field",
                "text",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L12-L12",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Configures the 'text' field to be both indexed, meaning it will be searchable, and included in the summary response of queries.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "indexing: index | summary",
            "explanation": "Configures the 'text' field to be both indexed, meaning it will be searchable, and included in the summary response of queries.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L13-L13",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Enables BM25 ranking with default parameters for the indexing of the 'text' field, improving search relevance.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "index: enable-bm25",
            "explanation": "Enables BM25 ranking with default parameters for the indexing of the 'text' field, improving search relevance.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L16-L16",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Creates a fieldset named 'default', which groups fields for certain operations, such as querying multiple fields simultaneously.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "fieldset default {",
            "explanation": "Creates a fieldset named 'default', which groups fields for certain operations, such as querying multiple fields simultaneously.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L17-L17",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies that the 'default' fieldset includes the 'text' field, allowing it to be referenced collectively.\n```\nfields: text\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "fields: text",
            "explanation": "Specifies that the 'default' fieldset includes the 'text' field, allowing it to be referenced collectively.",
            "keywords": [
                "fields",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L20-L20",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a tensor field named 'colbert' of type int8, structured with context, token, and vector dimensions, intended for complex tensor operations.\n```\nfield colbert type tensor<int8>(context{}, token{}, v[16]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "field colbert type tensor<int8>(context{}, token{}, v[16]) {",
            "explanation": "Defines a tensor field named 'colbert' of type int8, structured with context, token, and vector dimensions, intended for complex tensor operations.",
            "keywords": [
                "field",
                "colbert",
                "type",
                "tensor",
                "int8",
                "context",
                "token",
                "v"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L21-L21",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Configures the 'colbert' field for indexing based on input from the 'text' field, embedding with a 'colbert' model in context dimension, and storing as an attribute.\n```\nindexing: input text | embed colbert context | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "indexing: input text | embed colbert context | attribute",
            "explanation": "Configures the 'colbert' field for indexing based on input from the 'text' field, embedding with a 'colbert' model in context dimension, and storing as an attribute.",
            "keywords": [
                "indexing",
                "input",
                "text",
                "embed",
                "colbert",
                "context",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L22-L22",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines the 'colbert' field attribute as 'paged', ensuring efficient memory usage during retrieval operations.\n```\nattribute: paged\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "attribute: paged",
            "explanation": "Defines the 'colbert' field attribute as 'paged', ensuring efficient memory usage during retrieval operations.",
            "keywords": [
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L25-L25",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Creates a ranking profile named 'bm25' to manage how documents are scored during retrieval, utilizing the BM25 ranking algorithm.\n```\nrank-profile bm25 {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L25-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L25-L25",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 25,
            "code": "rank-profile bm25 {",
            "explanation": "Creates a ranking profile named 'bm25' to manage how documents are scored during retrieval, utilizing the BM25 ranking algorithm.",
            "keywords": [
                "rank-profile",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L26-L26",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies a block for 'rank-properties', which allows setting specific parameters for ranking algorithms, such as BM25 properties.\n```\nrank-properties {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L26-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L26-L26",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 26,
            "code": "rank-properties {",
            "explanation": "Specifies a block for 'rank-properties', which allows setting specific parameters for ranking algorithms, such as BM25 properties.",
            "keywords": [
                "rank-properties"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L27-L27",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Sets the BM25 hyperparameter 'k1' to 0.9 for the 'text' field, influencing the term saturation aspect of the BM25 ranking function.\n```\nbm25(text).k1: 0.9\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L27-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L27-L27",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 27,
            "code": "bm25(text).k1: 0.9",
            "explanation": "Sets the BM25 hyperparameter 'k1' to 0.9 for the 'text' field, influencing the term saturation aspect of the BM25 ranking function.",
            "keywords": [
                "bm25",
                "text",
                "k1"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L28-L28",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Adjusts the BM25 hyperparameter 'b' to 0.4 for the 'text' field, controlling the influence of document length normalization on ranking.\n```\nbm25(text).b: 0.4\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "bm25(text).b: 0.4",
            "explanation": "Adjusts the BM25 hyperparameter 'b' to 0.4 for the 'text' field, controlling the influence of document length normalization on ranking.",
            "keywords": [
                "bm25",
                "text",
                "b"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L30-L30",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines the 'first-phase' block of the ranking, used for the initial scoring phase during document retrieval.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L30-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L30-L30",
            "namespace": "code-p",
            "start_line": 30,
            "end_line": 30,
            "code": "first-phase {",
            "explanation": "Defines the 'first-phase' block of the ranking, used for the initial scoring phase during document retrieval.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L31-L31",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies the ranking expression for the first phase as BM25 applied on the 'text' field, determining the initial score assigned to documents.\n```\nexpression: bm25(text)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "expression: bm25(text)",
            "explanation": "Specifies the ranking expression for the first phase as BM25 applied on the 'text' field, determining the initial score assigned to documents.",
            "keywords": [
                "expression",
                "bm25",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L35-L35",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a ranking profile 'colbert-max-sim-context-level' that inherits from the 'bm25' profile, introducing additional ranking logic related to context-specific similarity with ColBERT embeddings.\n```\nrank-profile colbert-max-sim-context-level inherits bm25 {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "rank-profile colbert-max-sim-context-level inherits bm25 {",
            "explanation": "Defines a ranking profile 'colbert-max-sim-context-level' that inherits from the 'bm25' profile, introducing additional ranking logic related to context-specific similarity with ColBERT embeddings.",
            "keywords": [
                "rank-profile",
                "colbert-max-sim-context-level",
                "inherits",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L36-L36",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Starts an 'inputs' block where input features used in ranking functions can be declared, such as tensor inputs for deep learning models.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "inputs {",
            "explanation": "Starts an 'inputs' block where input features used in ranking functions can be declared, such as tensor inputs for deep learning models.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L37-L37",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Declares an input tensor 'query(qt)' with floating-point values, structured to match tokens of queries against 128-dimensional vectors.\n```\nquery(qt) tensor<float>(querytoken{}, v[128])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "query(qt) tensor<float>(querytoken{}, v[128])",
            "explanation": "Declares an input tensor 'query(qt)' with floating-point values, structured to match tokens of queries against 128-dimensional vectors.",
            "keywords": [
                "query",
                "qt",
                "tensor",
                "float",
                "querytoken",
                "v"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L40-L40",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Begins the definition of a custom function 'max_sim_per_context', intended for calculating similarity scores per context within the ranking process.\n```\nfunction max_sim_per_context() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L40-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L40-L40",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 40,
            "code": "function max_sim_per_context() {",
            "explanation": "Begins the definition of a custom function 'max_sim_per_context', intended for calculating similarity scores per context within the ranking process.",
            "keywords": [
                "function",
                "max_sim_per_context"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L41-L41",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Introduces an 'expression' block where mathematical operations are defined to compute the function's output value.\n```\nexpression {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "expression {",
            "explanation": "Introduces an 'expression' block where mathematical operations are defined to compute the function's output value.",
            "keywords": [
                "expression"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L42-L42",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies the use of the 'sum' operation, likely as part of a larger mathematical expression for aggregating data points.\n```\nsum(\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "sum(",
            "explanation": "Specifies the use of the 'sum' operation, likely as part of a larger mathematical expression for aggregating data points.",
            "keywords": [
                "sum"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L43-L43",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Calls the 'reduce' operation, typically used to apply a function (e.g., summation, maximization) across specified dimensions within tensors.\n```\nreduce(\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "reduce(",
            "explanation": "Calls the 'reduce' operation, typically used to apply a function (e.g., summation, maximization) across specified dimensions within tensors.",
            "keywords": [
                "reduce"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L42-L42",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Uses the 'sum' function within nested operations, contributing to a larger calculation or tensor manipulation.\n```\nsum(\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "sum(",
            "explanation": "Uses the 'sum' function within nested operations, contributing to a larger calculation or tensor manipulation.",
            "keywords": [
                "sum"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L45-L45",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies a multiplication operation between the 'query(qt)' tensor and unpacked bits of the 'colbert' attribute, along dimension 'v'.\n```\nquery(qt) * unpack_bits(attribute(colbert)) , v\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L45-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L45-L45",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 45,
            "code": "query(qt) * unpack_bits(attribute(colbert)) , v",
            "explanation": "Specifies a multiplication operation between the 'query(qt)' tensor and unpacked bits of the 'colbert' attribute, along dimension 'v'.",
            "keywords": [
                "query",
                "qt",
                "unpack_bits",
                "attribute",
                "colbert",
                "v"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L47-L47",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Indicates the reduction over the 'token' dimension using the 'max' function to find the maximum value.\n```\nmax, token\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L47-L47",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L47-L47",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 47,
            "code": "max, token",
            "explanation": "Indicates the reduction over the 'token' dimension using the 'max' function to find the maximum value.",
            "keywords": [
                "max",
                "token"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L49-L49",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Refers to the dimension 'querytoken' in tensor operations, used to iterate or reduce over query tokens.\n```\nquerytoken\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "querytoken",
            "explanation": "Refers to the dimension 'querytoken' in tensor operations, used to iterate or reduce over query tokens.",
            "keywords": [
                "querytoken"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L53-L53",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Specifies the 'second-phase' block, which contains ranking configurations executed after the initial phase for further refinement of document scores.\n```\nsecond-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L53-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L53-L53",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 53,
            "code": "second-phase {",
            "explanation": "Specifies the 'second-phase' block, which contains ranking configurations executed after the initial phase for further refinement of document scores.",
            "keywords": [
                "second-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L54-L54",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Sets a limit for the number of top documents (400 in this case) to perform second-phase reranking on, optimizing performance and resource use.\n```\nrerank-count: 400\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L54-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L54-L54",
            "namespace": "code-p",
            "start_line": 54,
            "end_line": 54,
            "code": "rerank-count: 400 ",
            "explanation": "Sets a limit for the number of top documents (400 in this case) to perform second-phase reranking on, optimizing performance and resource use.",
            "keywords": [
                "rerank-count"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L55-L55",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Defines a second-phase ranking expression that reduces over 'context' to find the maximum similarity score per context using the 'max_sim_per_context' function.\n```\nexpression: reduce(max_sim_per_context, max, context)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L55-L55",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L55-L55",
            "namespace": "code-p",
            "start_line": 55,
            "end_line": 55,
            "code": "expression: reduce(max_sim_per_context, max, context)",
            "explanation": "Defines a second-phase ranking expression that reduces over 'context' to find the maximum similarity score per context using the 'max_sim_per_context' function.",
            "keywords": [
                "expression",
                "reduce",
                "max_sim_per_context",
                "max",
                "context"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L59-L59",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Creates a ranking profile 'colbert-max-sim-cross-context', which extends the 'bm25' profile to handle cross-context similarity calculations using ColBERT embeddings.\n```\nrank-profile colbert-max-sim-cross-context inherits bm25 {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L59-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L59-L59",
            "namespace": "code-p",
            "start_line": 59,
            "end_line": 59,
            "code": "rank-profile colbert-max-sim-cross-context inherits bm25 {",
            "explanation": "Creates a ranking profile 'colbert-max-sim-cross-context', which extends the 'bm25' profile to handle cross-context similarity calculations using ColBERT embeddings.",
            "keywords": [
                "rank-profile",
                "colbert-max-sim-cross-context",
                "inherits",
                "bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L64-L64",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Starts the definition of a custom ranking function 'cross_max_sim' to compute similarity scores across different contexts in the documents.\n```\nfunction cross_max_sim() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L64-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L64-L64",
            "namespace": "code-p",
            "start_line": 64,
            "end_line": 64,
            "code": "function cross_max_sim() {",
            "explanation": "Starts the definition of a custom ranking function 'cross_max_sim' to compute similarity scores across different contexts in the documents.",
            "keywords": [
                "function",
                "cross_max_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::colbert-long/schemas/doc.sd#L79-L79",
        "fields": {
            "title": "colbert-long/schemas/doc.sd",
            "doc_id": "colbert-long/schemas/doc.sd",
            "content": "Uses the 'cross_max_sim' function as the expression for the second-phase ranking, which is executed to rank documents based on cross-context similarities.\n```\nexpression: cross_max_sim\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "colbert-long/schemas/doc.sd#L79-L79",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/colbert-long/schemas/doc.sd#L79-L79",
            "namespace": "code-p",
            "start_line": 79,
            "end_line": 79,
            "code": "expression: cross_max_sim",
            "explanation": "Uses the 'cross_max_sim' function as the expression for the second-phase ranking, which is executed to rank documents based on cross-context similarities.",
            "keywords": [
                "expression",
                "cross_max_sim"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L3-L3",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Begins the definition of a schema named 'image_search' for the Vespa application, encapsulating document structure and ranking behavior for images.\n```\nschema image_search {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema image_search {",
            "explanation": "Begins the definition of a schema named 'image_search' for the Vespa application, encapsulating document structure and ranking behavior for images.",
            "keywords": [
                "schema",
                "image_search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L4-L4",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Defines a document type named 'image_search', which will include fields and indexing configurations for storing image-related data.\n```\ndocument image_search {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document image_search {",
            "explanation": "Defines a document type named 'image_search', which will include fields and indexing configurations for storing image-related data.",
            "keywords": [
                "document",
                "image_search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L5-L5",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Declares a field called 'image_file_name' with the type 'string', used to store the filename of an image.\n```\nfield image_file_name type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "field image_file_name type string {",
            "explanation": "Declares a field called 'image_file_name' with the type 'string', used to store the filename of an image.",
            "keywords": [
                "field",
                "image_file_name",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L6-L6",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Specifies that the 'image_file_name' field should be stored both as an attribute and in a summary for retrieval purposes in the schema.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "indexing: attribute | summary",
            "explanation": "Specifies that the 'image_file_name' field should be stored both as an attribute and in a summary for retrieval purposes in the schema.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L8-L8",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Defines a field named 'vit_b_32_image' with a data type of a 512-dimensional tensor of floats to store extracted image features.\n```\nfield vit_b_32_image type tensor<float>(x[512]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field vit_b_32_image type tensor<float>(x[512]) {",
            "explanation": "Defines a field named 'vit_b_32_image' with a data type of a 512-dimensional tensor of floats to store extracted image features.",
            "keywords": [
                "field",
                "vit_b_32_image",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L9-L9",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Indicates that the 'vit_b_32_image' tensor field should be indexed both as an attribute for fast access and as an index for efficient searching.\n```\nindexing: attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: attribute | index",
            "explanation": "Indicates that the 'vit_b_32_image' tensor field should be indexed both as an attribute for fast access and as an index for efficient searching.",
            "keywords": [
                "indexing",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L10-L10",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Opens a block to specify configurations for the 'vit_b_32_image' field when it is indexed as an attribute.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "attribute {",
            "explanation": "Opens a block to specify configurations for the 'vit_b_32_image' field when it is indexed as an attribute.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L11-L11",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Sets the distance metric to 'euclidean' for the similarity search on the 'vit_b_32_image' field to measure the distance between vectors.\n```\ndistance-metric: euclidean\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "distance-metric: euclidean",
            "explanation": "Sets the distance metric to 'euclidean' for the similarity search on the 'vit_b_32_image' field to measure the distance between vectors.",
            "keywords": [
                "distance-metric",
                "euclidean"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L13-L13",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Begins a block to configure the indexing settings for the 'vit_b_32_image' field in the Vespa application.\n```\nindex {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "index {",
            "explanation": "Begins a block to configure the indexing settings for the 'vit_b_32_image' field in the Vespa application.",
            "keywords": [
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L14-L14",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Specifies the use of Hierarchical Navigable Small World (HNSW) algorithm for approximate nearest neighbor search on the 'vit_b_32_image' tensor field.\n```\nhnsw {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "hnsw {",
            "explanation": "Specifies the use of Hierarchical Navigable Small World (HNSW) algorithm for approximate nearest neighbor search on the 'vit_b_32_image' tensor field.",
            "keywords": [
                "hnsw"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L15-L15",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Configures HNSW index to have a maximum of 16 links per node, balancing search performance and index size.\n```\nmax-links-per-node: 16\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "max-links-per-node: 16",
            "explanation": "Configures HNSW index to have a maximum of 16 links per node, balancing search performance and index size.",
            "keywords": [
                "max-links-per-node",
                "16"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L16-L16",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "During insertion, configures the HNSW index to explore 200 neighbors, affecting accuracy and build time of the index.\n```\nneighbors-to-explore-at-insert: 200\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "neighbors-to-explore-at-insert: 200",
            "explanation": "During insertion, configures the HNSW index to explore 200 neighbors, affecting accuracy and build time of the index.",
            "keywords": [
                "neighbors-to-explore-at-insert",
                "200"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L22-L22",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Creates a rank profile named 'vit_b_32_similarity' that inherits from the default ranking profile, used to rank search results based on similarity.\n```\nrank-profile vit_b_32_similarity inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "rank-profile vit_b_32_similarity inherits default {",
            "explanation": "Creates a rank profile named 'vit_b_32_similarity' that inherits from the default ranking profile, used to rank search results based on similarity.",
            "keywords": [
                "rank-profile",
                "vit_b_32_similarity",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L23-L23",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Starts defining input parameters for the 'vit_b_32_similarity' rank profile.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "inputs {",
            "explanation": "Starts defining input parameters for the 'vit_b_32_similarity' rank profile.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L24-L24",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Defines an input query parameter 'vit_b_32_text' as a tensor with 512 float dimensions, representing a text query vector for similarity matching.\n```\nquery(vit_b_32_text) tensor<float>(x[512])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "query(vit_b_32_text) tensor<float>(x[512])",
            "explanation": "Defines an input query parameter 'vit_b_32_text' as a tensor with 512 float dimensions, representing a text query vector for similarity matching.",
            "keywords": [
                "query",
                "vit_b_32_text",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L27-L27",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Opens the block for the first-phase ranking function within the ranking expression, determining initial rankings of documents.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L27-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L27-L27",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 27,
            "code": "first-phase {",
            "explanation": "Opens the block for the first-phase ranking function within the ranking expression, determining initial rankings of documents.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::text-image-search/src/main/application/schemas/image_search.sd#L28-L28",
        "fields": {
            "title": "text-image-search/src/main/application/schemas/image_search.sd",
            "doc_id": "text-image-search/src/main/application/schemas/image_search.sd",
            "content": "Uses a proximity-based ranking function, 'closeness', to determine relevance by comparing the query input tensor to 'vit_b_32_image'.\n```\nexpression: closeness(vit_b_32_image)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "text-image-search/src/main/application/schemas/image_search.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/text-image-search/src/main/application/schemas/image_search.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "expression: closeness(vit_b_32_image)",
            "explanation": "Uses a proximity-based ranking function, 'closeness', to determine relevance by comparing the query input tensor to 'vit_b_32_image'.",
            "keywords": [
                "expression",
                "closeness",
                "vit_b_32_image"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L3-L4",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Declares a schema named 'msmarco' that contains a document of the same name. This sets up the framework for defining fields and additional properties that describe how the document will be indexed and searched.\n```\nschema msmarco {\n    document msmarco {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L3-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L3-L4",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 4,
            "code": "schema msmarco {\n    document msmarco {",
            "explanation": "Declares a schema named 'msmarco' that contains a document of the same name. This sets up the framework for defining fields and additional properties that describe how the document will be indexed and searched.",
            "keywords": [
                "schema",
                "msmarco",
                "document",
                "msmarco"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L6-L8",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a field named 'id' of type 'string', specifying that it will be indexed as both a summary and an attribute. This allows the id to be retrievable in search results.\n```\nfield id type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L6-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L6-L8",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 8,
            "code": "field id type string {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named 'id' of type 'string', specifying that it will be indexed as both a summary and an attribute. This allows the id to be retrievable in search results.",
            "keywords": [
                "field",
                "id",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L10-L13",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a field named 'title' of type 'string' where indexing includes both index and summary modes. Additionally, BM25 ranking is enabled to improve search relevance for indexed titles.\n```\nfield title type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L10-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L10-L13",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 13,
            "code": "field title type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a field named 'title' of type 'string' where indexing includes both index and summary modes. Additionally, BM25 ranking is enabled to improve search relevance for indexed titles.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L15-L17",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Specifies a 'url' field of string type with indexing for both index and summary enabled. This setup allows the URLs to be searchable and included in the summary of the search results.\n```\nfield url type string {\n    indexing: index | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field url type string {\n    indexing: index | summary\n}",
            "explanation": "Specifies a 'url' field of string type with indexing for both index and summary enabled. This setup allows the URLs to be searchable and included in the summary of the search results.",
            "keywords": [
                "field",
                "url",
                "type",
                "string",
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L19-L22",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a 'body' field of type string with indexing as both index and summary, and enables BM25 ranking. This improves full-text search relevance for body content in the document.\n```\nfield body type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L19-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L19-L22",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 22,
            "code": "field body type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a 'body' field of type string with indexing as both index and summary, and enables BM25 ranking. This improves full-text search relevance for body content in the document.",
            "keywords": [
                "field",
                "body",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L25-L27",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a 'tokens' field as a tensor of type float with dimension size 128. It combines 'title' and 'body' inputs, processes through a tokenizer for embedding, and saves the result as an attribute for efficient retrieval.\n```\nfield tokens type tensor<float>(d0[128]) {\n    indexing: (input title || \"\") . \" \" . (input body || \"\") | embed tokenizer | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L25-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L25-L27",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 27,
            "code": "field tokens type tensor<float>(d0[128]) {\n    indexing: (input title || \"\") . \" \" . (input body || \"\") | embed tokenizer | attribute\n}",
            "explanation": "Defines a 'tokens' field as a tensor of type float with dimension size 128. It combines 'title' and 'body' inputs, processes through a tokenizer for embedding, and saves the result as an attribute for efficient retrieval.",
            "keywords": [
                "field",
                "tokens",
                "type",
                "tensor",
                "float",
                "indexing",
                "input",
                "title",
                "input",
                "body",
                "embed",
                "tokenizer",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L29-L31",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a field set named 'default' that includes the 'title' and 'body' fields. This can be used as a shortcut to refer to these fields collectively in search configurations.\n```\nfieldset default {\n    fields: title, body\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L29-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L29-L31",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 31,
            "code": "fieldset default {\n    fields: title, body\n}",
            "explanation": "Defines a field set named 'default' that includes the 'title' and 'body' fields. This can be used as a shortcut to refer to these fields collectively in search configurations.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L33-L38",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Loads an ONNX model named 'cross_encoder' from a specified file path. It also declares input parameters used by the model, such as 'input_ids', 'attention_mask', and 'token_type_ids'.\n```\nonnx-model cross_encoder {\n    file: files/ranking_model.onnx\n    input input_ids: input_ids\n    input attention_mask: attention_mask\n    input token_type_ids: token_type_ids\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L33-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L33-L38",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 38,
            "code": "onnx-model cross_encoder {\n    file: files/ranking_model.onnx\n    input input_ids: input_ids\n    input attention_mask: attention_mask\n    input token_type_ids: token_type_ids\n}",
            "explanation": "Loads an ONNX model named 'cross_encoder' from a specified file path. It also declares input parameters used by the model, such as 'input_ids', 'attention_mask', and 'token_type_ids'.",
            "keywords": [
                "onnx-model",
                "cross_encoder",
                "file",
                "files/ranking_model.onnx",
                "input",
                "input_ids",
                "attention_mask",
                "token_type_ids"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L40-L44",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a ranking profile named 'bm25' that uses a specific first-phase ranking expression, combining the BM25 scores of the 'title' and 'body' fields to compute relevance.\n```\nrank-profile bm25 {\n    first-phase {\n        expression: bm25(title) + bm25(body)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L40-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L40-L44",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 44,
            "code": "rank-profile bm25 {\n    first-phase {\n        expression: bm25(title) + bm25(body)\n    }\n}",
            "explanation": "Defines a ranking profile named 'bm25' that uses a specific first-phase ranking expression, combining the BM25 scores of the 'title' and 'body' fields to compute relevance.",
            "keywords": [
                "rank-profile",
                "bm25",
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L46-L46",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Creates a 'transformer' ranking profile that inherits settings from a 'default' profile. Inheritance allows reusing configuration from the base profile, extending it with additional settings.\n```\nrank-profile transformer inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L46-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L46-L46",
            "namespace": "code-p",
            "start_line": 46,
            "end_line": 46,
            "code": "rank-profile transformer inherits default {",
            "explanation": "Creates a 'transformer' ranking profile that inherits settings from a 'default' profile. Inheritance allows reusing configuration from the base profile, extending it with additional settings.",
            "keywords": [
                "rank-profile",
                "transformer",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L48-L50",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Specifies input named 'q' as a tensor of float type with a dimension size of 32. This input is used for processing and ranking in the transformer model.\n```\ninputs {\n    query(q) tensor<float>(d0[32])\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L48-L50",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L48-L50",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 50,
            "code": "inputs {\n    query(q) tensor<float>(d0[32])\n}",
            "explanation": "Specifies input named 'q' as a tensor of float type with a dimension size of 32. This input is used for processing and ranking in the transformer model.",
            "keywords": [
                "inputs",
                "query",
                "q",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L52-L54",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a function 'input_ids' that computes token input IDs using a function 'tokenInputIds'. It operates on a query tensor 'q' and 'tokens' attribute with a maximum size of 128.\n```\nfunction input_ids() {\n    expression: tokenInputIds(128, query(q), attribute(tokens))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L52-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L52-L54",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 54,
            "code": "function input_ids() {\n    expression: tokenInputIds(128, query(q), attribute(tokens))\n}",
            "explanation": "Defines a function 'input_ids' that computes token input IDs using a function 'tokenInputIds'. It operates on a query tensor 'q' and 'tokens' attribute with a maximum size of 128.",
            "keywords": [
                "function",
                "input_ids",
                "expression",
                "tokenInputIds",
                "query",
                "q",
                "attribute",
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L56-L58",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Creates a function called 'token_type_ids' to generate token type identifiers for input. It leverages 'tokenTypeIds' function using query tensor 'q' and accesses the 'tokens' attribute, with a limit of 128 tokens.\n```\nfunction token_type_ids() {\n    expression: tokenTypeIds(128, query(q), attribute(tokens))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L56-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L56-L58",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 58,
            "code": "function token_type_ids() {\n    expression: tokenTypeIds(128, query(q), attribute(tokens))\n}",
            "explanation": "Creates a function called 'token_type_ids' to generate token type identifiers for input. It leverages 'tokenTypeIds' function using query tensor 'q' and accesses the 'tokens' attribute, with a limit of 128 tokens.",
            "keywords": [
                "function",
                "token_type_ids",
                "expression",
                "tokenTypeIds",
                "query",
                "q",
                "attribute",
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L60-L62",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Introduces a function 'attention_mask' which builds an attention mask for the model using 'tokenAttentionMask'. It operates on query 'q' and token attributes, limited to 128 tokens.\n```\nfunction attention_mask() {\n    expression: tokenAttentionMask(128, query(q), attribute(tokens))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L60-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L60-L62",
            "namespace": "code-p",
            "start_line": 60,
            "end_line": 62,
            "code": "function attention_mask() {\n    expression: tokenAttentionMask(128, query(q), attribute(tokens))\n}",
            "explanation": "Introduces a function 'attention_mask' which builds an attention mask for the model using 'tokenAttentionMask'. It operates on query 'q' and token attributes, limited to 128 tokens.",
            "keywords": [
                "function",
                "attention_mask",
                "expression",
                "tokenAttentionMask",
                "query",
                "q",
                "attribute",
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L41-L43",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Details the first-phase ranking strategy for the 'transformer' profile, combining BM25 scores from 'title' and 'body' to calculate document relevance.\n```\nfirst-phase {\n    expression: bm25(title) + bm25(body)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L41-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L41-L43",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 43,
            "code": "first-phase {\n    expression: bm25(title) + bm25(body)\n}",
            "explanation": "Details the first-phase ranking strategy for the 'transformer' profile, combining BM25 scores from 'title' and 'body' to calculate document relevance.",
            "keywords": [
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::transformers/application/schemas/msmarco.sd#L70-L73",
        "fields": {
            "title": "transformers/application/schemas/msmarco.sd",
            "doc_id": "transformers/application/schemas/msmarco.sd",
            "content": "Defines a global-phase ranking with re-ranking count set to 10, employing an ONNX model 'cross_encoder'. It focuses on specific tensor dimensions in the model's result for reranking.\n```\nglobal-phase {\n    rerank-count: 10\n    expression: onnx(cross_encoder){d0:0,d1:0}\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "transformers/application/schemas/msmarco.sd#L70-L73",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/transformers/application/schemas/msmarco.sd#L70-L73",
            "namespace": "code-p",
            "start_line": 70,
            "end_line": 73,
            "code": "global-phase {\n    rerank-count: 10\n    expression: onnx(cross_encoder){d0:0,d1:0}\n}",
            "explanation": "Defines a global-phase ranking with re-ranking count set to 10, employing an ONNX model 'cross_encoder'. It focuses on specific tensor dimensions in the model's result for reranking.",
            "keywords": [
                "global-phase",
                "rerank-count",
                "expression",
                "onnx",
                "cross_encoder"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-1-getting-started/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-1-getting-started/schemas/news.sd",
            "doc_id": "news/app-1-getting-started/schemas/news.sd",
            "content": "Defines a new Vespa schema called 'news'. A schema in Vespa encapsulates all the definitions needed for a specific type of documents and their processing.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-1-getting-started/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-1-getting-started/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "Defines a new Vespa schema called 'news'. A schema in Vespa encapsulates all the definitions needed for a specific type of documents and their processing.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-1-getting-started/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-1-getting-started/schemas/news.sd",
            "doc_id": "news/app-1-getting-started/schemas/news.sd",
            "content": "Declares a document type called 'news' within the 'news' schema. Document types define the structure and data representation of the documents indexed and retrieved by Vespa.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-1-getting-started/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-1-getting-started/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "Declares a document type called 'news' within the 'news' schema. Document types define the structure and data representation of the documents indexed and retrieved by Vespa.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-1-getting-started/schemas/news.sd#L6-L6",
        "fields": {
            "title": "news/app-1-getting-started/schemas/news.sd",
            "doc_id": "news/app-1-getting-started/schemas/news.sd",
            "content": "Defines a field named 'title' of type 'string' in the 'news' document. Fields represent individual pieces of data within a document.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-1-getting-started/schemas/news.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-1-getting-started/schemas/news.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field title type string {",
            "explanation": "Defines a field named 'title' of type 'string' in the 'news' document. Fields represent individual pieces of data within a document.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-1-getting-started/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-1-getting-started/schemas/news.sd",
            "doc_id": "news/app-1-getting-started/schemas/news.sd",
            "content": "Specifies that the 'title' field will be both indexed and stored for summary in Vespa. Indexing allows searching by this field, and summary allows retrieval in search results.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-1-getting-started/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-1-getting-started/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: index | summary",
            "explanation": "Specifies that the 'title' field will be both indexed and stored for summary in Vespa. Indexing allows searching by this field, and summary allows retrieval in search results.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-1-getting-started/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-1-getting-started/schemas/news.sd",
            "doc_id": "news/app-1-getting-started/schemas/news.sd",
            "content": "Enables BM25 ranking for the 'title' field, which is a probabilistic framework used for document retrieval improvements within indexed fields.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-1-getting-started/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-1-getting-started/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "index: enable-bm25",
            "explanation": "Enables BM25 ranking for the 'title' field, which is a probabilistic framework used for document retrieval improvements within indexed fields.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L3-L3",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Begins the definition of a schema named 'user' in a Vespa application. This encapsulates documents and fields for the application that pertains to users.\n```\nschema user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema user {",
            "explanation": "Begins the definition of a schema named 'user' in a Vespa application. This encapsulates documents and fields for the application that pertains to users.",
            "keywords": [
                "schema",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L4-L4",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Starts the definition of a document type named 'user' within the schema. Documents of this type represent user entities with specified fields and configurations.\n```\ndocument user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document user {",
            "explanation": "Starts the definition of a document type named 'user' within the schema. Documents of this type represent user entities with specified fields and configurations.",
            "keywords": [
                "document",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L6-L6",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Defines a field 'user_id' of type 'string' for the 'user' document. This field is intended to store a string value that uniquely identifies a user.\n```\nfield user_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field user_id type string {",
            "explanation": "Defines a field 'user_id' of type 'string' for the 'user' document. This field is intended to store a string value that uniquely identifies a user.",
            "keywords": [
                "field",
                "user_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Specifies that the 'user_id' field should be indexed under both 'summary' and 'attribute' categories. This enables its use in result summaries and attribute search operations.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Specifies that the 'user_id' field should be indexed under both 'summary' and 'attribute' categories. This enables its use in result summaries and attribute search operations.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L8-L8",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Configures the 'user_id' field with the 'fast-search' attribute setting, enhancing its search performance by optimizing attribute lookups.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "Configures the 'user_id' field with the 'fast-search' attribute setting, enhancing its search performance by optimizing attribute lookups.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L11-L11",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Introduces a field 'embedding' with a type 'tensor<float>(d0[50])'. This field is designed to store a 50-dimensional tensor of floats, likely used for machine learning embeddings.\n```\nfield embedding type tensor<float>(d0[50]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field embedding type tensor<float>(d0[50]) {",
            "explanation": "Introduces a field 'embedding' with a type 'tensor<float>(d0[50])'. This field is designed to store a 50-dimensional tensor of floats, likely used for machine learning embeddings.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Sets the indexing behavior for the 'embedding' field to be included in both 'summary' and 'attribute', making it accessible for retrieval and search operations.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Sets the indexing behavior for the 'embedding' field to be included in both 'summary' and 'attribute', making it accessible for retrieval and search operations.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L15-L15",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Specifies a field 'has_read_items' which is an array of 'string' type. This field likely stores a list of item identifiers that a user has read.\n```\nfield has_read_items type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "field has_read_items type array<string> {",
            "explanation": "Specifies a field 'has_read_items' which is an array of 'string' type. This field likely stores a list of item identifiers that a user has read.",
            "keywords": [
                "field",
                "has_read_items",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-5-recommendation/schemas/user.sd",
            "doc_id": "news/app-5-recommendation/schemas/user.sd",
            "content": "Assigns the 'has_read_items' field to the 'summary' and 'attribute' indexing categories, allowing both summary retrieval and attribute-based queries.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Assigns the 'has_read_items' field to the 'summary' and 'attribute' indexing categories, allowing both summary retrieval and attribute-based queries.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a schema named 'news' for a Vespa application, which will contain configurations for documents to be indexed and queried.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "Defines a schema named 'news' for a Vespa application, which will contain configurations for documents to be indexed and queried.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Begins the definition of a document type named 'news', which is a primary entity within the 'news' schema to hold data fields.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "Begins the definition of a document type named 'news', which is a primary entity within the 'news' schema to hold data fields.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L6-L9",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'news_id' field of type 'string'. This field is indexed with options 'summary' and 'attribute' and has fast search capabilities enabled through 'attribute: fast-search'.\n```\nfield news_id type string {\n    indexing: summary | attribute\n    attribute: fast-search\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L6-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L6-L9",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 9,
            "code": "field news_id type string {\n    indexing: summary | attribute\n    attribute: fast-search\n}",
            "explanation": "Defines a 'news_id' field of type 'string'. This field is indexed with options 'summary' and 'attribute' and has fast search capabilities enabled through 'attribute: fast-search'.",
            "keywords": [
                "field",
                "news_id",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L10-L12",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'category' field of type 'string', indexed for both 'summary' and 'attribute', suitable for filtering and display purposes.\n```\nfield category type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L10-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L10-L12",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 12,
            "code": "field category type string {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'category' field of type 'string', indexed for both 'summary' and 'attribute', suitable for filtering and display purposes.",
            "keywords": [
                "field",
                "category",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L13-L15",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'subcategory' field, similar to 'category', holding string data and indexed for 'summary' and 'attribute'.\n```\nfield subcategory type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L13-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L13-L15",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 15,
            "code": "field subcategory type string {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'subcategory' field, similar to 'category', holding string data and indexed for 'summary' and 'attribute'.",
            "keywords": [
                "field",
                "subcategory",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L16-L19",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'title' field of type 'string', enabling both index and summary indexing, with BM25 ranking function available via 'index: enable-bm25'.\n```\nfield title type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L16-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L16-L19",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 19,
            "code": "field title type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a 'title' field of type 'string', enabling both index and summary indexing, with BM25 ranking function available via 'index: enable-bm25'.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L20-L23",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines an 'abstract' field, facilitating text search with BM25 ranking by indexing it for both index and summary.\n```\nfield abstract type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L20-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L20-L23",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 23,
            "code": "field abstract type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines an 'abstract' field, facilitating text search with BM25 ranking by indexing it for both index and summary.",
            "keywords": [
                "field",
                "abstract",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L24-L27",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'body' field, also indexed for complex search operations using BM25 on both index and summary indices.\n```\nfield body type string {\n    indexing: index | summary\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L24-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L24-L27",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 27,
            "code": "field body type string {\n    indexing: index | summary\n    index: enable-bm25\n}",
            "explanation": "Defines a 'body' field, also indexed for complex search operations using BM25 on both index and summary indices.",
            "keywords": [
                "field",
                "body",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L28-L30",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'url' field for string data to be indexed in both the index and the summary, but without BM25 functionality.\n```\nfield url type string {\n    indexing: index | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L28-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L28-L30",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 30,
            "code": "field url type string {\n    indexing: index | summary\n}",
            "explanation": "Defines a 'url' field for string data to be indexed in both the index and the summary, but without BM25 functionality.",
            "keywords": [
                "field",
                "url",
                "type",
                "string",
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L31-L34",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'date' field of type 'int', indexed for summary and attribute with fast search enabled to enhance retrieval speed.\n```\nfield date type int {\n    indexing: summary | attribute\n    attribute: fast-search\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L31-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L31-L34",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 34,
            "code": "field date type int {\n    indexing: summary | attribute\n    attribute: fast-search\n}",
            "explanation": "Defines a 'date' field of type 'int', indexed for summary and attribute with fast search enabled to enhance retrieval speed.",
            "keywords": [
                "field",
                "date",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L35-L37",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a 'clicks' field, where integer values are indexed for both summary and attribute, typically used for tracking access counts.\n```\nfield clicks type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L35-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L35-L37",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 37,
            "code": "field clicks type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'clicks' field, where integer values are indexed for both summary and attribute, typically used for tracking access counts.",
            "keywords": [
                "field",
                "clicks",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L38-L40",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines an 'impressions' field to store integer data, indexed similarly to 'clicks' for use in metrics or analytics.\n```\nfield impressions type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L38-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L38-L40",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 40,
            "code": "field impressions type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines an 'impressions' field to store integer data, indexed similarly to 'clicks' for use in metrics or analytics.",
            "keywords": [
                "field",
                "impressions",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L41-L46",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines an 'embedding' field, a tensor of dimension 50, indexed as both attribute and index. It uses 'dotproduct' as a distance metric, typically for machine learning model outputs.\n```\nfield embedding type tensor<float>(d0[50]) {\n    indexing: attribute | index\n    attribute {\n        distance-metric: dotproduct\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L41-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L41-L46",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 46,
            "code": "field embedding type tensor<float>(d0[50]) {\n    indexing: attribute | index\n    attribute {\n        distance-metric: dotproduct\n    }\n}",
            "explanation": "Defines an 'embedding' field, a tensor of dimension 50, indexed as both attribute and index. It uses 'dotproduct' as a distance metric, typically for machine learning model outputs.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "d0",
                "indexing",
                "attribute",
                "index",
                "attribute",
                "distance-metric",
                "dotproduct"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L49-L51",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a fieldset named 'default' that groups the fields 'title', 'abstract', and 'body', allowing for combined operations on these text fields.\n```\nfieldset default {\n    fields: title, abstract, body\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L49-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L49-L51",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 51,
            "code": "fieldset default {\n    fields: title, abstract, body\n}",
            "explanation": "Defines a fieldset named 'default' that groups the fields 'title', 'abstract', and 'body', allowing for combined operations on these text fields.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "abstract",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L53-L53",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a ranking profile named 'popularity' that inherits settings from the 'default' profile, used for specializing ranking functions.\n```\nrank-profile popularity inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L53-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L53-L53",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 53,
            "code": "rank-profile popularity inherits default {",
            "explanation": "Defines a ranking profile named 'popularity' that inherits settings from the 'default' profile, used for specializing ranking functions.",
            "keywords": [
                "rank-profile",
                "popularity",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L54-L56",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a function named 'popularity' that calculates a popularity score by dividing clicks by impressions if impressions are greater than zero, otherwise returns zero.\n```\nfunction popularity() {\n    expression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L54-L56",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L54-L56",
            "namespace": "code-p",
            "start_line": 54,
            "end_line": 56,
            "code": "function popularity() {\n    expression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)\n}",
            "explanation": "Defines a function named 'popularity' that calculates a popularity score by dividing clicks by impressions if impressions are greater than zero, otherwise returns zero.",
            "keywords": [
                "function",
                "popularity",
                "expression",
                "if",
                "attribute",
                "impressions",
                "attribute",
                "clicks",
                "attribute",
                "impressions"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L57-L59",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Specifies the first-phase ranking expression for the 'popularity' profile, combining the native rank and a scaled popularity score for ranking documents.\n```\nfirst-phase {\n    expression: nativeRank + 100 * popularity\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L57-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L57-L59",
            "namespace": "code-p",
            "start_line": 57,
            "end_line": 59,
            "code": "first-phase {\n    expression: nativeRank + 100 * popularity\n}",
            "explanation": "Specifies the first-phase ranking expression for the 'popularity' profile, combining the native rank and a scaled popularity score for ranking documents.",
            "keywords": [
                "first-phase",
                "expression",
                "nativeRank",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L62-L62",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Defines a ranking profile 'recommendation', inheriting from 'default', likely designed for personalized content suggestions or recommendations.\n```\nrank-profile recommendation inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L62-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L62-L62",
            "namespace": "code-p",
            "start_line": 62,
            "end_line": 62,
            "code": "rank-profile recommendation inherits default {",
            "explanation": "Defines a ranking profile 'recommendation', inheriting from 'default', likely designed for personalized content suggestions or recommendations.",
            "keywords": [
                "rank-profile",
                "recommendation",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-5-recommendation/schemas/news.sd#L63-L65",
        "fields": {
            "title": "news/app-5-recommendation/schemas/news.sd",
            "doc_id": "news/app-5-recommendation/schemas/news.sd",
            "content": "Specifies the first-phase ranking logic for 'recommendation', calculating closeness between document fields and the 'embedding', suitable for similarity-based retrieval.\n```\nfirst-phase {\n    expression: closeness(field, embedding)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-5-recommendation/schemas/news.sd#L63-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-5-recommendation/schemas/news.sd#L63-L65",
            "namespace": "code-p",
            "start_line": 63,
            "end_line": 65,
            "code": "first-phase {\n    expression: closeness(field, embedding)\n}",
            "explanation": "Specifies the first-phase ranking logic for 'recommendation', calculating closeness between document fields and the 'embedding', suitable for similarity-based retrieval.",
            "keywords": [
                "first-phase",
                "expression",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L3-L3",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Defines a schema named 'user', which will outline the structure and constraints for documents of type 'user'.\n```\nschema user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema user {",
            "explanation": "Defines a schema named 'user', which will outline the structure and constraints for documents of type 'user'.",
            "keywords": [
                "schema",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L4-L4",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Starts the definition of a document type named 'user', which will contain fields specific to this document within the schema.\n```\ndocument user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document user {",
            "explanation": "Starts the definition of a document type named 'user', which will contain fields specific to this document within the schema.",
            "keywords": [
                "document",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L6-L6",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Declares a field named 'user_id' of type 'string' for the 'user' document, used for storing user identifiers as textual data.\n```\nfield user_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field user_id type string {",
            "explanation": "Declares a field named 'user_id' of type 'string' for the 'user' document, used for storing user identifiers as textual data.",
            "keywords": [
                "field",
                "user_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Specifies that the 'user_id' field will be included in both the summary and attribute indexes, making it retrievable and searchable.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Specifies that the 'user_id' field will be included in both the summary and attribute indexes, making it retrievable and searchable.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L8-L8",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Ensures that the 'user_id' field supports fast search queries, optimizing retrieval speed.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "Ensures that the 'user_id' field supports fast search queries, optimizing retrieval speed.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L11-L11",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Defines a field named 'embedding' with a tensor type of dimension 50, used to store numerical representations in the form of float values.\n```\nfield embedding type tensor<float>(d0[50]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field embedding type tensor<float>(d0[50]) {",
            "explanation": "Defines a field named 'embedding' with a tensor type of dimension 50, used to store numerical representations in the form of float values.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "d0"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Indicates that the 'embedding' field will be both summarized for retrieval and stored as an attribute for searching.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Indicates that the 'embedding' field will be both summarized for retrieval and stored as an attribute for searching.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L15-L15",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Specifies a field named 'has_read_items' storing an array of strings, which can hold multiple string values for user read items.\n```\nfield has_read_items type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "field has_read_items type array<string> {",
            "explanation": "Specifies a field named 'has_read_items' storing an array of strings, which can hold multiple string values for user read items.",
            "keywords": [
                "field",
                "has_read_items",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Confirms that the 'has_read_items' field will be available in both the summary and attribute indexes, supporting retrieval and search operations.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Confirms that the 'has_read_items' field will be available in both the summary and attribute indexes, supporting retrieval and search operations.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L20-L20",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Defines a ranking profile named 'single-phase-user-fetch' to control the ranking characteristics of result documents in queries.\n```\nrank-profile single-phase-user-fetch {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "rank-profile single-phase-user-fetch {",
            "explanation": "Defines a ranking profile named 'single-phase-user-fetch' to control the ranking characteristics of result documents in queries.",
            "keywords": [
                "rank-profile",
                "single-phase-user-fetch"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L21-L21",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd",
            "content": "Specifies that the ranking profile will incorporate the 'embedding' field as a match feature during the document ranking process, indicating relevance based on this attribute.\n```\nmatch-features: attribute(embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/user.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "match-features: attribute(embedding)",
            "explanation": "Specifies that the ranking profile will incorporate the 'embedding' field as a match feature during the document ranking process, indicating relevance based on this attribute.",
            "keywords": [
                "match-features",
                "attribute",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The Vespa schema definition begins here and defines a new schema named 'news'.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "The Vespa schema definition begins here and defines a new schema named 'news'.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The schema contains a document type named 'news', indicating this section will describe the fields and properties of the 'news' document.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "The schema contains a document type named 'news', indicating this section will describe the fields and properties of the 'news' document.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L6-L6",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "This defines a field named 'news_id' of type 'string', which will hold unique identifiers for each news document.\n```\nfield news_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field news_id type string {",
            "explanation": "This defines a field named 'news_id' of type 'string', which will hold unique identifiers for each news document.",
            "keywords": [
                "field",
                "news_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'news_id' field is set to be included in both 'summary' and 'attribute' indexes, allowing it to be used in searches and accessible in query results.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'news_id' field is set to be included in both 'summary' and 'attribute' indexes, allowing it to be used in searches and accessible in query results.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'news_id' field is configured for 'fast-search', enabling optimized search operations on this attribute.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "The 'news_id' field is configured for 'fast-search', enabling optimized search operations on this attribute.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L10-L10",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "This defines a 'category' field of type 'string', intended to store the category classification of a news article.\n```\nfield category type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field category type string {",
            "explanation": "This defines a 'category' field of type 'string', intended to store the category classification of a news article.",
            "keywords": [
                "field",
                "category",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'category' field is configured to be part of both the 'summary' and 'attribute' indexes, ensuring it can be retrieved and filtered efficiently.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'category' field is configured to be part of both the 'summary' and 'attribute' indexes, ensuring it can be retrieved and filtered efficiently.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L13-L13",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines a 'subcategory' field of type 'string', used to hold more specific classification under a category for a news article.\n```\nfield subcategory type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "field subcategory type string {",
            "explanation": "Defines a 'subcategory' field of type 'string', used to hold more specific classification under a category for a news article.",
            "keywords": [
                "field",
                "subcategory",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'subcategory' field is included in both 'summary' and 'attribute' indexing, making it accessible for detailed searching and retrieval.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'subcategory' field is included in both 'summary' and 'attribute' indexing, making it accessible for detailed searching and retrieval.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L16-L16",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Specifies a field named 'title' of type 'string', designed to store the title of the news articles.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "field title type string {",
            "explanation": "Specifies a field named 'title' of type 'string', designed to store the title of the news articles.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'title' field is set to belong both to 'index' and 'summary', allowing for indexing to improve search and retrieval.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "The 'title' field is set to belong both to 'index' and 'summary', allowing for indexing to improve search and retrieval.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Enables BM25 ranking algorithm on the 'title' field, improving relevance scoring for search queries involving this field.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "Enables BM25 ranking algorithm on the 'title' field, improving relevance scoring for search queries involving this field.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L20-L20",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "This statement declares an 'abstract' field of type 'string', which will contain a summary or brief description of news content.\n```\nfield abstract type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "field abstract type string {",
            "explanation": "This statement declares an 'abstract' field of type 'string', which will contain a summary or brief description of news content.",
            "keywords": [
                "field",
                "abstract",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Indicates the 'abstract' field will be used in both indexing for ranking relevance and in query summaries.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "Indicates the 'abstract' field will be used in both indexing for ranking relevance and in query summaries.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The BM25 index model is applied to the 'abstract' field to enhance the text relevance computations.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "The BM25 index model is applied to the 'abstract' field to enhance the text relevance computations.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L24-L24",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines a 'body' field as 'string', designed to contain the main content of a news article with full text.\n```\nfield body type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "field body type string {",
            "explanation": "Defines a 'body' field as 'string', designed to contain the main content of a news article with full text.",
            "keywords": [
                "field",
                "body",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'body' field is included in 'index' and 'summary', supporting detailed retrieval and summarizing search results.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "The 'body' field is included in 'index' and 'summary', supporting detailed retrieval and summarizing search results.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Allows for BM25 algorithm ranking on the 'body' field, optimizing search result relevance based on its content.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "Allows for BM25 algorithm ranking on the 'body' field, optimizing search result relevance based on its content.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L28-L28",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines a 'url' field of type 'string', intended to store the web address related to the news document.\n```\nfield url type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "field url type string {",
            "explanation": "Defines a 'url' field of type 'string', intended to store the web address related to the news document.",
            "keywords": [
                "field",
                "url",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'url' field is indexed and included in summaries, facilitating URL-based searches and result presentations.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "The 'url' field is indexed and included in summaries, facilitating URL-based searches and result presentations.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L31-L31",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Specifies a 'date' field with an integer type, used to represent the date related to the news article.\n```\nfield date type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "field date type int {",
            "explanation": "Specifies a 'date' field with an integer type, used to represent the date related to the news article.",
            "keywords": [
                "field",
                "date",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Configures the 'date' field to be part of both summary and attribute indexing, useful for search result filtering and quick access.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Configures the 'date' field to be part of both summary and attribute indexing, useful for search result filtering and quick access.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Applies 'fast-search' to the 'date' field, thus optimizing it for quick search-based operations based on date values.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "Applies 'fast-search' to the 'date' field, thus optimizing it for quick search-based operations based on date values.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L35-L35",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Declares a 'clicks' field of type 'int', used to record the number of user clicks on a particular news article.\n```\nfield clicks type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "field clicks type int {",
            "explanation": "Declares a 'clicks' field of type 'int', used to record the number of user clicks on a particular news article.",
            "keywords": [
                "field",
                "clicks",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'clicks' field is to be included for both summary purposes and as an attribute, ensuring fast retrieval and search capability.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'clicks' field is to be included for both summary purposes and as an attribute, ensuring fast retrieval and search capability.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L38-L38",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Specifies a field named 'impressions' which is an 'int', intended to store the total number of impressions logged for the article.\n```\nfield impressions type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "field impressions type int {",
            "explanation": "Specifies a field named 'impressions' which is an 'int', intended to store the total number of impressions logged for the article.",
            "keywords": [
                "field",
                "impressions",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "This setting includes 'impressions' in both summary and attribute indexes, supporting data collection for analysis and search.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "This setting includes 'impressions' in both summary and attribute indexes, supporting data collection for analysis and search.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L41-L41",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines a field 'embedding' as a tensor of floats with a dimension of 50, useful for storing vector representations for machine learning.\n```\nfield embedding type tensor<float>(d0[50]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "field embedding type tensor<float>(d0[50]) {",
            "explanation": "Defines a field 'embedding' as a tensor of floats with a dimension of 50, useful for storing vector representations for machine learning.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L42-L42",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'embedding' field supports both attribute and index functionalities, crucial for advanced search and retrieval tasks involving vectors.\n```\nindexing: attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "indexing: attribute | index",
            "explanation": "The 'embedding' field supports both attribute and index functionalities, crucial for advanced search and retrieval tasks involving vectors.",
            "keywords": [
                "indexing",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L43-L43",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Starts an attribute block that will contain additional configuration for the 'embedding' field.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "attribute {",
            "explanation": "Starts an attribute block that will contain additional configuration for the 'embedding' field.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L44-L44",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'embedding' field is configured to use the 'dotproduct' distance metric for similarity computations, crucial for vector matches.\n```\ndistance-metric: dotproduct\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "distance-metric: dotproduct",
            "explanation": "The 'embedding' field is configured to use the 'dotproduct' distance metric for similarity computations, crucial for vector matches.",
            "keywords": [
                "distance-metric",
                "dotproduct"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L49-L49",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "A fieldset named 'default' is defined, grouping related fields 'title', 'abstract', and 'body' for convenient access and operations.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "fieldset default {",
            "explanation": "A fieldset named 'default' is defined, grouping related fields 'title', 'abstract', and 'body' for convenient access and operations.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L50-L50",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The 'default' fieldset contains the fields 'title', 'abstract', and 'body', organizing them for grouped retrieval and indexing.\n```\nfields: title, abstract, body\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L50-L50",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L50-L50",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 50,
            "code": "fields: title, abstract, body",
            "explanation": "The 'default' fieldset contains the fields 'title', 'abstract', and 'body', organizing them for grouped retrieval and indexing.",
            "keywords": [
                "fields",
                "title",
                "abstract",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L53-L53",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "A rank-profile named 'popularity' is defined, inheriting the settings from the 'default' profile to compute document rank based on article popularity.\n```\nrank-profile popularity inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L53-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L53-L53",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 53,
            "code": "rank-profile popularity inherits default {",
            "explanation": "A rank-profile named 'popularity' is defined, inheriting the settings from the 'default' profile to compute document rank based on article popularity.",
            "keywords": [
                "rank-profile",
                "popularity",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L54-L54",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Introduces a custom function named 'popularity' to calculate a popularity score for news documents based on specific criteria.\n```\nfunction popularity() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L54-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L54-L54",
            "namespace": "code-p",
            "start_line": 54,
            "end_line": 54,
            "code": "function popularity() {",
            "explanation": "Introduces a custom function named 'popularity' to calculate a popularity score for news documents based on specific criteria.",
            "keywords": [
                "function",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L55-L55",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines the 'popularity' expression to calculate a ratio of clicks to impressions if impressions are greater than zero, returning zero otherwise.\n```\nexpression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L55-L55",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L55-L55",
            "namespace": "code-p",
            "start_line": 55,
            "end_line": 55,
            "code": "expression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)",
            "explanation": "Defines the 'popularity' expression to calculate a ratio of clicks to impressions if impressions are greater than zero, returning zero otherwise.",
            "keywords": [
                "expression",
                "if",
                "attribute",
                "impressions",
                "attribute",
                "clicks",
                "attribute",
                "impressions"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Begins the definition of the first phase in ranking, which determines the initial ranking criteria for documents.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
            "namespace": "code-p",
            "start_line": 57,
            "end_line": 57,
            "code": "first-phase {",
            "explanation": "Begins the definition of the first phase in ranking, which determines the initial ranking criteria for documents.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L58-L58",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The first-phase ranking combines Vespa's native ranking score with a weighted popularity score, adjusting document rankings.\n```\nexpression: nativeRank + 100 * popularity\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L58-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L58-L58",
            "namespace": "code-p",
            "start_line": 58,
            "end_line": 58,
            "code": "expression: nativeRank + 100 * popularity",
            "explanation": "The first-phase ranking combines Vespa's native ranking score with a weighted popularity score, adjusting document rankings.",
            "keywords": [
                "expression",
                "nativeRank",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L62-L62",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Defines a rank-profile named 'recommendation', leveraging settings from the 'default' profile to evaluate document recommendations.\n```\nrank-profile recommendation inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L62-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L62-L62",
            "namespace": "code-p",
            "start_line": 62,
            "end_line": 62,
            "code": "rank-profile recommendation inherits default {",
            "explanation": "Defines a rank-profile named 'recommendation', leveraging settings from the 'default' profile to evaluate document recommendations.",
            "keywords": [
                "rank-profile",
                "recommendation",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "Specifies the first phase section for the rank-profile 'recommendation', to outline how initial rankings are computed.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L57-L57",
            "namespace": "code-p",
            "start_line": 57,
            "end_line": 57,
            "code": "first-phase {",
            "explanation": "Specifies the first phase section for the rank-profile 'recommendation', to outline how initial rankings are computed.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L64-L64",
        "fields": {
            "title": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "doc_id": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd",
            "content": "The first phase relies on an 'expression' that calculates closeness between a query field and the document embedding, aiding recommendations.\n```\nexpression: closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L64-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-6-recommendation-with-searchers/src/main/application/schemas/news.sd#L64-L64",
            "namespace": "code-p",
            "start_line": 64,
            "end_line": 64,
            "code": "expression: closeness(field, embedding)",
            "explanation": "The first phase relies on an 'expression' that calculates closeness between a query field and the document embedding, aiding recommendations.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L3-L3",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet declares a schema named \"user\". The schema defines the structure for indexing and querying user documents.\n```\nschema user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema user {",
            "explanation": "This snippet declares a schema named \"user\". The schema defines the structure for indexing and querying user documents.",
            "keywords": [
                "schema",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L4-L4",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet starts the definition of a document type named \"user\" within the schema. The document will contain fields that are related to user data.\n```\ndocument user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document user {",
            "explanation": "This snippet starts the definition of a document type named \"user\" within the schema. The document will contain fields that are related to user data.",
            "keywords": [
                "document",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L6-L6",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet declares a field named \"user_id\" of type string. It is part of the \"user\" document and will store user identification strings.\n```\nfield user_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field user_id type string {",
            "explanation": "This snippet declares a field named \"user_id\" of type string. It is part of the \"user\" document and will store user identification strings.",
            "keywords": [
                "field",
                "user_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet specifies the indexing modes for the \"user_id\" field, indicating it should be stored both in the summary and as an attribute.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "This snippet specifies the indexing modes for the \"user_id\" field, indicating it should be stored both in the summary and as an attribute.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L8-L8",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This line sets the attribute \"fast-search\" on the \"user_id\" field, enabling fast searching capabilities.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "This line sets the attribute \"fast-search\" on the \"user_id\" field, enabling fast searching capabilities.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L11-L11",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet defines a field named \"embedding\" of type tensor with float values and a dimension size of 50. It is used for vector embeddings.\n```\nfield embedding type tensor<float>(d0[50]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field embedding type tensor<float>(d0[50]) {",
            "explanation": "This snippet defines a field named \"embedding\" of type tensor with float values and a dimension size of 50. It is used for vector embeddings.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "d0"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This configures the \"embedding\" field to be indexed in both the summary and as an attribute, making it easily retrievable.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "This configures the \"embedding\" field to be indexed in both the summary and as an attribute, making it easily retrievable.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L15-L15",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet declares a field called \"has_read_items\" which is an array of strings. It holds data about items that a user has read.\n```\nfield has_read_items type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "field has_read_items type array<string> {",
            "explanation": "This snippet declares a field called \"has_read_items\" which is an array of strings. It holds data about items that a user has read.",
            "keywords": [
                "field",
                "has_read_items",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "The \"has_read_items\" field is indexed as both summary and attribute, allowing it to be summarized in search results and queried as an attribute.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The \"has_read_items\" field is indexed as both summary and attribute, allowing it to be summarized in search results and queried as an attribute.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L20-L20",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This snippet introduces a ranking profile named \"single-phase-user-fetch\", which specifies how to rank documents during query evaluation.\n```\nrank-profile single-phase-user-fetch {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "rank-profile single-phase-user-fetch {",
            "explanation": "This snippet introduces a ranking profile named \"single-phase-user-fetch\", which specifies how to rank documents during query evaluation.",
            "keywords": [
                "rank-profile",
                "single-phase-user-fetch"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/user.sd#L21-L21",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/user.sd",
            "content": "This line within the ranking profile specifies that the \"embedding\" attribute should be used as a match feature to assist in ranking documents.\n```\nmatch-features: attribute(embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/user.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/user.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "match-features: attribute(embedding)",
            "explanation": "This line within the ranking profile specifies that the \"embedding\" attribute should be used as a match feature to assist in ranking documents.",
            "keywords": [
                "match-features",
                "attribute",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L3-L3",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "content": "This line declares a schema named 'category_ctr'. A schema in Vespa defines how data is structured and indexed for a specific application domain.\n```\nschema category_ctr {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema category_ctr {",
            "explanation": "This line declares a schema named 'category_ctr'. A schema in Vespa defines how data is structured and indexed for a specific application domain.",
            "keywords": [
                "schema",
                "category_ctr"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L4-L4",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "content": "This line specifies a document named 'category_ctr' inside the schema. Documents are used to define the data structure and field types for indexing in Vespa.\n```\ndocument category_ctr {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document category_ctr {",
            "explanation": "This line specifies a document named 'category_ctr' inside the schema. Documents are used to define the data structure and field types for indexing in Vespa.",
            "keywords": [
                "document",
                "category_ctr"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L6-L6",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "content": "This line declares a field named 'ctrs' with the type 'tensor<float>(category{})'. It defines a tensor field indicating that data is organized by categories, each associated with a float value.\n```\nfield ctrs type tensor<float>(category{}) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field ctrs type tensor<float>(category{}) {",
            "explanation": "This line declares a field named 'ctrs' with the type 'tensor<float>(category{})'. It defines a tensor field indicating that data is organized by categories, each associated with a float value.",
            "keywords": [
                "field",
                "ctrs",
                "type",
                "tensor",
                "float",
                "category"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "content": "This line configures the 'ctrs' field to be indexed as an attribute. Attributes in Vespa facilitate fast access and computation over the data in the field.\n```\nindexing: attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: attribute",
            "explanation": "This line configures the 'ctrs' field to be indexed as an attribute. Attributes in Vespa facilitate fast access and computation over the data in the field.",
            "keywords": [
                "indexing",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L8-L8",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd",
            "content": "This line enables the 'fast-search' capability for the 'ctrs' field, optimizing the field for quick searching and access in queries.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/category_ctr.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "This line enables the 'fast-search' capability for the 'ctrs' field, optimizing the field for quick searching and access in queries.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The \"schema news\" statement declares a new schema named 'news'. This schema will describe the structure and configuration of documents with type 'news' for the Vespa search engine.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "The \"schema news\" statement declares a new schema named 'news'. This schema will describe the structure and configuration of documents with type 'news' for the Vespa search engine.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The \"document news\" block starts the definition of a document type within the 'news' schema. This document type is designated as 'news' and will contain various fields and properties for indexing and retrieval.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "The \"document news\" block starts the definition of a document type within the 'news' schema. This document type is designated as 'news' and will contain various fields and properties for indexing and retrieval.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L6-L6",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'field news_id type string' line defines a field named 'news_id' of type 'string'. This field will hold string data and is expected to store unique identifiers for news documents.\n```\nfield news_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field news_id type string {",
            "explanation": "The 'field news_id type string' line defines a field named 'news_id' of type 'string'. This field will hold string data and is expected to store unique identifiers for news documents.",
            "keywords": [
                "field",
                "news_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'indexing: summary | attribute' line specifies that the 'news_id' field should be indexed for both summary and attribute purposes. This means the field will be available in the summary of search results and as a searchable attribute.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'indexing: summary | attribute' line specifies that the 'news_id' field should be indexed for both summary and attribute purposes. This means the field will be available in the summary of search results and as a searchable attribute.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'attribute: fast-search' line indicates that the 'news_id' field should be configured for fast search. This enhances the search speed on this field by enabling optimized attribute search operations.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "The 'attribute: fast-search' line indicates that the 'news_id' field should be configured for fast search. This enhances the search speed on this field by enabling optimized attribute search operations.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L10-L10",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'field category type string' line defines a field named 'category' of type 'string'. This field will contain the category information associated with the news document and is stored as a string.\n```\nfield category type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field category type string {",
            "explanation": "The 'field category type string' line defines a field named 'category' of type 'string'. This field will contain the category information associated with the news document and is stored as a string.",
            "keywords": [
                "field",
                "category",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'indexing: summary | attribute' directive for the 'category' field allows for its values to be part of search summaries and available as attributes upon which search queries can be executed.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'indexing: summary | attribute' directive for the 'category' field allows for its values to be part of search summaries and available as attributes upon which search queries can be executed.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L16-L16",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'field title type string' line specifies a field named 'title' which is of type 'string'. This field typically holds the title of the news article being indexed.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "field title type string {",
            "explanation": "The 'field title type string' line specifies a field named 'title' which is of type 'string'. This field typically holds the title of the news article being indexed.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'indexing: index | summary' line for the 'title' field denotes that it should be fully indexed for searching and also included in any document summary presented in search results.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "The 'indexing: index | summary' line for the 'title' field denotes that it should be fully indexed for searching and also included in any document summary presented in search results.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'index: enable-bm25' line activates the BM25 ranking function for the 'title' field. BM25 is a widely used algorithm for determining document relevance based on term frequency and inverse document frequency.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "The 'index: enable-bm25' line activates the BM25 ranking function for the 'title' field. BM25 is a widely used algorithm for determining document relevance based on term frequency and inverse document frequency.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L41-L41",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'field embedding type tensor<float>(d0[50])' line defines a field named 'embedding', which is a tensor data type with a specific structure. This field contains 50-dimensional float vectors used for advanced retrieval strategies like machine learning models.\n```\nfield embedding type tensor<float>(d0[50]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "field embedding type tensor<float>(d0[50]) {",
            "explanation": "The 'field embedding type tensor<float>(d0[50])' line defines a field named 'embedding', which is a tensor data type with a specific structure. This field contains 50-dimensional float vectors used for advanced retrieval strategies like machine learning models.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L42-L42",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'indexing: attribute | index' directive indicates that the 'embedding' tensor should be both searchable as an index and queryable as an attribute, allowing for operations like nearest neighbor search.\n```\nindexing: attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "indexing: attribute | index",
            "explanation": "The 'indexing: attribute | index' directive indicates that the 'embedding' tensor should be both searchable as an index and queryable as an attribute, allowing for operations like nearest neighbor search.",
            "keywords": [
                "indexing",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L43-L43",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'attribute {' block initiates additional attribute-specific configurations for the 'embedding' field, tailored to its unique requirements and functionalities.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "attribute {",
            "explanation": "The 'attribute {' block initiates additional attribute-specific configurations for the 'embedding' field, tailored to its unique requirements and functionalities.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L44-L44",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'distance-metric: dotproduct' line specifies that the dot product should be used as the distance metric for the 'embedding' field. This is particularly useful for similarity searches or rankings involving vector data.\n```\ndistance-metric: dotproduct\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "distance-metric: dotproduct",
            "explanation": "The 'distance-metric: dotproduct' line specifies that the dot product should be used as the distance metric for the 'embedding' field. This is particularly useful for similarity searches or rankings involving vector data.",
            "keywords": [
                "distance-metric",
                "dotproduct"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L56-L56",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'import field category_ctr_ref.ctrs as global_category_ctrs {}' statement imports a field reference named 'category_ctr_ref.ctrs' and aliases it as 'global_category_ctrs'. This facilitates the integration of external category click-through data as a ranking factor.\n```\nimport field category_ctr_ref.ctrs as global_category_ctrs {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L56-L56",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L56-L56",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 56,
            "code": "import field category_ctr_ref.ctrs as global_category_ctrs {}",
            "explanation": "The 'import field category_ctr_ref.ctrs as global_category_ctrs {}' statement imports a field reference named 'category_ctr_ref.ctrs' and aliases it as 'global_category_ctrs'. This facilitates the integration of external category click-through data as a ranking factor.",
            "keywords": [
                "import",
                "field",
                "category_ctr_ref.ctrs",
                "as",
                "global_category_ctrs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L58-L58",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'fieldset default {' block starts the definition of a fieldset named 'default'. This mechanism groups several fields together, allowing them to be treated collectively in certain operations such as ranking or querying.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L58-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L58-L58",
            "namespace": "code-p",
            "start_line": 58,
            "end_line": 58,
            "code": "fieldset default {",
            "explanation": "The 'fieldset default {' block starts the definition of a fieldset named 'default'. This mechanism groups several fields together, allowing them to be treated collectively in certain operations such as ranking or querying.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L59-L59",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'fields: title, abstract, body' line lists fields to be included in the 'default' fieldset. These fields consist of 'title', 'abstract', and 'body', likely representing core text content parts of a news document.\n```\nfields: title, abstract, body\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L59-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L59-L59",
            "namespace": "code-p",
            "start_line": 59,
            "end_line": 59,
            "code": "fields: title, abstract, body",
            "explanation": "The 'fields: title, abstract, body' line lists fields to be included in the 'default' fieldset. These fields consist of 'title', 'abstract', and 'body', likely representing core text content parts of a news document.",
            "keywords": [
                "fields",
                "title",
                "abstract",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L62-L62",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'rank-profile popularity inherits default {' statement begins the definition of a rank profile named 'popularity'. This profile inherits settings from the 'default' fieldset, facilitating content-based ranking for news documents.\n```\nrank-profile popularity inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L62-L62",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L62-L62",
            "namespace": "code-p",
            "start_line": 62,
            "end_line": 62,
            "code": "rank-profile popularity inherits default {",
            "explanation": "The 'rank-profile popularity inherits default {' statement begins the definition of a rank profile named 'popularity'. This profile inherits settings from the 'default' fieldset, facilitating content-based ranking for news documents.",
            "keywords": [
                "rank-profile",
                "popularity",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L63-L63",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'function popularity() {' initializes a custom ranking function named 'popularity'. This function calculates a relevance score based on user engagement metrics like clicks and impressions.\n```\nfunction popularity() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L63-L63",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L63-L63",
            "namespace": "code-p",
            "start_line": 63,
            "end_line": 63,
            "code": "function popularity() {",
            "explanation": "The 'function popularity() {' initializes a custom ranking function named 'popularity'. This function calculates a relevance score based on user engagement metrics like clicks and impressions.",
            "keywords": [
                "function",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L64-L64",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'expression:' line defines the logic within the 'popularity' function. It calculates a metric for popularity as the ratio of clicks to impressions, provided there are impressions; otherwise, it returns 0.\n```\nexpression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L64-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L64-L64",
            "namespace": "code-p",
            "start_line": 64,
            "end_line": 64,
            "code": "expression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)",
            "explanation": "The 'expression:' line defines the logic within the 'popularity' function. It calculates a metric for popularity as the ratio of clicks to impressions, provided there are impressions; otherwise, it returns 0.",
            "keywords": [
                "expression",
                "if",
                "attribute",
                "impressions",
                "attribute",
                "clicks",
                "attribute",
                "impressions"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'first-phase {' block initiates the first stage in the ranking process. This stage typically calculates initial document scores for ranking based on defined expressions.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 66,
            "code": "first-phase {",
            "explanation": "The 'first-phase {' block initiates the first stage in the ranking process. This stage typically calculates initial document scores for ranking based on defined expressions.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L67-L67",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'expression:' line within the first-phase block specifies the ranking formula, combining the engine's native rank with the popularity score scaled by a factor of 100. This enhances document ranking based on calculated popularity.\n```\nexpression: nativeRank + 100 * popularity\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L67-L67",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L67-L67",
            "namespace": "code-p",
            "start_line": 67,
            "end_line": 67,
            "code": "expression: nativeRank + 100 * popularity",
            "explanation": "The 'expression:' line within the first-phase block specifies the ranking formula, combining the engine's native rank with the popularity score scaled by a factor of 100. This enhances document ranking based on calculated popularity.",
            "keywords": [
                "expression",
                "nativeRank",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L71-L71",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'rank-profile recommendation inherits default {' block defines a rank profile called 'recommendation'. This profile derives its configuration from the 'default' fieldset, adopting its field definitions for recommendation ranking.\n```\nrank-profile recommendation inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L71-L71",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L71-L71",
            "namespace": "code-p",
            "start_line": 71,
            "end_line": 71,
            "code": "rank-profile recommendation inherits default {",
            "explanation": "The 'rank-profile recommendation inherits default {' block defines a rank profile called 'recommendation'. This profile derives its configuration from the 'default' fieldset, adopting its field definitions for recommendation ranking.",
            "keywords": [
                "rank-profile",
                "recommendation",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'first-phase {' block in the recommendation rank profile starts the initial phase of ranking computation. It's a crucial step for evaluating documents under this specific ranking strategy.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 66,
            "code": "first-phase {",
            "explanation": "The 'first-phase {' block in the recommendation rank profile starts the initial phase of ranking computation. It's a crucial step for evaluating documents under this specific ranking strategy.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'expression:' line computes closeness between a field and the 'embedding' vector to assess document similarity. This expression is often used in contexts such as content-based recommendations.\n```\nexpression: closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
            "namespace": "code-p",
            "start_line": 73,
            "end_line": 73,
            "code": "expression: closeness(field, embedding)",
            "explanation": "The 'expression:' line computes closeness between a field and the 'embedding' vector to assess document similarity. This expression is often used in contexts such as content-based recommendations.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L77-L77",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'rank-profile recommendation_with_global_category_ctr inherits recommendation {' block begins a rank profile that leverages global category click-through rates for recommendations, derived from the 'recommendation' profile settings.\n```\nrank-profile recommendation_with_global_category_ctr inherits recommendation {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L77-L77",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L77-L77",
            "namespace": "code-p",
            "start_line": 77,
            "end_line": 77,
            "code": "rank-profile recommendation_with_global_category_ctr inherits recommendation {",
            "explanation": "The 'rank-profile recommendation_with_global_category_ctr inherits recommendation {' block begins a rank profile that leverages global category click-through rates for recommendations, derived from the 'recommendation' profile settings.",
            "keywords": [
                "rank-profile",
                "recommendation_with_global_category_ctr",
                "inherits",
                "recommendation"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L78-L78",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'function category_ctr() {' line indicates the start of a new function named 'category_ctr' designed to compute category-specific click-through rates. This function augments the recommendation profile with category-level insights.\n```\nfunction category_ctr() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L78-L78",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L78-L78",
            "namespace": "code-p",
            "start_line": 78,
            "end_line": 78,
            "code": "function category_ctr() {",
            "explanation": "The 'function category_ctr() {' line indicates the start of a new function named 'category_ctr' designed to compute category-specific click-through rates. This function augments the recommendation profile with category-level insights.",
            "keywords": [
                "function",
                "category_ctr"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L79-L79",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'expression:' line in the 'category_ctr' function computes the sum of products between 'category_tensor' and 'global_category_ctrs', quantifying relevance based on category click-through data obtained from external sources.\n```\nexpression: sum(attribute(category_tensor) * attribute(global_category_ctrs))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L79-L79",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L79-L79",
            "namespace": "code-p",
            "start_line": 79,
            "end_line": 79,
            "code": "expression: sum(attribute(category_tensor) * attribute(global_category_ctrs))",
            "explanation": "The 'expression:' line in the 'category_ctr' function computes the sum of products between 'category_tensor' and 'global_category_ctrs', quantifying relevance based on category click-through data obtained from external sources.",
            "keywords": [
                "expression",
                "sum",
                "attribute",
                "category_tensor",
                "attribute",
                "global_category_ctrs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L81-L81",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'function nearest_neighbor() {' line declares a function named 'nearest_neighbor'. This function enables nearest neighbor calculations, a common technique in recommendations and search scoring using vector proximity.\n```\nfunction nearest_neighbor() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L81-L81",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L81-L81",
            "namespace": "code-p",
            "start_line": 81,
            "end_line": 81,
            "code": "function nearest_neighbor() {",
            "explanation": "The 'function nearest_neighbor() {' line declares a function named 'nearest_neighbor'. This function enables nearest neighbor calculations, a common technique in recommendations and search scoring using vector proximity.",
            "keywords": [
                "function",
                "nearest_neighbor"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "Defines an expression that measures document similarity by computing the 'closeness' between a field and the 'embedding' vector in the 'nearest_neighbor' function. This calculation aids accurate recommendations in the ranking profile.\n```\nexpression: closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L73-L73",
            "namespace": "code-p",
            "start_line": 73,
            "end_line": 73,
            "code": "expression: closeness(field, embedding)",
            "explanation": "Defines an expression that measures document similarity by computing the 'closeness' between a field and the 'embedding' vector in the 'nearest_neighbor' function. This calculation aids accurate recommendations in the ranking profile.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'first-phase {' block signifies the initial stage of document scoring under the 'recommendation_with_global_category_ctr' profile. This first phase establishes a base ranking score derived from function calculations.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L66-L66",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 66,
            "code": "first-phase {",
            "explanation": "The 'first-phase {' block signifies the initial stage of document scoring under the 'recommendation_with_global_category_ctr' profile. This first phase establishes a base ranking score derived from function calculations.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L85-L85",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "In the first-phase expression of the 'recommendation_with_global_category_ctr' profile, the score is computed by multiplying 'nearest_neighbor' by 'category_ctr', optimizing ranking by balancing proximity and category relevance.\n```\nexpression: nearest_neighbor * category_ctr\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L85-L85",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L85-L85",
            "namespace": "code-p",
            "start_line": 85,
            "end_line": 85,
            "code": "expression: nearest_neighbor * category_ctr",
            "explanation": "In the first-phase expression of the 'recommendation_with_global_category_ctr' profile, the score is computed by multiplying 'nearest_neighbor' by 'category_ctr', optimizing ranking by balancing proximity and category relevance.",
            "keywords": [
                "expression",
                "nearest_neighbor",
                "category_ctr"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L87-L87",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "The 'summary-features {' block begins the specifications for features to be included in the search result summary. These features provide additional details and scores that contribute to document ranking and recommendations.\n```\nsummary-features {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L87-L87",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L87-L87",
            "namespace": "code-p",
            "start_line": 87,
            "end_line": 87,
            "code": "summary-features {",
            "explanation": "The 'summary-features {' block begins the specifications for features to be included in the search result summary. These features provide additional details and scores that contribute to document ranking and recommendations.",
            "keywords": [
                "summary-features"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L88-L88",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "Specifies that 'category_tensor' attribute should be included as a summary feature, which presents detailed relevance scoring involved in the document's ranking based on its category.\n```\nattribute(category_tensor)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L88-L88",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L88-L88",
            "namespace": "code-p",
            "start_line": 88,
            "end_line": 88,
            "code": "attribute(category_tensor)",
            "explanation": "Specifies that 'category_tensor' attribute should be included as a summary feature, which presents detailed relevance scoring involved in the document's ranking based on its category.",
            "keywords": [
                "attribute",
                "category_tensor"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-7-parent-child/src/main/application/schemas/news.sd#L89-L89",
        "fields": {
            "title": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "doc_id": "news/app-7-parent-child/src/main/application/schemas/news.sd",
            "content": "Dictates the inclusion of 'global_category_ctrs' as a summary feature. This permits insight into how global category click-through rates influence document relevance and ranking output.\n```\nattribute(global_category_ctrs)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-7-parent-child/src/main/application/schemas/news.sd#L89-L89",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-7-parent-child/src/main/application/schemas/news.sd#L89-L89",
            "namespace": "code-p",
            "start_line": 89,
            "end_line": 89,
            "code": "attribute(global_category_ctrs)",
            "explanation": "Dictates the inclusion of 'global_category_ctrs' as a summary feature. This permits insight into how global category click-through rates influence document relevance and ranking output.",
            "keywords": [
                "attribute",
                "global_category_ctrs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "This line declares a new schema named 'news', which will define a structure for data related to news articles within the Vespa application.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "This line declares a new schema named 'news', which will define a structure for data related to news articles within the Vespa application.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "This line introduces a document type named 'news', specifying that documents of this type will adhere to the structure and fields defined in the succeeding lines.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "This line introduces a document type named 'news', specifying that documents of this type will adhere to the structure and fields defined in the succeeding lines.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L6-L6",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "This line defines a field named 'news_id' of type 'string'. This field is intended to store unique identifiers for news articles.\n```\nfield news_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field news_id type string {",
            "explanation": "This line defines a field named 'news_id' of type 'string'. This field is intended to store unique identifiers for news articles.",
            "keywords": [
                "field",
                "news_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "The 'indexing' attribute for the 'news_id' field specifies that this field should be included in both summary and attribute storage formats for fast access.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "The 'indexing' attribute for the 'news_id' field specifies that this field should be included in both summary and attribute storage formats for fast access.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "The 'attribute' setting indicates that the 'news_id' field should be configured for fast search capabilities, optimizing queries that include this field.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "The 'attribute' setting indicates that the 'news_id' field should be configured for fast search capabilities, optimizing queries that include this field.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L10-L10",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Defines a 'category' field of type 'string', which is meant to store the category classification of a news article, such as sports, politics, etc.\n```\nfield category type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field category type string {",
            "explanation": "Defines a 'category' field of type 'string', which is meant to store the category classification of a news article, such as sports, politics, etc.",
            "keywords": [
                "field",
                "category",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L13-L13",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Introduces a 'subcategory' field of type 'string', allowing for a more granular classification of the news, complementing the 'category' field.\n```\nfield subcategory type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "field subcategory type string {",
            "explanation": "Introduces a 'subcategory' field of type 'string', allowing for a more granular classification of the news, complementing the 'category' field.",
            "keywords": [
                "field",
                "subcategory",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L16-L16",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Specifies a 'title' field of type 'string' for the document, which is used to store the main headline or title of the news article.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "field title type string {",
            "explanation": "Specifies a 'title' field of type 'string' for the document, which is used to store the main headline or title of the news article.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "This indexing directive indicates that the field data should be included in both the searchable index and as a retrievable summary.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "This indexing directive indicates that the field data should be included in both the searchable index and as a retrievable summary.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Enables the BM25 ranking model for the field, providing a ranking function for search relevance.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "Enables the BM25 ranking model for the field, providing a ranking function for search relevance.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L20-L20",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Defines an 'abstract' field of type 'string', which contains a brief summary or overview of the news article content.\n```\nfield abstract type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "field abstract type string {",
            "explanation": "Defines an 'abstract' field of type 'string', which contains a brief summary or overview of the news article content.",
            "keywords": [
                "field",
                "abstract",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L24-L24",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Introduces a 'body' field of type 'string', intended to store the main content of the news article.\n```\nfield body type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "field body type string {",
            "explanation": "Introduces a 'body' field of type 'string', intended to store the main content of the news article.",
            "keywords": [
                "field",
                "body",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L28-L28",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "The 'url' field of type 'string' stores the web address or link to access the news article online.\n```\nfield url type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "field url type string {",
            "explanation": "The 'url' field of type 'string' stores the web address or link to access the news article online.",
            "keywords": [
                "field",
                "url",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L31-L31",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Specifies a 'date' field of type 'int', designed to store the publication date of the news article in a numerical format.\n```\nfield date type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "field date type int {",
            "explanation": "Specifies a 'date' field of type 'int', designed to store the publication date of the news article in a numerical format.",
            "keywords": [
                "field",
                "date",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L35-L35",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Defines a 'clicks' field of type 'int', tracking the number of times an article has been clicked, or interacted with by users.\n```\nfield clicks type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "field clicks type int {",
            "explanation": "Defines a 'clicks' field of type 'int', tracking the number of times an article has been clicked, or interacted with by users.",
            "keywords": [
                "field",
                "clicks",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L38-L38",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "The 'impressions' field, also of type 'int', records how many times the news article has been displayed to users.\n```\nfield impressions type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "field impressions type int {",
            "explanation": "The 'impressions' field, also of type 'int', records how many times the news article has been displayed to users.",
            "keywords": [
                "field",
                "impressions",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L43-L43",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Declares a fieldset named 'default', which groups commonly queried fields together for convenient indexing and retrieval.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "fieldset default {",
            "explanation": "Declares a fieldset named 'default', which groups commonly queried fields together for convenient indexing and retrieval.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-2-feed-and-query/schemas/news.sd#L44-L44",
        "fields": {
            "title": "news/app-2-feed-and-query/schemas/news.sd",
            "doc_id": "news/app-2-feed-and-query/schemas/news.sd",
            "content": "Lists 'title', 'abstract', and 'body' as the fields included in the 'default' fieldset, optimizing common queries for these fields.\n```\nfields: title, abstract, body\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-2-feed-and-query/schemas/news.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-2-feed-and-query/schemas/news.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "fields: title, abstract, body",
            "explanation": "Lists 'title', 'abstract', and 'body' as the fields included in the 'default' fieldset, optimizing common queries for these fields.",
            "keywords": [
                "fields",
                "title",
                "abstract",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L3-L3",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Declares a new schema named 'news'. A schema in Vespa is a top-level construct that defines a collection of documents with associated fields, and is pivotal for indexing and querying data.\n```\nschema news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema news {",
            "explanation": "Declares a new schema named 'news'. A schema in Vespa is a top-level construct that defines a collection of documents with associated fields, and is pivotal for indexing and querying data.",
            "keywords": [
                "schema",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L4-L4",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Declares a new document type inside the 'news' schema. Document types are entities that hold fields, which are indexed and searched.\n```\ndocument news {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document news {",
            "explanation": "Declares a new document type inside the 'news' schema. Document types are entities that hold fields, which are indexed and searched.",
            "keywords": [
                "document",
                "news"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L6-L6",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'news_id' of type 'string' in the document. This uniquely identifies a news article within the schema.\n```\nfield news_id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field news_id type string {",
            "explanation": "Defines a field 'news_id' of type 'string' in the document. This uniquely identifies a news article within the schema.",
            "keywords": [
                "field",
                "news_id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L7-L7",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Specifies the indexing mechanisms for the 'news_id' field, making it available in the summary and as an attribute, allowing for efficient lookups and retrieval.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | attribute",
            "explanation": "Specifies the indexing mechanisms for the 'news_id' field, making it available in the summary and as an attribute, allowing for efficient lookups and retrieval.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L8-L8",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Enables fast-search for the 'news_id' attribute. This enhances search performance by allowing quick access to the field's data.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "attribute: fast-search",
            "explanation": "Enables fast-search for the 'news_id' attribute. This enhances search performance by allowing quick access to the field's data.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L10-L10",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'category' of type 'string', representing the main category of the news item.\n```\nfield category type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field category type string {",
            "explanation": "Defines a field 'category' of type 'string', representing the main category of the news item.",
            "keywords": [
                "field",
                "category",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L13-L13",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'subcategory' of type 'string', which specifies a more specific category or classification within the main category of the news item.\n```\nfield subcategory type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "field subcategory type string {",
            "explanation": "Defines a field 'subcategory' of type 'string', which specifies a more specific category or classification within the main category of the news item.",
            "keywords": [
                "field",
                "subcategory",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L16-L16",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'title' of type 'string', storing the headline or title of the news article.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "field title type string {",
            "explanation": "Defines a field 'title' of type 'string', storing the headline or title of the news article.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L17-L17",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Specifies that the field will be both indexed (for full-text search) and available in the summary (for fetching fields with query results).\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "indexing: index | summary",
            "explanation": "Specifies that the field will be both indexed (for full-text search) and available in the summary (for fetching fields with query results).",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L18-L18",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Enables the BM25 ranking function for this field, which is a popular algorithm for ranking retrieved documents based on the query terms appearing in each document as a full-text search feature.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "index: enable-bm25",
            "explanation": "Enables the BM25 ranking function for this field, which is a popular algorithm for ranking retrieved documents based on the query terms appearing in each document as a full-text search feature.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L20-L20",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'abstract' of type 'string', containing a brief summary or abstract of the news article's content.\n```\nfield abstract type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "field abstract type string {",
            "explanation": "Defines a field 'abstract' of type 'string', containing a brief summary or abstract of the news article's content.",
            "keywords": [
                "field",
                "abstract",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L24-L24",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'body' of type 'string', representing the main content of the news article.\n```\nfield body type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "field body type string {",
            "explanation": "Defines a field 'body' of type 'string', representing the main content of the news article.",
            "keywords": [
                "field",
                "body",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L28-L28",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'url' of type 'string', which stores the URL of the news article's online location.\n```\nfield url type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L28-L28",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L28-L28",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 28,
            "code": "field url type string {",
            "explanation": "Defines a field 'url' of type 'string', which stores the URL of the news article's online location.",
            "keywords": [
                "field",
                "url",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L31-L31",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'date' of type 'int', representing the publication date of the news article as an integer.\n```\nfield date type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "field date type int {",
            "explanation": "Defines a field 'date' of type 'int', representing the publication date of the news article as an integer.",
            "keywords": [
                "field",
                "date",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L35-L35",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'clicks' of type 'int', which is used to store the number of times the article has been clicked or accessed.\n```\nfield clicks type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "field clicks type int {",
            "explanation": "Defines a field 'clicks' of type 'int', which is used to store the number of times the article has been clicked or accessed.",
            "keywords": [
                "field",
                "clicks",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L38-L38",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a field 'impressions' of type 'int', which stores the number of times the article has been displayed to users.\n```\nfield impressions type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "field impressions type int {",
            "explanation": "Defines a field 'impressions' of type 'int', which stores the number of times the article has been displayed to users.",
            "keywords": [
                "field",
                "impressions",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L43-L43",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a fieldset 'default' which groups together multiple fields. This is useful for applying operations or settings to multiple fields simultaneously.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "fieldset default {",
            "explanation": "Defines a fieldset 'default' which groups together multiple fields. This is useful for applying operations or settings to multiple fields simultaneously.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L44-L44",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Specifies the fields included in the 'default' fieldset, which are 'title', 'abstract', and 'body'. These fields are likely the main text components for ranking and search.\n```\nfields: title, abstract, body\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "fields: title, abstract, body",
            "explanation": "Specifies the fields included in the 'default' fieldset, which are 'title', 'abstract', and 'body'. These fields are likely the main text components for ranking and search.",
            "keywords": [
                "fields",
                "title",
                "abstract",
                "body"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L47-L47",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a rank-profile named 'popularity' which inherits settings from a default profile. Rank-profiles specify how documents are scored in search results.\n```\nrank-profile popularity inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L47-L47",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L47-L47",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 47,
            "code": "rank-profile popularity inherits default {",
            "explanation": "Defines a rank-profile named 'popularity' which inherits settings from a default profile. Rank-profiles specify how documents are scored in search results.",
            "keywords": [
                "rank-profile",
                "popularity",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L48-L48",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Defines a custom function named 'popularity', which is used to compute a score based on document attributes.\n```\nfunction popularity() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L48-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L48-L48",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 48,
            "code": "function popularity() {",
            "explanation": "Defines a custom function named 'popularity', which is used to compute a score based on document attributes.",
            "keywords": [
                "function",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L49-L49",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Calculates the popularity of a document based on the ratio of clicks to impressions, providing a basic click-through rate calculation. The expression outputs zero if there are no impressions to avoid division by zero.\n```\nexpression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "expression: if (attribute(impressions) > 0, attribute(clicks) / attribute(impressions), 0)",
            "explanation": "Calculates the popularity of a document based on the ratio of clicks to impressions, providing a basic click-through rate calculation. The expression outputs zero if there are no impressions to avoid division by zero.",
            "keywords": [
                "expression",
                "if",
                "attribute",
                "impressions",
                "attribute",
                "clicks",
                "attribute",
                "impressions"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L51-L51",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Begins the definition of the first-phase ranking expression, which is the initial criteria used to score documents in search results before any further processing is applied.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L51-L51",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L51-L51",
            "namespace": "code-p",
            "start_line": 51,
            "end_line": 51,
            "code": "first-phase {",
            "explanation": "Begins the definition of the first-phase ranking expression, which is the initial criteria used to score documents in search results before any further processing is applied.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::news/app-3-searching/schemas/news.sd#L52-L52",
        "fields": {
            "title": "news/app-3-searching/schemas/news.sd",
            "doc_id": "news/app-3-searching/schemas/news.sd",
            "content": "Specifies a ranking expression combining a document's native rank with a weighted score of its popularity, enhancing results with better engagement metrics.\n```\nexpression: nativeRank + 100 * popularity\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "news/app-3-searching/schemas/news.sd#L52-L52",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/news/app-3-searching/schemas/news.sd#L52-L52",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 52,
            "code": "expression: nativeRank + 100 * popularity",
            "explanation": "Specifies a ranking expression combining a document's native rank with a weighted score of its popularity, enhancing results with better engagement metrics.",
            "keywords": [
                "expression",
                "nativeRank",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L3-L3",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines a schema for a Vespa application named 'user'. Schemas are the blueprint for how data is indexed and queried in Vespa.\n```\nschema user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema user {",
            "explanation": "Defines a schema for a Vespa application named 'user'. Schemas are the blueprint for how data is indexed and queried in Vespa.",
            "keywords": [
                "schema",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L5-L5",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Begins defining a document type named 'user' which will hold various fields representing user attributes in the Vespa application.\n```\ndocument user {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document user {",
            "explanation": "Begins defining a document type named 'user' which will hold various fields representing user attributes in the Vespa application.",
            "keywords": [
                "document",
                "user"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L7-L7",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Declares a field named 'cpc' with the data type 'float' in the user document. This field will store floating-point values.\n```\nfield cpc type float {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field cpc type float {",
            "explanation": "Declares a field named 'cpc' with the data type 'float' in the user document. This field will store floating-point values.",
            "keywords": [
                "field",
                "cpc",
                "type",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L8-L8",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Specifies that the 'cpc' field should be indexed as an attribute and included in the summary, making it searchable and retrievable.\n```\nindexing: attribute |  summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: attribute |  summary",
            "explanation": "Specifies that the 'cpc' field should be indexed as an attribute and included in the summary, making it searchable and retrievable.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L11-L11",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines a field named 'gender' with the type 'array<string>' indicating it will hold an array of string values for the gender attribute in the user document.\n```\nfield gender type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field gender type array<string> {",
            "explanation": "Defines a field named 'gender' with the type 'array<string>' indicating it will hold an array of string values for the gender attribute in the user document.",
            "keywords": [
                "field",
                "gender",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L12-L14",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Configures the 'gender' field to be indexed as an attribute and summary, with fast-search enabled for quicker search operations and the field used as a ranking filter.\n```\nindexing: attribute |  summary\n      attribute: fast-search \n      rank:filter\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L12-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L12-L14",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 14,
            "code": "indexing: attribute |  summary\n      attribute: fast-search \n      rank:filter",
            "explanation": "Configures the 'gender' field to be indexed as an attribute and summary, with fast-search enabled for quicker search operations and the field used as a ranking filter.",
            "keywords": [
                "indexing",
                "attribute",
                "summary",
                "attribute",
                "fast-search",
                "rank",
                "filter"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L17-L17",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Declares a 'hobby' field of type 'array<string>' that allows storing multiple hobbies as strings within the user document.\n```\nfield hobby type array<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "field hobby type array<string> {",
            "explanation": "Declares a 'hobby' field of type 'array<string>' that allows storing multiple hobbies as strings within the user document.",
            "keywords": [
                "field",
                "hobby",
                "type",
                "array",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L23-L23",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Specifies a field named 'age' with the data type 'int', suitable for storing integer values representing the user's age.\n```\nfield age type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "field age type int {",
            "explanation": "Specifies a field named 'age' with the data type 'int', suitable for storing integer values representing the user's age.",
            "keywords": [
                "field",
                "age",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L29-L29",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines a 'profile' field using a tensor of type 'float' with four dimensions, indicating a multi-dimensional array for representing user profiles.\n```\nfield profile type tensor<float>(x[4]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "field profile type tensor<float>(x[4]) {",
            "explanation": "Defines a 'profile' field using a tensor of type 'float' with four dimensions, indicating a multi-dimensional array for representing user profiles.",
            "keywords": [
                "field",
                "profile",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L33-L33",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Introduces a 'target' field of type 'predicate', used for complex condition storage in the user document.\n```\nfield target type predicate {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L33-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L33-L33",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 33,
            "code": "field target type predicate {",
            "explanation": "Introduces a 'target' field of type 'predicate', used for complex condition storage in the user document.",
            "keywords": [
                "field",
                "target",
                "type",
                "predicate"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L35-L37",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Sets up indexing properties for the 'target' field with an arity of 8, defining the complexity level for predicate evaluation.\n```\nindex {\n        arity: 8\n      }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L35-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L35-L37",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 37,
            "code": "index {\n        arity: 8\n      }",
            "explanation": "Sets up indexing properties for the 'target' field with an arity of 8, defining the complexity level for predicate evaluation.",
            "keywords": [
                "index",
                "arity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L41-L41",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Establishes a default ranking profile which determines how results are ranked when queries are executed against the user documents.\n```\nrank-profile default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "rank-profile default {",
            "explanation": "Establishes a default ranking profile which determines how results are ranked when queries are executed against the user documents.",
            "keywords": [
                "rank-profile",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L42-L44",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines inputs for the ranking profile, specifying a query input 'profile' that is expected to be a tensor of floats with four dimensions.\n```\ninputs {\n      query(profile) tensor<float>(x[4])\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L42-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L42-L44",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 44,
            "code": "inputs {\n      query(profile) tensor<float>(x[4])\n    }",
            "explanation": "Defines inputs for the ranking profile, specifying a query input 'profile' that is expected to be a tensor of floats with four dimensions.",
            "keywords": [
                "inputs",
                "query",
                "profile",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L45-L45",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Configures summary features for ranking, using the least significant and most significant bits of the subqueries on the 'target' field.\n```\nsummary-features: subqueries(target).lsb subqueries(target).msb\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L45-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L45-L45",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 45,
            "code": "summary-features: subqueries(target).lsb subqueries(target).msb",
            "explanation": "Configures summary features for ranking, using the least significant and most significant bits of the subqueries on the 'target' field.",
            "keywords": [
                "summary-features",
                "subqueries",
                "target",
                "lsb",
                "subqueries",
                "target",
                "msb"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L47-L49",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines a function 'cpc_score' that safely calculates a score by checking if the 'cpc' attribute is NaN, and assigning it a value of 0.0 if true.\n```\nfunction cpc_score() {\n       expression: if(isNan(attribute(cpc)) == 1.0, 0.0, attribute(cpc))\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L47-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L47-L49",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 49,
            "code": "function cpc_score() {\n       expression: if(isNan(attribute(cpc)) == 1.0, 0.0, attribute(cpc))\n    }",
            "explanation": "Defines a function 'cpc_score' that safely calculates a score by checking if the 'cpc' attribute is NaN, and assigning it a value of 0.0 if true.",
            "keywords": [
                "function",
                "cpc_score",
                "expression",
                "if",
                "isNan",
                "attribute",
                "cpc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L50-L52",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Specifies the first phase of ranking in the default ranking profile, using the 'cpc_score' function to generate rank scores.\n```\nfirst-phase {\n      expression: cpc_score()\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L50-L52",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L50-L52",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 52,
            "code": "first-phase {\n      expression: cpc_score()\n    }",
            "explanation": "Specifies the first phase of ranking in the default ranking profile, using the 'cpc_score' function to generate rank scores.",
            "keywords": [
                "first-phase",
                "expression",
                "cpc_score"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/predicate-fields/src/main/application/schemas/user.sd#L53-L55",
        "fields": {
            "title": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "doc_id": "examples/predicate-fields/src/main/application/schemas/user.sd",
            "content": "Defines the second phase of ranking where it considers the closeness between fields and profiles, adjusting the score accordingly.\n```\nsecond-phase {\n       expression: if(closeness(field, profile) > 0, cpc_score() * closeness(field, profile), cpc_score())\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/predicate-fields/src/main/application/schemas/user.sd#L53-L55",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/predicate-fields/src/main/application/schemas/user.sd#L53-L55",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 55,
            "code": "second-phase {\n       expression: if(closeness(field, profile) > 0, cpc_score() * closeness(field, profile), cpc_score())\n    }",
            "explanation": "Defines the second phase of ranking where it considers the closeness between fields and profiles, adjusting the score accordingly.",
            "keywords": [
                "second-phase",
                "expression",
                "if",
                "closeness",
                "field",
                "profile",
                "cpc_score",
                "closeness",
                "field",
                "profile",
                "cpc_score"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L2-L2",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a new schema named 'doc'. This is the top-level element in a Vespa application schema, indicating that a new document type will be specified within.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema doc {",
            "explanation": "Defines a new schema named 'doc'. This is the top-level element in a Vespa application schema, indicating that a new document type will be specified within.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Begins the definition of a document type named 'doc'. This document type will have a set of fields that can be used for indexing and retrieval.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document doc {",
            "explanation": "Begins the definition of a document type named 'doc'. This document type will have a set of fields that can be used for indexing and retrieval.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L5-L7",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a field named 'isFlower' of type 'string'. The 'indexing' keyword specifies that this field is included both in the summary and as an attribute, allowing it to be searchable and retrievable post-search.\n```\nfield isFlower type string {\n    indexing: summary  | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L5-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L5-L7",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 7,
            "code": "field isFlower type string {\n    indexing: summary  | attribute\n}",
            "explanation": "Defines a field named 'isFlower' of type 'string'. The 'indexing' keyword specifies that this field is included both in the summary and as an attribute, allowing it to be searchable and retrievable post-search.",
            "keywords": [
                "field",
                "isFlower",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L8-L10",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Specifies a field 'name' with data type 'string'. This field is set to be indexed both in summary and as an attribute, making it accessible for search and retrieval operations.\n```\nfield name type string {\n    indexing: summary  | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L8-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L8-L10",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 10,
            "code": "field name type string {\n    indexing: summary  | attribute\n}",
            "explanation": "Specifies a field 'name' with data type 'string'. This field is set to be indexed both in summary and as an attribute, making it accessible for search and retrieval operations.",
            "keywords": [
                "field",
                "name",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L11-L13",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Introduces a 'feedback' field with data type 'float'. It is indexed for both summary retrieval and attribute searching, allowing its use in ranking and retrieval operations.\n```\nfield feedback type float {\n    indexing: summary  | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field feedback type float {\n    indexing: summary  | attribute\n}",
            "explanation": "Introduces a 'feedback' field with data type 'float'. It is indexed for both summary retrieval and attribute searching, allowing its use in ranking and retrieval operations.",
            "keywords": [
                "field",
                "feedback",
                "type",
                "float",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L14-L16",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a 'flowercategory' field with type 'tensor<float>(d0[1],d1[3])'. This tensor field is indexed as an attribute and included in the summary, enabling complex retrieval based on multidimensional data.\n```\nfield flowercategory type tensor<float>(d0[1],d1[3]) {\n    indexing: attribute | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L14-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L14-L16",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 16,
            "code": "field flowercategory type tensor<float>(d0[1],d1[3]) {\n    indexing: attribute | summary\n}",
            "explanation": "Defines a 'flowercategory' field with type 'tensor<float>(d0[1],d1[3])'. This tensor field is indexed as an attribute and included in the summary, enabling complex retrieval based on multidimensional data.",
            "keywords": [
                "field",
                "flowercategory",
                "type",
                "tensor",
                "float",
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L19-L19",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a ranking profile named 'Base', which includes configurations for input and potentially several ranking expressions or models.\n```\nrank-profile Base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "rank-profile Base {",
            "explanation": "Defines a ranking profile named 'Base', which includes configurations for input and potentially several ranking expressions or models.",
            "keywords": [
                "rank-profile",
                "Base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L20-L22",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Specifies an input named 'myTensor' for the ranking profile 'Base', with a tensor type 'tensor<float>(d0[1],d1[4])'. This input can be used in ranking expressions and models.\n```\ninputs {\n    query(myTensor) tensor<float>(d0[1],d1[4])\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L20-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L20-L22",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 22,
            "code": "inputs {\n    query(myTensor) tensor<float>(d0[1],d1[4])\n}",
            "explanation": "Specifies an input named 'myTensor' for the ranking profile 'Base', with a tensor type 'tensor<float>(d0[1],d1[4])'. This input can be used in ranking expressions and models.",
            "keywords": [
                "inputs",
                "query",
                "myTensor",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L23-L27",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines an ONNX model named 'my_onnx_model', specifying the ONNX model file path as 'models/Network.onnx'. The model takes the 'myTensor' query input and outputs to 'outputTensor'.\n```\nonnx-model my_onnx_model {\n    file: models/Network.onnx\n    input \"input\": query(myTensor)\n    output \"output\": outputTensor\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L23-L27",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L23-L27",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 27,
            "code": "onnx-model my_onnx_model {\n    file: models/Network.onnx\n    input \"input\": query(myTensor)\n    output \"output\": outputTensor\n}",
            "explanation": "Defines an ONNX model named 'my_onnx_model', specifying the ONNX model file path as 'models/Network.onnx'. The model takes the 'myTensor' query input and outputs to 'outputTensor'.",
            "keywords": [
                "onnx-model",
                "my_onnx_model",
                "file",
                "models/Network.onnx",
                "input",
                "query",
                "myTensor",
                "output",
                "outputTensor"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L30-L30",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a ranking profile named 'myRank' that inherits from the 'Base' ranking profile. This allows 'myRank' to use or extend the definitions in 'Base'.\n```\nrank-profile myRank inherits Base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L30-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L30-L30",
            "namespace": "code-p",
            "start_line": 30,
            "end_line": 30,
            "code": "rank-profile myRank inherits Base {",
            "explanation": "Defines a ranking profile named 'myRank' that inherits from the 'Base' ranking profile. This allows 'myRank' to use or extend the definitions in 'Base'.",
            "keywords": [
                "rank-profile",
                "myRank",
                "inherits",
                "Base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L31-L33",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Specifies the first phase ranking expression for 'myRank', which computes the sum of the element-wise product between the ONNX model's 'outputTensor' and the 'flowercategory' attribute. This influences document ranking based on this calculation.\n```\nfirst-phase {\n    expression: sum( onnx(my_onnx_model).outputTensor * attribute(flowercategory) )\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L31-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L31-L33",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 33,
            "code": "first-phase {\n    expression: sum( onnx(my_onnx_model).outputTensor * attribute(flowercategory) )\n}",
            "explanation": "Specifies the first phase ranking expression for 'myRank', which computes the sum of the element-wise product between the ONNX model's 'outputTensor' and the 'flowercategory' attribute. This influences document ranking based on this calculation.",
            "keywords": [
                "first-phase",
                "expression",
                "sum",
                "onnx",
                "my_onnx_model",
                "outputTensor",
                "attribute",
                "flowercategory"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L36-L36",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Defines a ranking profile named 'myRankwithpenalty' that inherits the configuration from the 'Base' profile. This allows additional ranking logic to be added specifically for this profile.\n```\nrank-profile myRankwithpenalty inherits Base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "rank-profile myRankwithpenalty inherits Base {",
            "explanation": "Defines a ranking profile named 'myRankwithpenalty' that inherits the configuration from the 'Base' profile. This allows additional ranking logic to be added specifically for this profile.",
            "keywords": [
                "rank-profile",
                "myRankwithpenalty",
                "inherits",
                "Base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/model-deployment/schemas/doc.sd#L37-L44",
        "fields": {
            "title": "examples/model-deployment/schemas/doc.sd",
            "doc_id": "examples/model-deployment/schemas/doc.sd",
            "content": "Configures the first-phase ranking expression for 'myRankwithpenalty'. It extends the 'myRank' expression by multiplying with 'feedback' if it is positive, introducing a penalty or bonus in ranking based on 'feedback'.\n```\nfirst-phase {\n    expression {\n        sum(\n            onnx(my_onnx_model).outputTensor * attribute(flowercategory) *\n            if (attribute(feedback) > 0, attribute(feedback), 1)\n            )\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/model-deployment/schemas/doc.sd#L37-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/model-deployment/schemas/doc.sd#L37-L44",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 44,
            "code": "first-phase {\n    expression {\n        sum(\n            onnx(my_onnx_model).outputTensor * attribute(flowercategory) *\n            if (attribute(feedback) > 0, attribute(feedback), 1)\n            )\n    }\n}",
            "explanation": "Configures the first-phase ranking expression for 'myRankwithpenalty'. It extends the 'myRank' expression by multiplying with 'feedback' if it is positive, introducing a penalty or bonus in ranking based on 'feedback'.",
            "keywords": [
                "first-phase",
                "expression",
                "sum",
                "onnx",
                "my_onnx_model",
                "outputTensor",
                "attribute",
                "flowercategory",
                "if",
                "attribute",
                "feedback"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L3-L3",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Begins the definition of a schema named 'purchase'. This schema will group together all the related document types and configurations used for indexing and search retrieval.\n```\nschema purchase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema purchase {",
            "explanation": "Begins the definition of a schema named 'purchase'. This schema will group together all the related document types and configurations used for indexing and search retrieval.",
            "keywords": [
                "schema",
                "purchase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L5-L5",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Starts the declaration of a document type named 'purchase'. This document type will include various fields that represent the characteristics of a purchase, such as date, price, and item.\n```\ndocument purchase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document purchase {",
            "explanation": "Starts the declaration of a document type named 'purchase'. This document type will include various fields that represent the characteristics of a purchase, such as date, price, and item.",
            "keywords": [
                "document",
                "purchase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L7-L9",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Defines a field named 'date' with a type 'long'. It is indexed both for summary and attributes, enabling its use in search operations and retrieval summaries.\n```\nfield date type long {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field date type long {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named 'date' with a type 'long'. It is indexed both for summary and attributes, enabling its use in search operations and retrieval summaries.",
            "keywords": [
                "field",
                "date",
                "type",
                "long",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L11-L13",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Describes a field named 'price' of type 'int'. It has indexing settings for both summary and attributes, allowing it to be used in search queries and document retrieval summaries.\n```\nfield price type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field price type int {\n    indexing: summary | attribute\n}",
            "explanation": "Describes a field named 'price' of type 'int'. It has indexing settings for both summary and attributes, allowing it to be used in search queries and document retrieval summaries.",
            "keywords": [
                "field",
                "price",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L15-L17",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Represents a field named 'tax' with a type 'double'. Similar to other fields, it's indexed for summary and attributes, making it accessible in search and retrieval operations.\n```\nfield tax type double {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field tax type double {\n    indexing: summary | attribute\n}",
            "explanation": "Represents a field named 'tax' with a type 'double'. Similar to other fields, it's indexed for summary and attributes, making it accessible in search and retrieval operations.",
            "keywords": [
                "field",
                "tax",
                "type",
                "double",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L19-L21",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Declares a field named 'item' with a 'string' type. This field is indexed to be available as both a summary and attribute field, useful in querying and presentation.\n```\nfield item type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field item type string {\n    indexing: summary | attribute\n}",
            "explanation": "Declares a field named 'item' with a 'string' type. This field is indexed to be available as both a summary and attribute field, useful in querying and presentation.",
            "keywords": [
                "field",
                "item",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L23-L25",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Specifies a field named 'customer' of type 'string'. It is indexed as both a summary and attribute, allowing for search operations and retrieval inclusion.\n```\nfield customer type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L23-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L23-L25",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 25,
            "code": "field customer type string {\n    indexing: summary | attribute\n}",
            "explanation": "Specifies a field named 'customer' of type 'string'. It is indexed as both a summary and attribute, allowing for search operations and retrieval inclusion.",
            "keywords": [
                "field",
                "customer",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L29-L29",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Defines a rank profile named 'song' that inherits from a default profile. Rank profiles are used to influence the ranking of search results, providing custom or inherited ranking functions.\n```\nrank-profile song inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L29-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L29-L29",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 29,
            "code": "rank-profile song inherits default {",
            "explanation": "Defines a rank profile named 'song' that inherits from a default profile. Rank profiles are used to influence the ranking of search results, providing custom or inherited ranking functions.",
            "keywords": [
                "rank-profile",
                "song",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/part-purchases-demo/schemas/purchase.sd#L31-L33",
        "fields": {
            "title": "examples/part-purchases-demo/schemas/purchase.sd",
            "doc_id": "examples/part-purchases-demo/schemas/purchase.sd",
            "content": "Within the 'song' rank-profile, this snippet specifies a 'first-phase' ranking expression. It utilizes 'nativeRank' with 'price' and 'item' fields to compute relevance scores during the initial phase of search result ranking.\n```\nfirst-phase {\n    expression:nativeRank(price,item)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/part-purchases-demo/schemas/purchase.sd#L31-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/part-purchases-demo/schemas/purchase.sd#L31-L33",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 33,
            "code": "first-phase {\n    expression:nativeRank(price,item)\n}",
            "explanation": "Within the 'song' rank-profile, this snippet specifies a 'first-phase' ranking expression. It utilizes 'nativeRank' with 'price' and 'item' fields to compute relevance scores during the initial phase of search result ranking.",
            "keywords": [
                "first-phase",
                "expression",
                "nativeRank",
                "price",
                "item"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "The 'search music' line defines the beginning of a schema declaration for indexing and searching documents related to music. It sets the context for all other elements defined within its block.\n```\nsearch music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "search music {",
            "explanation": "The 'search music' line defines the beginning of a schema declaration for indexing and searching documents related to music. It sets the context for all other elements defined within its block.",
            "keywords": [
                "search",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L5-L5",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "This line declares a document type named 'music'. It serves as a blueprint for all fields, indexing strategies, and other configurations related to 'music' documents within the schema.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document music {",
            "explanation": "This line declares a document type named 'music'. It serves as a blueprint for all fields, indexing strategies, and other configurations related to 'music' documents within the schema.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L7-L9",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Defines a field 'artist' of type 'string'. The field will be both summarized and indexed, meaning it can be used in search queries and retrieved in result summaries.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field 'artist' of type 'string'. The field will be both summarized and indexed, meaning it can be used in search queries and retrieved in result summaries.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L11-L13",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Specifies a field 'artistId' of type 'string'. It will be stored as an attribute for fast access and summarized for retrieval in query results.\n```\nfield artistId type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field artistId type string {\n    indexing: summary | attribute\n}",
            "explanation": "Specifies a field 'artistId' of type 'string'. It will be stored as an attribute for fast access and summarized for retrieval in query results.",
            "keywords": [
                "field",
                "artistId",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L15-L17",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Declares a 'title' field of type 'string'. Like the 'artist' field, it is both summarized and indexed, making it searchable and retrievable in query outputs.\n```\nfield title type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field title type string {\n    indexing: summary | index\n}",
            "explanation": "Declares a 'title' field of type 'string'. Like the 'artist' field, it is both summarized and indexed, making it searchable and retrievable in query outputs.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L19-L21",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Defines an 'album' field of type 'string'. This field is set to be indexed, allowing it to be used in search queries, but it will not be included in result summaries.\n```\nfield album type string {\n    indexing: index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field album type string {\n    indexing: index\n}",
            "explanation": "Defines an 'album' field of type 'string'. This field is set to be indexed, allowing it to be used in search queries, but it will not be included in result summaries.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L23-L25",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Specifies a 'duration' field of type 'int'. This field is only summarized, meaning its value can be included in query result outputs but not used for search queries.\n```\nfield duration type int {\n    indexing: summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L23-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L23-L25",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 25,
            "code": "field duration type int {\n    indexing: summary\n}",
            "explanation": "Specifies a 'duration' field of type 'int'. This field is only summarized, meaning its value can be included in query result outputs but not used for search queries.",
            "keywords": [
                "field",
                "duration",
                "type",
                "int",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L27-L29",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "The 'year' field is of type 'int' and is configured for summary and attribute indexing. It can be retrieved in search results and accessed quickly as an attribute value.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L27-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L27-L29",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 29,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "The 'year' field is of type 'int' and is configured for summary and attribute indexing. It can be retrieved in search results and accessed quickly as an attribute value.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L31-L33",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Defines a 'popularity' field of type 'int'. The field is indexed as both a summary and an attribute, allowing for fast access and inclusion in search results.\n```\nfield popularity type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L31-L33",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L31-L33",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 33,
            "code": "field popularity type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'popularity' field of type 'int'. The field is indexed as both a summary and an attribute, allowing for fast access and inclusion in search results.",
            "keywords": [
                "field",
                "popularity",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L38-L40",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "The 'default' fieldset groups together the fields 'artist', 'title', and 'album'. This allows these fields to be referenced collectively in search profiles or queries.\n```\nfieldset default {\n    fields: artist, title, album\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L38-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L38-L40",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 40,
            "code": "fieldset default {\n    fields: artist, title, album\n}",
            "explanation": "The 'default' fieldset groups together the fields 'artist', 'title', and 'album'. This allows these fields to be referenced collectively in search profiles or queries.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "artist",
                "title",
                "album"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L43-L43",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "Defines a rank-profile named 'song' that inherits configurations from the 'default' profile. Rank profiles determine how search results are scored and ranked.\n```\nrank-profile song inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L43-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L43-L43",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 43,
            "code": "rank-profile song inherits default {",
            "explanation": "Defines a rank-profile named 'song' that inherits configurations from the 'default' profile. Rank profiles determine how search results are scored and ranked.",
            "keywords": [
                "rank-profile",
                "song",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L45-L47",
        "fields": {
            "title": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "doc_id": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd",
            "content": "This block specifies the first-phase ranking expression for the 'song' rank-profile. It uses 'nativeRank' on 'artist', 'title', and 'album' fields, and adds a conditional expression to include 'popularity' if it is valid (not NaN).\n```\nfirst-phase {\n    expression:nativeRank(artist,title,album) + if(isNan(attribute(popularity)) == 1, 0,attribute(popularity))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L45-L47",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/http-api-using-request-handlers-and-processors/src/main/application/schemas/music.sd#L45-L47",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 47,
            "code": "first-phase {\n    expression:nativeRank(artist,title,album) + if(isNan(attribute(popularity)) == 1, 0,attribute(popularity))\n}",
            "explanation": "This block specifies the first-phase ranking expression for the 'song' rank-profile. It uses 'nativeRank' on 'artist', 'title', and 'album' fields, and adds a conditional expression to include 'popularity' if it is valid (not NaN).",
            "keywords": [
                "first-phase",
                "expression",
                "nativeRank",
                "artist",
                "title",
                "album",
                "isNan",
                "attribute",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/lyrics.sd#L3-L5",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "content": "This code snippet begins the definition of a schema called 'lyrics'. Within this schema, a document type named 'lyrics' is defined.\n```\nschema lyrics {\n\n    document lyrics {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/lyrics.sd#L3-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/lyrics.sd#L3-L5",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 5,
            "code": "schema lyrics {\n\n    document lyrics {",
            "explanation": "This code snippet begins the definition of a schema called 'lyrics'. Within this schema, a document type named 'lyrics' is defined.",
            "keywords": [
                "schema",
                "lyrics",
                "document",
                "lyrics"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/lyrics.sd#L7-L7",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "content": "A field named 'song_lyrics' of type 'string' is defined within the lyrics document. This field is intended to store song lyrics in string format.\n```\nfield song_lyrics type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/lyrics.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/lyrics.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field song_lyrics type string {",
            "explanation": "A field named 'song_lyrics' of type 'string' is defined within the lyrics document. This field is intended to store song lyrics in string format.",
            "keywords": [
                "field",
                "song_lyrics",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/lyrics.sd#L8-L8",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/lyrics.sd",
            "content": "This line specifies the indexing configuration for the 'song_lyrics' field. The field is marked for both summary and index, meaning it can be retrieved in search hits and contributes to full-text search capabilities.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/lyrics.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/lyrics.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "This line specifies the indexing configuration for the 'song_lyrics' field. The field is marked for both summary and index, meaning it can be retrieved in search hits and contributes to full-text search capabilities.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Defines a new schema called 'music' which will be used to structure and store data in a Vespa application. A schema is a way to define the shape, types, and various properties of data documents to be indexed.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema music {",
            "explanation": "Defines a new schema called 'music' which will be used to structure and store data in a Vespa application. A schema is a way to define the shape, types, and various properties of data documents to be indexed.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L5-L5",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Defines a document type named 'music' within the 'music' schema. This document type will define the fields and properties of the data related to music that will be stored and indexed.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document music {",
            "explanation": "Defines a document type named 'music' within the 'music' schema. This document type will define the fields and properties of the data related to music that will be stored and indexed.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L7-L9",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Creates a field named 'artist' of type 'string' in the 'music' document. The indexing properties specify that the field should be summarized and indexed for retrieval.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Creates a field named 'artist' of type 'string' in the 'music' document. The indexing properties specify that the field should be summarized and indexed for retrieval.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L11-L13",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Creates a field named 'album' of type 'string' in the 'music' document. It is configured to be both summarized and indexed, allowing it to be quickly retrieved and included in result summaries.\n```\nfield album type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field album type string {\n    indexing: summary | index\n}",
            "explanation": "Creates a field named 'album' of type 'string' in the 'music' document. It is configured to be both summarized and indexed, allowing it to be quickly retrieved and included in result summaries.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L15-L17",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Defines a field named 'year' with an integer type. It is configured so that its value can be used both in summaries and as an attribute, which allows for efficient searching and filtering operations.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named 'year' with an integer type. It is configured so that its value can be used both in summaries and as an attribute, which allows for efficient searching and filtering operations.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L19-L21",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Defines a 'category_scores' field with a tensor type using a floating point number. The tensor is indexed as both a summary and an attribute, allowing for complex numerical operations on the 'cat' dimensions of the tensor.\n```\nfield category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'category_scores' field with a tensor type using a floating point number. The tensor is indexed as both a summary and an attribute, allowing for complex numerical operations on the 'cat' dimensions of the tensor.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor",
                "float",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L23-L25",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "This field named 'lyrics' is of type 'string'. It is designed to be included in both the summary and index, making it available for searching and displaying in results.\n```\nfield lyrics type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L23-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L23-L25",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 25,
            "code": "field lyrics type string {\n    indexing: summary | index\n}",
            "explanation": "This field named 'lyrics' is of type 'string'. It is designed to be included in both the summary and index, making it available for searching and displaying in results.",
            "keywords": [
                "field",
                "lyrics",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L27-L29",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Defines a 'producttype' field which is of type 'string'. It is set to be used in summaries, but not indexed, indicating it is retrieved but not searchable.\n```\nfield producttype type string {\n    indexing: summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L27-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L27-L29",
            "namespace": "code-p",
            "start_line": 27,
            "end_line": 29,
            "code": "field producttype type string {\n    indexing: summary\n}",
            "explanation": "Defines a 'producttype' field which is of type 'string'. It is set to be used in summaries, but not indexed, indicating it is retrieved but not searchable.",
            "keywords": [
                "field",
                "producttype",
                "type",
                "string",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/document-processing/src/main/application/schemas/music.sd#L31-L34",
        "fields": {
            "title": "examples/document-processing/src/main/application/schemas/music.sd",
            "doc_id": "examples/document-processing/src/main/application/schemas/music.sd",
            "content": "Declares a 'producttypetokens' field which is an array of strings. This field is both summarized and indexed, with exact matching enabled, allowing precise searches on the tokens within this field.\n```\nfield producttypetokens type array<string> {\n    indexing: summary | index\n    match   : exact\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/document-processing/src/main/application/schemas/music.sd#L31-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/document-processing/src/main/application/schemas/music.sd#L31-L34",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 34,
            "code": "field producttypetokens type array<string> {\n    indexing: summary | index\n    match   : exact\n}",
            "explanation": "Declares a 'producttypetokens' field which is an array of strings. This field is both summarized and indexed, with exact matching enabled, allowing precise searches on the tokens within this field.",
            "keywords": [
                "field",
                "producttypetokens",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "index",
                "match",
                "exact"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L2-L2",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines the start of a schema named \"music\" which will describe the structure and behavior of a Vespa application document related to music data.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema music {",
            "explanation": "Defines the start of a schema named \"music\" which will describe the structure and behavior of a Vespa application document related to music data.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a document type named \"music\" within the \"music\" schema. This holds various fields that represent attributes of a music data entry.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document music {",
            "explanation": "Defines a document type named \"music\" within the \"music\" schema. This holds various fields that represent attributes of a music data entry.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L4-L6",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"artist\" of \"type\" string, with indexing mechanisms that store it both in summary and index formats for retrieval and display.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L4-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L4-L6",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 6,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a \"field\" named \"artist\" of \"type\" string, with indexing mechanisms that store it both in summary and index formats for retrieval and display.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L8-L10",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"artistId\" of \"type\" string that is stored in the summary and as an attribute for retrieval, possibly used for unique identification of artists.\n```\nfield artistId type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L8-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L8-L10",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 10,
            "code": "field artistId type string {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a \"field\" named \"artistId\" of \"type\" string that is stored in the summary and as an attribute for retrieval, possibly used for unique identification of artists.",
            "keywords": [
                "field",
                "artistId",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L12-L14",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"title\" of \"type\" string, indexed both for summary display and retrieval through search queries.\n```\nfield title type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L12-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L12-L14",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 14,
            "code": "field title type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a \"field\" named \"title\" of \"type\" string, indexed both for summary display and retrieval through search queries.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L16-L18",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"album\" of \"type\" string that is indexed to be searchable but not stored in summary format.\n```\nfield album type string {\n    indexing: index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L16-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L16-L18",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 18,
            "code": "field album type string {\n    indexing: index\n}",
            "explanation": "Defines a \"field\" named \"album\" of \"type\" string that is indexed to be searchable but not stored in summary format.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L20-L22",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"duration\" of \"type\" int, indexed for storage as a summary field possibly indicating the length of a music track.\n```\nfield duration type int {\n    indexing: summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L20-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L20-L22",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 22,
            "code": "field duration type int {\n    indexing: summary\n}",
            "explanation": "Defines a \"field\" named \"duration\" of \"type\" int, indexed for storage as a summary field possibly indicating the length of a music track.",
            "keywords": [
                "field",
                "duration",
                "type",
                "int",
                "indexing",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L24-L26",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"year\", indicating the release year of the music track, stored both as a summary and an attribute for detailed data retrieval.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L24-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L24-L26",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 26,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a \"field\" named \"year\", indicating the release year of the music track, stored both as a summary and an attribute for detailed data retrieval.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L28-L30",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"field\" named \"popularity\" of \"type\" int, indexed for detailed data retrieval and summary display, possibly reflecting the track's popularity rating.\n```\nfield popularity type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L28-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L28-L30",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 30,
            "code": "field popularity type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a \"field\" named \"popularity\" of \"type\" int, indexed for detailed data retrieval and summary display, possibly reflecting the track's popularity rating.",
            "keywords": [
                "field",
                "popularity",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L33-L35",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"fieldset\" named \"default\" which includes the fields: \"artist\", \"title\", and \"album\". This is a grouping mechanism to facilitate common indexing or retrieval operations.\n```\nfieldset default {\n    fields: artist, title, album\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L33-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L33-L35",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 35,
            "code": "fieldset default {\n    fields: artist, title, album\n}",
            "explanation": "Defines a \"fieldset\" named \"default\" which includes the fields: \"artist\", \"title\", and \"album\". This is a grouping mechanism to facilitate common indexing or retrieval operations.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "artist",
                "title",
                "album"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L37-L37",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Starts the definition of a ranking profile named \"song\" that inherits the default properties, used to rank search results based on certain criteria.\n```\nrank-profile song inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "rank-profile song inherits default {",
            "explanation": "Starts the definition of a ranking profile named \"song\" that inherits the default properties, used to rank search results based on certain criteria.",
            "keywords": [
                "rank-profile",
                "song",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L38-L40",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Defines a \"first-phase\" ranking expression combining the native rank of fields \"artist\", \"title\", and \"album\" with the \"popularity\" attribute if it's not NaN, used for determining the order of search results.\n```\nfirst-phase {\n    expression:nativeRank(artist,title,album) + if(isNan(attribute(popularity)) == 1, 0,attribute(popularity))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L38-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L38-L40",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 40,
            "code": "first-phase {\n    expression:nativeRank(artist,title,album) + if(isNan(attribute(popularity)) == 1, 0,attribute(popularity))\n}",
            "explanation": "Defines a \"first-phase\" ranking expression combining the native rank of fields \"artist\", \"title\", and \"album\" with the \"popularity\" attribute if it's not NaN, used for determining the order of search results.",
            "keywords": [
                "first-phase",
                "expression",
                "nativeRank",
                "artist",
                "title",
                "album",
                "if",
                "isNan",
                "attribute",
                "popularity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/basic-search-on-gke/schemas/music.sd#L6-L6",
        "fields": {
            "title": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "doc_id": "examples/operations/basic-search-on-gke/schemas/music.sd",
            "content": "Marks the end of the schema definition for the music schema in the Vespa application.\n```\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/basic-search-on-gke/schemas/music.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/basic-search-on-gke/schemas/music.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "}",
            "explanation": "Marks the end of the schema definition for the music schema in the Vespa application.",
            "keywords": []
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Begins the definition of a schema named 'music'.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema music {",
            "explanation": "Begins the definition of a schema named 'music'.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L5-L5",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Starts the declaration of a document type 'music' within the previously defined schema 'music'.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document music {",
            "explanation": "Starts the declaration of a document type 'music' within the previously defined schema 'music'.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L7-L9",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Defines a field named 'artist' of type 'string' with indexing as both 'summary' and 'index', allowing it to be retrieved and used in search queries.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named 'artist' of type 'string' with indexing as both 'summary' and 'index', allowing it to be retrieved and used in search queries.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L11-L13",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Describes a 'album' field of type 'string' which is indexed for both summary response and search functionalities.\n```\nfield album type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field album type string {\n    indexing: summary | index\n}",
            "explanation": "Describes a 'album' field of type 'string' which is indexed for both summary response and search functionalities.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L15-L17",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Specifies a 'year' field of type 'int', with indexing capabilities as 'summary' and stored as an 'attribute' for fast access.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Specifies a 'year' field of type 'int', with indexing capabilities as 'summary' and stored as an 'attribute' for fast access.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode/schemas/music.sd#L19-L21",
        "fields": {
            "title": "examples/operations/multinode/schemas/music.sd",
            "doc_id": "examples/operations/multinode/schemas/music.sd",
            "content": "Defines a 'category_scores' field of type 'tensor' with float values, indexed for summary retrieval and stored as an attribute. It utilizes a mapping of categorical dimensions.\n```\nfield category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode/schemas/music.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode/schemas/music.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a 'category_scores' field of type 'tensor' with float values, indexed for summary retrieval and stored as an attribute. It utilizes a mapping of categorical dimensions.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor",
                "float",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Defines a schema named 'music' which outlines the structure and fields expected for documents of this type in the Vespa application.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema music {",
            "explanation": "Defines a schema named 'music' which outlines the structure and fields expected for documents of this type in the Vespa application.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L5-L5",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Declares a document type named 'music', indicating that the subsequent field definitions pertain to this document model, used in the Vespa system for indexing and retrieval purposes.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document music {",
            "explanation": "Declares a document type named 'music', indicating that the subsequent field definitions pertain to this document model, used in the Vespa system for indexing and retrieval purposes.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L7-L7",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Specifies a field named 'artist' in the music document, which is of type 'string'. This field will store the name of the artist associated with the music document.\n```\nfield artist type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field artist type string {",
            "explanation": "Specifies a field named 'artist' in the music document, which is of type 'string'. This field will store the name of the artist associated with the music document.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L8-L8",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Determines the indexing method for the 'artist' field, indicating that it will be available both in the 'summary' for fast retrieval and in the 'index' for searchability.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "Determines the indexing method for the 'artist' field, indicating that it will be available both in the 'summary' for fast retrieval and in the 'index' for searchability.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L11-L11",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Defines a field named 'album' in the music document, with the data type specified as 'string'. This field is intended to store the name of the music album.\n```\nfield album type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L11-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L11-L11",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 11,
            "code": "field album type string {",
            "explanation": "Defines a field named 'album' in the music document, with the data type specified as 'string'. This field is intended to store the name of the music album.",
            "keywords": [
                "field",
                "album",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L8-L8",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Indicates that the 'album' field should be indexed, making it searchable and retrievable quickly as part of the 'summary'.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "Indicates that the 'album' field should be indexed, making it searchable and retrievable quickly as part of the 'summary'.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L15-L15",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Specifies a 'year' field in the music document, designed to hold integer values representing the release year of the music.\n```\nfield year type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "field year type int {",
            "explanation": "Specifies a 'year' field in the music document, designed to hold integer values representing the release year of the music.",
            "keywords": [
                "field",
                "year",
                "type",
                "int"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L16-L16",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Configures the 'year' field to be indexed as both 'summary' and 'attribute', allowing quick retrieval and usage in attribute queries.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "indexing: summary | attribute",
            "explanation": "Configures the 'year' field to be indexed as both 'summary' and 'attribute', allowing quick retrieval and usage in attribute queries.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L19-L19",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Defines the 'category_scores' field as a tensor of type 'float' with a single dimension 'cat', designed to store scores across different categories for the music item.\n```\nfield category_scores type tensor<float>(cat{}) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "field category_scores type tensor<float>(cat{}) {",
            "explanation": "Defines the 'category_scores' field as a tensor of type 'float' with a single dimension 'cat', designed to store scores across different categories for the music item.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor",
                "float",
                "cat"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/schemas/music.sd#L16-L16",
        "fields": {
            "title": "examples/operations/multinode-HA/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/schemas/music.sd",
            "content": "Specifies the 'category_scores' field should be accessible via 'summary' for fast retrieval and as an 'attribute' for advanced query processing.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/schemas/music.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/schemas/music.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "indexing: summary | attribute",
            "explanation": "Specifies the 'category_scores' field should be accessible via 'summary' for fast retrieval and as an 'attribute' for advanced query processing.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L3-L3",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Defines a schema named \"music\" in the Vespa application. A schema is a blueprint for a class of documents within Vespa used to manage and retrieve data.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema music {",
            "explanation": "Defines a schema named \"music\" in the Vespa application. A schema is a blueprint for a class of documents within Vespa used to manage and retrieve data.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L5-L5",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Starts the definition of a \"music\" document within the \"music\" schema. Documents are the primary entities stored within Vespa, consisting of various fields.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document music {",
            "explanation": "Starts the definition of a \"music\" document within the \"music\" schema. Documents are the primary entities stored within Vespa, consisting of various fields.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L7-L9",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Defines a field named \"artist\" of type \"string\" in the \"music\" document. It specifies that this field should be both stored for summary retrieval and indexed for fast searching.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named \"artist\" of type \"string\" in the \"music\" document. It specifies that this field should be both stored for summary retrieval and indexed for fast searching.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L11-L13",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Defines a field named \"album\" of type \"string\" in the \"music\" document. The field is configured to be included in search indices and available for summary retrieval.\n```\nfield album type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field album type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named \"album\" of type \"string\" in the \"music\" document. The field is configured to be included in search indices and available for summary retrieval.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L15-L17",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Defines a field called \"year\" of type \"int\" in the \"music\" document. The field is configured to be stored as an attribute for efficient filtering and as a part of summary data for retrieval.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field called \"year\" of type \"int\" in the \"music\" document. The field is configured to be stored as an attribute for efficient filtering and as a part of summary data for retrieval.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/operations/multinode-HA/gke/schemas/music.sd#L19-L21",
        "fields": {
            "title": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "doc_id": "examples/operations/multinode-HA/gke/schemas/music.sd",
            "content": "Defines a field \"category_scores\" as a tensor of float type with a single dimension \"cat\" that is dynamically sized. The field is stored as an attribute for efficient operations and available in summary responses.\n```\nfield category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/operations/multinode-HA/gke/schemas/music.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/operations/multinode-HA/gke/schemas/music.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field \"category_scores\" as a tensor of float type with a single dimension \"cat\" that is dynamically sized. The field is stored as an attribute for efficient operations and available in summary responses.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor<float>(cat{})",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L2-L2",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Defines a schema named 'base' for the Vespa application, which is a blueprint for the data structure and how it will be indexed and queried.\n```\nschema base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema base {",
            "explanation": "Defines a schema named 'base' for the Vespa application, which is a blueprint for the data structure and how it will be indexed and queried.",
            "keywords": [
                "schema",
                "base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L4-L4",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Defines a document type 'base' within the schema, which specifies the structure of the data being indexed.\n```\ndocument base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "    document base {",
            "explanation": "Defines a document type 'base' within the schema, which specifies the structure of the data being indexed.",
            "keywords": [
                "document",
                "base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L6-L6",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Declares a field named 'id' of type 'string'. This field will store string data, usually a unique identifier for each document.\n```\nfield id type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "        field id type string {",
            "explanation": "Declares a field named 'id' of type 'string'. This field will store string data, usually a unique identifier for each document.",
            "keywords": [
                "field",
                "id",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L7-L7",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Specifies the indexing settings for the 'id' field, indicating it should be available in summary and as an attribute. This enhances retrieval and filtering capabilities.\n```\nindexing: summary | attribute\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "            indexing: summary | attribute",
            "explanation": "Specifies the indexing settings for the 'id' field, indicating it should be available in summary and as an attribute. This enhances retrieval and filtering capabilities.",
            "keywords": [
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L8-L8",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Indicates that the 'id' field is used as a filter in ranking, impacting the search process by refining results based on specific criteria.\n```\nrank: filter\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "            rank: filter",
            "explanation": "Indicates that the 'id' field is used as a filter in ranking, impacting the search process by refining results based on specific criteria.",
            "keywords": [
                "rank",
                "filter"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L9-L9",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Enables fast-search for the 'id' field by making it an attribute, which allows for quicker search operations.\n```\nattribute: fast-search\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "            attribute: fast-search",
            "explanation": "Enables fast-search for the 'id' field by making it an attribute, which allows for quicker search operations.",
            "keywords": [
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L12-L12",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Declares a field named 'start' of type 'long', which is used for storing long integer values such as timestamps or counters.\n```\nfield start type long {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "        field start type long {",
            "explanation": "Declares a field named 'start' of type 'long', which is used for storing long integer values such as timestamps or counters.",
            "keywords": [
                "field",
                "start",
                "type",
                "long"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/base.sd#L18-L18",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/base.sd",
            "doc_id": "examples/joins/src/main/application/schemas/base.sd",
            "content": "Declares a field named 'end' of type 'long', similar to 'start', used for storing long integer values.\n```\nfield end type long {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/base.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/base.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "        field end type long {",
            "explanation": "Declares a field named 'end' of type 'long', similar to 'start', used for storing long integer values.",
            "keywords": [
                "field",
                "end",
                "type",
                "long"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L2-L2",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "This line begins the definition of a Vespa schema named \"tag\". A schema is a core concept in Vespa that defines how data is structured, indexed, and queried.\n```\nschema tag {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema tag {",
            "explanation": "This line begins the definition of a Vespa schema named \"tag\". A schema is a core concept in Vespa that defines how data is structured, indexed, and queried.",
            "keywords": [
                "schema",
                "tag"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L4-L4",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "This line starts the definition of a document type \"tag\" that inherits properties from a base document type. Documents in Vespa are akin to rows in a database and this line sets up the schema for such documents under the \"tag\" schema.\n```\ndocument tag inherits base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document tag inherits base {",
            "explanation": "This line starts the definition of a document type \"tag\" that inherits properties from a base document type. Documents in Vespa are akin to rows in a database and this line sets up the schema for such documents under the \"tag\" schema.",
            "keywords": [
                "document",
                "tag",
                "inherits",
                "base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L6-L8",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "Defines a field called \"tagid\" of type integer for the \"tag\" document. The indexing directive specifies that this field is used both as a summary field and an attribute, making it retrievable and searchable.\n```\nfield tagid type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L6-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L6-L8",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 8,
            "code": "field tagid type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field called \"tagid\" of type integer for the \"tag\" document. The indexing directive specifies that this field is used both as a summary field and an attribute, making it retrievable and searchable.",
            "keywords": [
                "field",
                "tagid",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L10-L12",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "Defines a field named \"score\" with an integer type for the document, with indexing options as a summary and attribute, indicating its use in searching and retrieval processes.\n```\nfield score type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L10-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L10-L12",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 12,
            "code": "field score type int {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named \"score\" with an integer type for the document, with indexing options as a summary and attribute, indicating its use in searching and retrieval processes.",
            "keywords": [
                "field",
                "score",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L15-L19",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "This snippet defines a document summary named \"attribute-only\" with three summary fields: \"id\", \"start\", and \"end\". Document summaries are optimized portions of data that are returned when a document matches a query, allowing efficient data handling.\n```\ndocument-summary attribute-only {\n    summary id { }\n    summary start { }\n    summary end { }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L15-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L15-L19",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 19,
            "code": "document-summary attribute-only {\n    summary id { }\n    summary start { }\n    summary end { }\n}",
            "explanation": "This snippet defines a document summary named \"attribute-only\" with three summary fields: \"id\", \"start\", and \"end\". Document summaries are optimized portions of data that are returned when a document matches a query, allowing efficient data handling.",
            "keywords": [
                "document-summary",
                "attribute-only",
                "summary",
                "id",
                "summary",
                "start",
                "summary",
                "end"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L21-L21",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "Begins the definition of a ranking profile named \"default\" which inherits from a base ranking profile also named \"default\". Ranking profiles are used to sort search results based on specific criteria.\n```\nrank-profile default inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "rank-profile default inherits default {",
            "explanation": "Begins the definition of a ranking profile named \"default\" which inherits from a base ranking profile also named \"default\". Ranking profiles are used to sort search results based on specific criteria.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/tag.sd#L22-L24",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/tag.sd",
            "doc_id": "examples/joins/src/main/application/schemas/tag.sd",
            "content": "This part of the ranking profile specifies the expression used in the first phase of ranking, based on the \"score\" attribute. First-phase ranking is initial scoring of documents before final result adjustments.\n```\nfirst-phase {\n    expression: attribute(score)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/tag.sd#L22-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/tag.sd#L22-L24",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 24,
            "code": "first-phase {\n    expression: attribute(score)\n}",
            "explanation": "This part of the ranking profile specifies the expression used in the first phase of ranking, based on the \"score\" attribute. First-phase ranking is initial scoring of documents before final result adjustments.",
            "keywords": [
                "first-phase",
                "expression",
                "attribute",
                "score"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L2-L2",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "This line declares the beginning of a schema for a Vespa application with the name 'title'.\n```\nschema title {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema title {",
            "explanation": "This line declares the beginning of a schema for a Vespa application with the name 'title'.",
            "keywords": [
                "schema",
                "title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L4-L4",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "This line declares a document type named 'title' that inherits from a base document type. This document type will contain fields for data storage and retrieval.\n```\ndocument title inherits base {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document title inherits base {",
            "explanation": "This line declares a document type named 'title' that inherits from a base document type. This document type will contain fields for data storage and retrieval.",
            "keywords": [
                "document",
                "title",
                "inherits",
                "base"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L6-L6",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Defines a field named 'text' with the data type 'string'. This specifies the format of the data that can be stored in this field within the 'title' document type.\n```\nfield text type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field text type string {",
            "explanation": "Defines a field named 'text' with the data type 'string'. This specifies the format of the data that can be stored in this field within the 'title' document type.",
            "keywords": [
                "field",
                "text",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L7-L7",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Specifies that the 'text' field should be indexed both for summary and for retrieval operations. This enhances search and retrieval capabilities within the document type.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: summary | index",
            "explanation": "Specifies that the 'text' field should be indexed both for summary and for retrieval operations. This enhances search and retrieval capabilities within the document type.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L12-L12",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Declares a rank profile named 'default' that inherits settings from the default rank profile. A rank profile determines how documents are scored during query evaluation.\n```\nrank-profile default inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "rank-profile default inherits default {",
            "explanation": "Declares a rank profile named 'default' that inherits settings from the default rank profile. A rank profile determines how documents are scored during query evaluation.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L13-L13",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Defines the first phase of the ranking process for the 'default' rank profile. The first phase is crucial for initial document scoring.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "first-phase {",
            "explanation": "Defines the first phase of the ranking process for the 'default' rank profile. The first phase is crucial for initial document scoring.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L14-L14",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Sets the ranking expression to 'nativeRank', which is a built-in Vespa function for document ranking during the first phase of the ranking process.\n```\nexpression: nativeRank\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "expression: nativeRank",
            "explanation": "Sets the ranking expression to 'nativeRank', which is a built-in Vespa function for document ranking during the first phase of the ranking process.",
            "keywords": [
                "expression",
                "nativeRank"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L18-L18",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Declares a document summary named 'attribute-only', which specifies how certain fields are presented in search results without retrieving the full content.\n```\ndocument-summary attribute-only {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "document-summary attribute-only {",
            "explanation": "Declares a document summary named 'attribute-only', which specifies how certain fields are presented in search results without retrieving the full content.",
            "keywords": [
                "document-summary",
                "attribute-only"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L19-L19",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Defines a summary field 'id' within the 'attribute-only' document summary. This field configuration determines part of the output in search results.\n```\nsummary id { }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "summary id { }",
            "explanation": "Defines a summary field 'id' within the 'attribute-only' document summary. This field configuration determines part of the output in search results.",
            "keywords": [
                "summary",
                "id"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L20-L20",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Declares a summary field 'start' within the 'attribute-only' document summary, further specifying what information to include in search results.\n```\nsummary start { }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "summary start { }",
            "explanation": "Declares a summary field 'start' within the 'attribute-only' document summary, further specifying what information to include in search results.",
            "keywords": [
                "summary",
                "start"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/joins/src/main/application/schemas/title.sd#L21-L21",
        "fields": {
            "title": "examples/joins/src/main/application/schemas/title.sd",
            "doc_id": "examples/joins/src/main/application/schemas/title.sd",
            "content": "Specifies a summary field 'end' within the 'attribute-only' document summary, indicating its presence in search result outputs.\n```\nsummary end { }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/joins/src/main/application/schemas/title.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/joins/src/main/application/schemas/title.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "summary end { }",
            "explanation": "Specifies a summary field 'end' within the 'attribute-only' document summary, indicating its presence in search result outputs.",
            "keywords": [
                "summary",
                "end"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L1-L1",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "The opening line defines a schema named 'doc' for a Vespa application. Schemas in Vespa are used to describe data models and configure how data is indexed and queried.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L1-L1",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L1-L1",
            "namespace": "code-p",
            "start_line": 1,
            "end_line": 1,
            "code": "schema doc {",
            "explanation": "The opening line defines a schema named 'doc' for a Vespa application. Schemas in Vespa are used to describe data models and configure how data is indexed and queried.",
            "keywords": [
                "schema",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L3-L3",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Defines a document type named 'doc'. In Vespa, a document represents a unit of data that can be indexed and searched.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document doc {",
            "explanation": "Defines a document type named 'doc'. In Vespa, a document represents a unit of data that can be indexed and searched.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Declares a field named 'language' of type 'string'. Fields represent individual data points within a document.\n```\nfield language type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "field language type string {",
            "explanation": "Declares a field named 'language' of type 'string'. Fields represent individual data points within a document.",
            "keywords": [
                "field",
                "language",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L5-L5",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Specifies the indexing properties for the 'language' field. The field is set to influence language settings and be available in summary and index structures.\n```\nindexing: set_language | summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "indexing: set_language | summary | index",
            "explanation": "Specifies the indexing properties for the 'language' field. The field is set to influence language settings and be available in summary and index structures.",
            "keywords": [
                "indexing",
                "set_language",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Configures the matching behavior for the 'language' field to the 'word' level. This affects how search queries match against the field.\n```\nmatch: word\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "match: word",
            "explanation": "Configures the matching behavior for the 'language' field to the 'word' level. This affects how search queries match against the field.",
            "keywords": [
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L8-L8",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Declares a field named 'text' of type 'string', which will be used to store textual content in the document.\n```\nfield text type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "field text type string {",
            "explanation": "Declares a field named 'text' of type 'string', which will be used to store textual content in the document.",
            "keywords": [
                "field",
                "text",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L9-L9",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Specifies that the 'text' field should be included in both summary and index structures, allowing it to be retrieved and searched.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "indexing: summary | index",
            "explanation": "Specifies that the 'text' field should be included in both summary and index structures, allowing it to be retrieved and searched.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L10-L10",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Enables the BM25 ranking algorithm for the 'text' field, which enhances search relevance by considering term frequency and inverse document frequency.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "index: enable-bm25",
            "explanation": "Enables the BM25 ranking algorithm for the 'text' field, which enhances search relevance by considering term frequency and inverse document frequency.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L14-L14",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Defines a fieldset named 'default' that groups fields within the document, specifically used for collective operations or configurations.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "fieldset default {",
            "explanation": "Defines a fieldset named 'default' that groups fields within the document, specifically used for collective operations or configurations.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L15-L15",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Specifies that the 'default' fieldset includes the 'text' field, allowing for simplified access or configuration under this fieldset name.\n```\nfields: text\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "fields: text",
            "explanation": "Specifies that the 'default' fieldset includes the 'text' field, allowing for simplified access or configuration under this fieldset name.",
            "keywords": [
                "fields",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L17-L17",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Declares a document summary named 'debug-text-tokens', which determines how documents are summarized in retrieval queries, particularly for debugging purposes.\n```\ndocument-summary debug-text-tokens {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "document-summary debug-text-tokens {",
            "explanation": "Declares a document summary named 'debug-text-tokens', which determines how documents are summarized in retrieval queries, particularly for debugging purposes.",
            "keywords": [
                "document-summary",
                "debug-text-tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L18-L18",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Includes the 'documentid' in the document summary, enabling retrieval of the document identifier with the summary structure.\n```\nsummary documentid {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L18-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L18-L18",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 18,
            "code": "summary documentid {}",
            "explanation": "Includes the 'documentid' in the document summary, enabling retrieval of the document identifier with the summary structure.",
            "keywords": [
                "summary",
                "documentid"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L19-L19",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Includes the 'language' field in the document summary, allowing it to be returned with retrieval queries using this summary.\n```\nsummary language {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L19-L19",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L19-L19",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 19,
            "code": "summary language {}",
            "explanation": "Includes the 'language' field in the document summary, allowing it to be returned with retrieval queries using this summary.",
            "keywords": [
                "summary",
                "language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L20-L20",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Specifies that the 'text' field should be part of the summary, allowing its content to be included in search result displays.\n```\nsummary text {}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "summary text {}",
            "explanation": "Specifies that the 'text' field should be part of the summary, allowing its content to be included in search result displays.",
            "keywords": [
                "summary",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L21-L21",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Includes a summary of 'text_tokens', derived from the 'text' field, to be used in retrieval results for displaying tokenized text content.\n```\nsummary text_tokens {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "summary text_tokens {",
            "explanation": "Includes a summary of 'text_tokens', derived from the 'text' field, to be used in retrieval results for displaying tokenized text content.",
            "keywords": [
                "summary",
                "text_tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L22-L22",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Indicates that the 'text_tokens' summary source is the 'text' field, meaning that tokenization is applied to the content from 'text'.\n```\nsource: text\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "source: text",
            "explanation": "Indicates that the 'text_tokens' summary source is the 'text' field, meaning that tokenization is applied to the content from 'text'.",
            "keywords": [
                "source",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L23-L23",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Configuration option that enables tokenization for the field used, allowing retrieval of tokenized forms of the text for analysis or display.\n```\ntokens\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "tokens",
            "explanation": "Configuration option that enables tokenization for the field used, allowing retrieval of tokenized forms of the text for analysis or display.",
            "keywords": [
                "tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/non-java/schemas/doc.sd#L25-L25",
        "fields": {
            "title": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "doc_id": "examples/lucene-linguistics/non-java/schemas/doc.sd",
            "content": "Specifies that the document summary data should be retrieved from disk storage. This is useful for large data sets where in-memory storage is inefficient.\n```\nfrom-disk\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/non-java/schemas/doc.sd#L25-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/non-java/schemas/doc.sd#L25-L25",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 25,
            "code": "from-disk",
            "explanation": "Specifies that the document summary data should be retrieved from disk storage. This is useful for large data sets where in-memory storage is inefficient.",
            "keywords": [
                "from-disk"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L1-L1",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line declares the beginning of a schema named `lucene`. Schemas in Vespa define the structure and behavior of data to be indexed and searched.\n```\nschema lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L1-L1",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L1-L1",
            "namespace": "code-p",
            "start_line": 1,
            "end_line": 1,
            "code": "schema lucene {",
            "explanation": "This line declares the beginning of a schema named `lucene`. Schemas in Vespa define the structure and behavior of data to be indexed and searched.",
            "keywords": [
                "schema",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L3-L3",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line begins the definition of a document type named `lucene` within the schema. Document types are used to represent the data objects that will be stored and indexed.\n```\ndocument lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document lucene {",
            "explanation": "This line begins the definition of a document type named `lucene` within the schema. Document types are used to represent the data objects that will be stored and indexed.",
            "keywords": [
                "document",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L4-L4",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line declares a field named `language` of type `string` within the document. Fields define attributes of the document that can hold values.\n```\nfield language type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "field language type string {",
            "explanation": "This line declares a field named `language` of type `string` within the document. Fields define attributes of the document that can hold values.",
            "keywords": [
                "field",
                "language",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L5-L5",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line specifies an indexing instruction for the `language` field, indicating that it should be used to set the language of the document in the index.\n```\nindexing: set_language\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "indexing: set_language",
            "explanation": "This line specifies an indexing instruction for the `language` field, indicating that it should be used to set the language of the document in the index.",
            "keywords": [
                "indexing",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L7-L7",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line declares another field named `mytext` of type `string` within the document. This field will hold text data that can be indexed and summarized.\n```\nfield mytext type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field mytext type string {",
            "explanation": "This line declares another field named `mytext` of type `string` within the document. This field will hold text data that can be indexed and summarized.",
            "keywords": [
                "field",
                "mytext",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L8-L8",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line specifies the indexing behavior for the `mytext` field. It indicates that this field should be stored both as a summary and in the index for retrieval purposes.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "This line specifies the indexing behavior for the `mytext` field. It indicates that this field should be stored both as a summary and in the index for retrieval purposes.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L12-L12",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line begins a fieldset definition named `default`. Fieldsets are used to group fields for collective operations, like document retrieval.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "fieldset default {",
            "explanation": "This line begins a fieldset definition named `default`. Fieldsets are used to group fields for collective operations, like document retrieval.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L13-L13",
        "fields": {
            "title": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd",
            "content": "This line specifies that the fieldset `default` includes the field `mytext`. This implies that any operations using this fieldset will encompass the `mytext` field.\n```\nfields: mytext\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/going-crazy/src/main/application/schemas/lucene.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "fields: mytext",
            "explanation": "This line specifies that the fieldset `default` includes the field `mytext`. This implies that any operations using this fieldset will encompass the `mytext` field.",
            "keywords": [
                "fields",
                "mytext"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L1-L1",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Defines the beginning of a schema named 'lucene' for the application.\n```\nschema lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L1-L1",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L1-L1",
            "namespace": "code-p",
            "start_line": 1,
            "end_line": 1,
            "code": "schema lucene {",
            "explanation": "Defines the beginning of a schema named 'lucene' for the application.",
            "keywords": [
                "schema",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L3-L3",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Begins the definition of a document type named 'lucene' within the schema.\n```\ndocument lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document lucene {",
            "explanation": "Begins the definition of a document type named 'lucene' within the schema.",
            "keywords": [
                "document",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L4-L4",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Declares a field named 'language' of type 'string' within the 'lucene' document.\n```\nfield language type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "field language type string {",
            "explanation": "Declares a field named 'language' of type 'string' within the 'lucene' document.",
            "keywords": [
                "field",
                "language",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L5-L5",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Specifies that the 'language' field will use the 'set_language' indexing directive, which might influence text processing per language.\n```\nindexing: set_language\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "indexing: set_language",
            "explanation": "Specifies that the 'language' field will use the 'set_language' indexing directive, which might influence text processing per language.",
            "keywords": [
                "indexing",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L7-L7",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Declares a field named 'mytext' of type 'string' within the 'lucene' document.\n```\nfield mytext type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field mytext type string {",
            "explanation": "Declares a field named 'mytext' of type 'string' within the 'lucene' document.",
            "keywords": [
                "field",
                "mytext",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L8-L8",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Indicates that the 'mytext' field will be indexed using both 'summary' and 'index' directives, enabling retrieval and relevance ranking.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "Indicates that the 'mytext' field will be indexed using both 'summary' and 'index' directives, enabling retrieval and relevance ranking.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L12-L12",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Begins the definition of a fieldset named 'default'.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "fieldset default {",
            "explanation": "Begins the definition of a fieldset named 'default'.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L13-L13",
        "fields": {
            "title": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd",
            "content": "Specifies that the 'default' fieldset includes the 'mytext' field, for group-based operations.\n```\nfields: mytext\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/minimal/src/main/application/schemas/lucene.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "fields: mytext",
            "explanation": "Specifies that the 'default' fieldset includes the 'mytext' field, for group-based operations.",
            "keywords": [
                "fields",
                "mytext"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L1-L1",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "The code begins with defining a schema named 'lucene'. In Vespa, a schema encapsulates the structural and retrieval definition for a set of documents.\n```\nschema lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L1-L1",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L1-L1",
            "namespace": "code-p",
            "start_line": 1,
            "end_line": 1,
            "code": "schema lucene {",
            "explanation": "The code begins with defining a schema named 'lucene'. In Vespa, a schema encapsulates the structural and retrieval definition for a set of documents.",
            "keywords": [
                "schema",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L3-L3",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "The beginning of a document definition named 'lucene' occurs here. A document in Vespa represents a logical entity that holds data and metadata for indexing and searching.\n```\ndocument lucene {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document lucene {",
            "explanation": "The beginning of a document definition named 'lucene' occurs here. A document in Vespa represents a logical entity that holds data and metadata for indexing and searching.",
            "keywords": [
                "document",
                "lucene"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L4-L4",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "A field named 'language' of type 'string' is defined. Fields represent data attributes in a Vespa document, and each field has a specified type that determines the kind of data it can hold.\n```\nfield language type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "field language type string {",
            "explanation": "A field named 'language' of type 'string' is defined. Fields represent data attributes in a Vespa document, and each field has a specified type that determines the kind of data it can hold.",
            "keywords": [
                "field",
                "language",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L5-L5",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "The field 'language' has an indexing directive 'set_language'. This indicates that the language information from this field should be used for text segmentation and linguistic processing.\n```\nindexing: set_language\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "indexing: set_language",
            "explanation": "The field 'language' has an indexing directive 'set_language'. This indicates that the language information from this field should be used for text segmentation and linguistic processing.",
            "keywords": [
                "indexing",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L7-L7",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "A field 'mytext' of type 'string' is created. This field is intended to store textual data that can be indexed and retrieved.\n```\nfield mytext type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "field mytext type string {",
            "explanation": "A field 'mytext' of type 'string' is created. This field is intended to store textual data that can be indexed and retrieved.",
            "keywords": [
                "field",
                "mytext",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L8-L8",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "The 'mytext' field is indexed with directives 'summary' and 'index'. This means the field will be included in the result set summary and indexed for search queries.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "indexing: summary | index",
            "explanation": "The 'mytext' field is indexed with directives 'summary' and 'index'. This means the field will be included in the result set summary and indexed for search queries.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L12-L12",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "A fieldset named 'default' is defined. Fieldsets in Vespa are groups of fields that can be treated as a single entity for queries and other operations.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "fieldset default {",
            "explanation": "A fieldset named 'default' is defined. Fieldsets in Vespa are groups of fields that can be treated as a single entity for queries and other operations.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L13-L13",
        "fields": {
            "title": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "doc_id": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd",
            "content": "The 'default' fieldset includes the field 'mytext'. This means any operations or queries on the 'default' fieldset will apply to 'mytext'.\n```\nfields: mytext\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/lucene-linguistics/advanced-configuration/src/main/application/schemas/lucene.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "fields: mytext",
            "explanation": "The 'default' fieldset includes the field 'mytext'. This means any operations or queries on the 'default' fieldset will apply to 'mytext'.",
            "keywords": [
                "fields",
                "mytext"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L2-L2",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Defines a document schema named 'doc' which will contain several fields to be indexed and retrieved.\n```\ndocument doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "document doc {",
            "explanation": "Defines a document schema named 'doc' which will contain several fields to be indexed and retrieved.",
            "keywords": [
                "document",
                "doc"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L3-L3",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Defines a field 'cord_uid' of type string within the document 'doc'. This field is likely to be storing a unique identifier for each document.\n```\nfield cord_uid type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "field cord_uid type string {",
            "explanation": "Defines a field 'cord_uid' of type string within the document 'doc'. This field is likely to be storing a unique identifier for each document.",
            "keywords": [
                "field",
                "cord_uid",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L4-L4",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Specifies 'cord_uid' to be indexed as both an attribute, allowing fast access by its value, and to be included in the summary for retrieval.\n```\nindexing: attribute | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "indexing: attribute | summary",
            "explanation": "Specifies 'cord_uid' to be indexed as both an attribute, allowing fast access by its value, and to be included in the summary for retrieval.",
            "keywords": [
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L6-L6",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Defines a field 'title' of type string intended to store the title of the document. This is part of the document schema 'doc'.\n```\nfield title type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field title type string {",
            "explanation": "Defines a field 'title' of type string intended to store the title of the document. This is part of the document schema 'doc'.",
            "keywords": [
                "field",
                "title",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Indicates that the 'title' field should be indexed and made available in the document summary results.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: index | summary",
            "explanation": "Indicates that the 'title' field should be indexed and made available in the document summary results.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Improves query relevance for the 'title' field by enabling the BM25 ranking algorithm, which is a standard ranking model for information retrieval.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "index: enable-bm25",
            "explanation": "Improves query relevance for the 'title' field by enabling the BM25 ranking algorithm, which is a standard ranking model for information retrieval.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L10-L10",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Defines a field 'abstract' of type string, which will contain the abstract or summary of the document's content.\n```\nfield abstract type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field abstract type string {",
            "explanation": "Defines a field 'abstract' of type string, which will contain the abstract or summary of the document's content.",
            "keywords": [
                "field",
                "abstract",
                "type",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Determines that the 'abstract' field should be both indexed for searching and included in the summary of search results.\n```\nindexing: index | summary\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "indexing: index | summary",
            "explanation": "Determines that the 'abstract' field should be both indexed for searching and included in the summary of search results.",
            "keywords": [
                "indexing",
                "index",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Applies the BM25 ranking model to the 'abstract' field, enhancing retrieval performance by optimizing relevance scoring in searches.\n```\nindex: enable-bm25\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L8-L8",
            "namespace": "code-p",
            "start_line": 8,
            "end_line": 8,
            "code": "index: enable-bm25",
            "explanation": "Applies the BM25 ranking model to the 'abstract' field, enhancing retrieval performance by optimizing relevance scoring in searches.",
            "keywords": [
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L16-L16",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Creates a default fieldset named 'default' which groups related fields for ease of use in queries and operations.\n```\nfieldset default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L16-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L16-L16",
            "namespace": "code-p",
            "start_line": 16,
            "end_line": 16,
            "code": "fieldset default {",
            "explanation": "Creates a default fieldset named 'default' which groups related fields for ease of use in queries and operations.",
            "keywords": [
                "fieldset",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L17-L17",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Specifies that the 'default' fieldset includes the 'title' and 'abstract' fields, allowing them to be referenced collectively.\n```\nfields: title, abstract\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L17-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L17-L17",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 17,
            "code": "fields: title, abstract",
            "explanation": "Specifies that the 'default' fieldset includes the 'title' and 'abstract' fields, allowing them to be referenced collectively.",
            "keywords": [
                "fields",
                "title",
                "abstract"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L22-L22",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Introduces an 'embedding' field represented as a tensor of floats with 384 dimensions, likely used for storing vector representations of documents.\n```\nfield embedding type tensor<float>(x[384]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "field embedding type tensor<float>(x[384]) {",
            "explanation": "Introduces an 'embedding' field represented as a tensor of floats with 384 dimensions, likely used for storing vector representations of documents.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L23-L23",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Specifies a complex indexing pipeline for 'embedding', using 'abstract' as input, processing it to create an embedding, and indexing the result both as an attribute and in the main index.\n```\nindexing: input abstract | embed | attribute | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "indexing: input abstract | embed | attribute | index",
            "explanation": "Specifies a complex indexing pipeline for 'embedding', using 'abstract' as input, processing it to create an embedding, and indexing the result both as an attribute and in the main index.",
            "keywords": [
                "indexing",
                "input",
                "abstract",
                "embed",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L24-L24",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Begins the configuration section for the 'embedding' when used as an attribute for retrieval and operations.\n```\nattribute {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L24-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L24-L24",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 24,
            "code": "attribute {",
            "explanation": "Begins the configuration section for the 'embedding' when used as an attribute for retrieval and operations.",
            "keywords": [
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L25-L25",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Configures the 'embedding' attribute to use the 'angular' distance metric, suitable for comparing high-dimensional vectors in tasks like similarity search.\n```\ndistance-metric: angular\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L25-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L25-L25",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 25,
            "code": "distance-metric: angular",
            "explanation": "Configures the 'embedding' attribute to use the 'angular' distance metric, suitable for comparing high-dimensional vectors in tasks like similarity search.",
            "keywords": [
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L30-L30",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Defines a ranking profile named 'ann', potentially used for approximate nearest neighbor search, leveraging the 'embedding' field.\n```\nrank-profile ann {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L30-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L30-L30",
            "namespace": "code-p",
            "start_line": 30,
            "end_line": 30,
            "code": "rank-profile ann {",
            "explanation": "Defines a ranking profile named 'ann', potentially used for approximate nearest neighbor search, leveraging the 'embedding' field.",
            "keywords": [
                "rank-profile",
                "ann"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L31-L31",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Begins the declaration of input parameters for the 'ann' ranking profile.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "inputs {",
            "explanation": "Begins the declaration of input parameters for the 'ann' ranking profile.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L32-L32",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Declares an input to the ranking profile, 'query(e)', as a tensor of floats with 384 dimensions, used for comparing against the 'embedding' field.\n```\nquery(e) tensor<float>(x[384])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L32-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L32-L32",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 32,
            "code": "query(e) tensor<float>(x[384])",
            "explanation": "Declares an input to the ranking profile, 'query(e)', as a tensor of floats with 384 dimensions, used for comparing against the 'embedding' field.",
            "keywords": [
                "query",
                "e",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L34-L34",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Specifies the initial phase of ranking within the 'ann' profile, which determines the first level of document relevance scoring.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L34-L34",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L34-L34",
            "namespace": "code-p",
            "start_line": 34,
            "end_line": 34,
            "code": "first-phase {",
            "explanation": "Specifies the initial phase of ranking within the 'ann' profile, which determines the first level of document relevance scoring.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L35-L35",
        "fields": {
            "title": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "doc_id": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd",
            "content": "Sets the phase 1 ranking expression to calculate 'closeness' using the 'embedding' field, likely to find nearest vectors in the search space.\n```\nexpression: closeness(field, embedding)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L35-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/examples/embedder-auto-training-evaluation/application-package/schemas/doc.sd#L35-L35",
            "namespace": "code-p",
            "start_line": 35,
            "end_line": 35,
            "code": "expression: closeness(field, embedding)",
            "explanation": "Sets the phase 1 ranking expression to calculate 'closeness' using the 'embedding' field, likely to find nearest vectors in the search space.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L2-L2",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a schema named 'vector'. This is the top-level definition for a Vespa application's schema, which will contain document definitions, fields, and ranking profiles specific to this schema.\n```\nschema vector {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L2-L2",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L2-L2",
            "namespace": "code-p",
            "start_line": 2,
            "end_line": 2,
            "code": "schema vector {",
            "explanation": "Defines a schema named 'vector'. This is the top-level definition for a Vespa application's schema, which will contain document definitions, fields, and ranking profiles specific to this schema.",
            "keywords": [
                "schema",
                "vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L4-L4",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a document type named 'vector'. This document type will include various fields that define the data structure of the document instances indexed within this schema.\n```\ndocument vector {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L4-L4",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L4-L4",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 4,
            "code": "document vector {",
            "explanation": "Defines a document type named 'vector'. This document type will include various fields that define the data structure of the document instances indexed within this schema.",
            "keywords": [
                "document",
                "vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L6-L6",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a field named 'id' of type integer. This field is used to store unique integer identifiers for the documents and is indexed as an attribute for efficient retrieval.\n```\nfield id type int {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L6-L6",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L6-L6",
            "namespace": "code-p",
            "start_line": 6,
            "end_line": 6,
            "code": "field id type int {",
            "explanation": "Defines a field named 'id' of type integer. This field is used to store unique integer identifiers for the documents and is indexed as an attribute for efficient retrieval.",
            "keywords": [
                "field",
                "id",
                "type",
                "int",
                "indexing",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L10-L10",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a field named 'vector' of type tensor with dimensions 100 and element type int8. This field supports both 'attribute' and 'index' indexing, enabling nearest-neighbor search using HNSW index.\n```\nfield vector type tensor<int8>(x[100]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L10-L10",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L10-L10",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 10,
            "code": "field vector type tensor<int8>(x[100]) {",
            "explanation": "Defines a field named 'vector' of type tensor with dimensions 100 and element type int8. This field supports both 'attribute' and 'index' indexing, enabling nearest-neighbor search using HNSW index.",
            "keywords": [
                "field",
                "vector",
                "type",
                "tensor",
                "int8",
                "indexing",
                "attribute",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L12-L12",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Begins the HNSW index configuration for the 'vector' field. This section will specify parameters such as maximum links per node and the number of neighbors to explore per insert.\n```\nindex {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L12-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L12-L12",
            "namespace": "code-p",
            "start_line": 12,
            "end_line": 12,
            "code": "index {",
            "explanation": "Begins the HNSW index configuration for the 'vector' field. This section will specify parameters such as maximum links per node and the number of neighbors to explore per insert.",
            "keywords": [
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L13-L13",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Configures the HNSW (Hierarchical Navigable Small World) algorithm parameters for indexing the 'vector' field. It's a type of index used for approximate nearest neighbor searches.\n```\nhnsw {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L13-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L13-L13",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 13,
            "code": "hnsw {",
            "explanation": "Configures the HNSW (Hierarchical Navigable Small World) algorithm parameters for indexing the 'vector' field. It's a type of index used for approximate nearest neighbor searches.",
            "keywords": [
                "hnsw"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L14-L14",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Sets the maximum number of links per node in the HNSW graph to 18. This parameter can influence the trade-off between index build time, search speed, and accuracy.\n```\nmax-links-per-node: 18\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L14-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L14-L14",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 14,
            "code": "max-links-per-node: 18",
            "explanation": "Sets the maximum number of links per node in the HNSW graph to 18. This parameter can influence the trade-off between index build time, search speed, and accuracy.",
            "keywords": [
                "max-links-per-node"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L15-L15",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Specifies that 100 neighbors should be explored when inserting new nodes into the HNSW index. This helps tune the balance between accuracy and insertion speed during indexing.\n```\nneighbors-to-explore-at-insert: 100\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L15-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L15-L15",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 15,
            "code": "neighbors-to-explore-at-insert: 100",
            "explanation": "Specifies that 100 neighbors should be explored when inserting new nodes into the HNSW index. This helps tune the balance between accuracy and insertion speed during indexing.",
            "keywords": [
                "neighbors-to-explore-at-insert"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L20-L20",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a field named 'neighbors' of type weightedset with string elements. This field is designed to hold weighted sets of strings, useful for text-based search.\n```\nfield neighbors type weightedset<string> {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L20-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L20-L20",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 20,
            "code": "field neighbors type weightedset<string> {",
            "explanation": "Defines a field named 'neighbors' of type weightedset with string elements. This field is designed to hold weighted sets of strings, useful for text-based search.",
            "keywords": [
                "field",
                "neighbors",
                "type",
                "weightedset",
                "string"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L21-L21",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Specifies the indexing configuration for the 'neighbors' field, enabling both summary and index storage. This allows the values to be used in search and retrieved in query results.\n```\nindexing: summary | index\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L21-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L21-L21",
            "namespace": "code-p",
            "start_line": 21,
            "end_line": 21,
            "code": "indexing: summary | index",
            "explanation": "Specifies the indexing configuration for the 'neighbors' field, enabling both summary and index storage. This allows the values to be used in search and retrieved in query results.",
            "keywords": [
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L22-L22",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Sets the matching strategy for the 'neighbors' field to 'word'. This means searches in this field will match whole words only, useful for text processing.\n```\nmatch:word\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L22-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L22-L22",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 22,
            "code": "match:word",
            "explanation": "Sets the matching strategy for the 'neighbors' field to 'word'. This means searches in this field will match whole words only, useful for text processing.",
            "keywords": [
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L23-L23",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Disables stemming for the 'neighbors' field, ensuring that search queries must match the exact forms of the words.\n```\nstemming:none\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L23-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L23-L23",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 23,
            "code": "stemming:none",
            "explanation": "Disables stemming for the 'neighbors' field, ensuring that search queries must match the exact forms of the words.",
            "keywords": [
                "stemming",
                "none"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L26-L26",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a field named 'disk_vector' of type tensor with dimensions 100 and element type int8. This field is indexed as an 'attribute' and configured to be 'paged', suitable for larger datasets stored on disk.\n```\nfield disk_vector type tensor<int8>(x[100]) {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L26-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L26-L26",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 26,
            "code": "field disk_vector type tensor<int8>(x[100]) {",
            "explanation": "Defines a field named 'disk_vector' of type tensor with dimensions 100 and element type int8. This field is indexed as an 'attribute' and configured to be 'paged', suitable for larger datasets stored on disk.",
            "keywords": [
                "field",
                "disk_vector",
                "type",
                "tensor",
                "int8",
                "indexing",
                "attribute",
                "paged"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L31-L31",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a field named 'in_graph' of type boolean. This field supports both 'summary' and 'attribute' indexing, allowing quick searches and retrieval of boolean values in results.\n```\nfield in_graph type bool {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L31-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L31-L31",
            "namespace": "code-p",
            "start_line": 31,
            "end_line": 31,
            "code": "field in_graph type bool {",
            "explanation": "Defines a field named 'in_graph' of type boolean. This field supports both 'summary' and 'attribute' indexing, allowing quick searches and retrieval of boolean values in results.",
            "keywords": [
                "field",
                "in_graph",
                "type",
                "bool",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L36-L36",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Begins the definition of a ranking profile named 'graph'. This ranking profile specifies how search results are scored and ranked according to specified expressions and inputs.\n```\nrank-profile graph  {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L36-L36",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L36-L36",
            "namespace": "code-p",
            "start_line": 36,
            "end_line": 36,
            "code": "rank-profile graph  {",
            "explanation": "Begins the definition of a ranking profile named 'graph'. This ranking profile specifies how search results are scored and ranked according to specified expressions and inputs.",
            "keywords": [
                "rank-profile",
                "graph"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L37-L37",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Sets the number of threads per search to 1 for the 'graph' ranking profile. Limiting the number of threads can affect the performance and scalability of searches.\n```\nnum-threads-per-search: 1\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "num-threads-per-search: 1",
            "explanation": "Sets the number of threads per search to 1 for the 'graph' ranking profile. Limiting the number of threads can affect the performance and scalability of searches.",
            "keywords": [
                "num-threads-per-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L38-L38",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Starts the definition of input parameters for the 'graph' ranking profile. These inputs define what data will be used in the ranking calculations.\n```\ninputs {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L38-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L38-L38",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 38,
            "code": "inputs {",
            "explanation": "Starts the definition of input parameters for the 'graph' ranking profile. These inputs define what data will be used in the ranking calculations.",
            "keywords": [
                "inputs"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L39-L39",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines an input named 'query' as a tensor of dimension 100 with int8 type. This input represents the query vector to be compared with indexed vectors, primarily for vector search purposes.\n```\nquery(q) tensor<int8>(x[100])\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L39-L39",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L39-L39",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 39,
            "code": "query(q) tensor<int8>(x[100])",
            "explanation": "Defines an input named 'query' as a tensor of dimension 100 with int8 type. This input represents the query vector to be compared with indexed vectors, primarily for vector search purposes.",
            "keywords": [
                "query",
                "q",
                "tensor",
                "int8"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Starts the definition of the first-phase ranking expression. This phase determines the initial ranking of documents using the specified expression during a search.\n```\nfirst-phase  {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "first-phase  {",
            "explanation": "Starts the definition of the first-phase ranking expression. This phase determines the initial ranking of documents using the specified expression during a search.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L42-L42",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Specifies the ranking expression in the first phase as the 'closeness' function using the 'vector' field. It calculates how close the query vector is to the document vectors.\n```\nexpression: closeness(field, vector)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L42-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L42-L42",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 42,
            "code": "expression: closeness(field, vector)",
            "explanation": "Specifies the ranking expression in the first phase as the 'closeness' function using the 'vector' field. It calculates how close the query vector is to the document vectors.",
            "keywords": [
                "expression",
                "closeness",
                "field",
                "vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L44-L44",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines the features used for matching within the 'graph' rank profile, including the document 'id', the 'closeness' to the query vector, and 'distance' between vectors. These features enhance ranking precision.\n```\nmatch-features: attribute(id) closeness(field, vector) distance(field,vector)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L44-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L44-L44",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 44,
            "code": "match-features: attribute(id) closeness(field, vector) distance(field,vector)",
            "explanation": "Defines the features used for matching within the 'graph' rank profile, including the document 'id', the 'closeness' to the query vector, and 'distance' between vectors. These features enhance ranking precision.",
            "keywords": [
                "match-features",
                "attribute",
                "id",
                "closeness",
                "field",
                "vector",
                "distance"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L47-L47",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines a ranking profile named 'default' that inherits configurations from the 'graph' profile. It extends the base profile's settings with additional ranking expressions and parameters.\n```\nrank-profile default inherits graph {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L47-L47",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L47-L47",
            "namespace": "code-p",
            "start_line": 47,
            "end_line": 47,
            "code": "rank-profile default inherits graph {",
            "explanation": "Defines a ranking profile named 'default' that inherits configurations from the 'graph' profile. It extends the base profile's settings with additional ranking expressions and parameters.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "graph"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L48-L48",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Overrides the base 'graph' profile by setting the number of threads per search to 2 in the 'default' profile. This increases parallelism for faster search processing.\n```\nnum-threads-per-search: 2\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L48-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L48-L48",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 48,
            "code": "num-threads-per-search: 2",
            "explanation": "Overrides the base 'graph' profile by setting the number of threads per search to 2 in the 'default' profile. This increases parallelism for faster search processing.",
            "keywords": [
                "num-threads-per-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L49-L49",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Begins the definition of a custom ranking function named 'L2'. This function will be used in the ranking calculations to determine document similarity based on the defined mathematical expression.\n```\nfunction L2() {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L49-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L49-L49",
            "namespace": "code-p",
            "start_line": 49,
            "end_line": 49,
            "code": "function L2() {",
            "explanation": "Begins the definition of a custom ranking function named 'L2'. This function will be used in the ranking calculations to determine document similarity based on the defined mathematical expression.",
            "keywords": [
                "function",
                "L2"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L50-L50",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines the 'L2' function's expression to calculate the L2 distance between the query vector 'q' and the attribute 'disk_vector'. It involves mapping the difference, squaring each element, summing them, and taking the square root, commonly used for measuring similarity in vector spaces.\n```\nexpression: sqrt(sum(map(query(q) - attribute(disk_vector), f(x)(x * x))))\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L50-L50",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L50-L50",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 50,
            "code": "expression: sqrt(sum(map(query(q) - attribute(disk_vector), f(x)(x * x))))",
            "explanation": "Defines the 'L2' function's expression to calculate the L2 distance between the query vector 'q' and the attribute 'disk_vector'. It involves mapping the difference, squaring each element, summing them, and taking the square root, commonly used for measuring similarity in vector spaces.",
            "keywords": [
                "expression",
                "sqrt",
                "sum",
                "map",
                "query",
                "q",
                "attribute",
                "disk_vector"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Specifies the beginning of the first-phase ranking configuration for the 'default' rank profile. This phase is responsible for the initial scoring of search results.\n```\nfirst-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L41-L41",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 41,
            "code": "first-phase {",
            "explanation": "Specifies the beginning of the first-phase ranking configuration for the 'default' rank profile. This phase is responsible for the initial scoring of search results.",
            "keywords": [
                "first-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L53-L53",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Sets the ranking expression for the first phase in the 'default' profile to 'rawScore(neighbors)'. This uses the raw score based on the 'neighbors' field for initial ranking calculations.\n```\nexpression: rawScore(neighbors)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L53-L53",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L53-L53",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 53,
            "code": "expression: rawScore(neighbors)",
            "explanation": "Sets the ranking expression for the first phase in the 'default' profile to 'rawScore(neighbors)'. This uses the raw score based on the 'neighbors' field for initial ranking calculations.",
            "keywords": [
                "expression",
                "rawScore",
                "neighbors"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L55-L55",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Begins the definition of the second-phase ranking for the 'default' profile. This phase further refines the ranking of search results after the first-phase scoring.\n```\nsecond-phase {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L55-L55",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L55-L55",
            "namespace": "code-p",
            "start_line": 55,
            "end_line": 55,
            "code": "second-phase {",
            "explanation": "Begins the definition of the second-phase ranking for the 'default' profile. This phase further refines the ranking of search results after the first-phase scoring.",
            "keywords": [
                "second-phase"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L56-L56",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Specifies that up to 1000 documents will be reranked in the second phase in the 'default' rank profile. This parameter determines the number of top-ranked documents to refine.\n```\nrerank-count: 1000\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L56-L56",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L56-L56",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 56,
            "code": "rerank-count: 1000",
            "explanation": "Specifies that up to 1000 documents will be reranked in the second phase in the 'default' rank profile. This parameter determines the number of top-ranked documents to refine.",
            "keywords": [
                "rerank-count"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L57-L57",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "Defines the ranking expression for the second phase in the 'default' profile using '1/(1 + L2)', where 'L2' is the custom function measuring vector closeness. This expression impacts the final ranking by emphasizing lower L2 distances.\n```\nexpression: 1/(1 + L2)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L57-L57",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L57-L57",
            "namespace": "code-p",
            "start_line": 57,
            "end_line": 57,
            "code": "expression: 1/(1 + L2)",
            "explanation": "Defines the ranking expression for the second phase in the 'default' profile using '1/(1 + L2)', where 'L2' is the custom function measuring vector closeness. This expression impacts the final ranking by emphasizing lower L2 distances.",
            "keywords": [
                "expression",
                "L2"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::billion-scale-vector-search/src/main/application/schemas/vector.sd#L59-L59",
        "fields": {
            "title": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "doc_id": "billion-scale-vector-search/src/main/application/schemas/vector.sd",
            "content": "In the 'default' rank profile, specifies that only the 'id' attribute is used for matching features. It simplifies the features considered during ranking calculations, focusing on document identification.\n```\nmatch-features: attribute(id)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "billion-scale-vector-search/src/main/application/schemas/vector.sd#L59-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/billion-scale-vector-search/src/main/application/schemas/vector.sd#L59-L59",
            "namespace": "code-p",
            "start_line": 59,
            "end_line": 59,
            "code": "match-features: attribute(id)",
            "explanation": "In the 'default' rank profile, specifies that only the 'id' attribute is used for matching features. It simplifies the features considered during ranking calculations, focusing on document identification.",
            "keywords": [
                "match-features",
                "attribute",
                "id"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L3-L3",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "The schema declaration begins, specifying the configuration for indexing and retrieval under the name 'doc'. This forms the root context of the schema where documents, fields, and ranking expressions are defined.\n```\nschema doc {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema doc {",
            "explanation": "The schema declaration begins, specifying the configuration for indexing and retrieval under the name 'doc'. This forms the root context of the schema where documents, fields, and ranking expressions are defined.",
            "keywords": [
                "schema"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L5-L9",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A document type named 'doc' is defined, containing a field 'id' of type integer. This 'id' field is indexed for retrieval and used in summary responses, facilitating efficient attribute retrieval.\n```\ndocument doc {\n\n    field id type int {\n      indexing: attribute | summary\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L5-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L5-L9",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 9,
            "code": "document doc {\n\n    field id type int {\n      indexing: attribute | summary\n    }",
            "explanation": "A document type named 'doc' is defined, containing a field 'id' of type integer. This 'id' field is indexed for retrieval and used in summary responses, facilitating efficient attribute retrieval.",
            "keywords": [
                "document",
                "field",
                "id",
                "type",
                "int",
                "indexing",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L11-L14",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A 'text' field of type string is defined within the document. It is indexed for full-text search and included in summary responses, with BM25 ranking enabled for text relevance ranking.\n```\nfield text type string {\n      indexing: index | summary\n      index: enable-bm25\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L11-L14",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L11-L14",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 14,
            "code": "    field text type string {\n      indexing: index | summary\n      index: enable-bm25\n    }",
            "explanation": "A 'text' field of type string is defined within the document. It is indexed for full-text search and included in summary responses, with BM25 ranking enabled for text relevance ranking.",
            "keywords": [
                "field",
                "text",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L17-L22",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "Defines a 'embedding' field of type tensor with 384 dimensions, suitable for embedding vectors. It is indexed and stored as an attribute, with the angular distance metric specified for similarity measurements.\n```\nfield embedding type tensor<float>(x[384]) {\n    indexing: input text | embed frozen | index | attribute\n    attribute {\n      distance-metric: angular\n    }\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L17-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L17-L22",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 22,
            "code": "field embedding type tensor<float>(x[384]) {\n    indexing: input text | embed frozen | index | attribute\n    attribute {\n      distance-metric: angular\n    }\n  }",
            "explanation": "Defines a 'embedding' field of type tensor with 384 dimensions, suitable for embedding vectors. It is indexed and stored as an attribute, with the angular distance metric specified for similarity measurements.",
            "keywords": [
                "field",
                "embedding",
                "type",
                "tensor",
                "float",
                "indexing",
                "input",
                "text",
                "embed",
                "frozen",
                "index",
                "attribute",
                "attribute",
                "distance-metric",
                "angular"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L24-L26",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A default fieldset named 'default' is created that includes the 'text' field. Fieldsets are used to group related fields for query and retrieval purposes.\n```\nfieldset default {\n    fields: text \n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L24-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L24-L26",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 26,
            "code": "fieldset default {\n    fields: text \n  }",
            "explanation": "A default fieldset named 'default' is created that includes the 'text' field. Fieldsets are used to group related fields for query and retrieval purposes.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "text"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L28-L31",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A default rank profile is defined, inheriting from the base default. It specifies an input 'query(q)' as a tensor with 384 float elements, used for ranking calculations.\n```\nrank-profile default inherits default {\n    inputs {\n      query(q) tensor<float>(x[384])\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L28-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L28-L31",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 31,
            "code": "rank-profile default inherits default {\n    inputs {\n      query(q) tensor<float>(x[384])\n    }",
            "explanation": "A default rank profile is defined, inheriting from the base default. It specifies an input 'query(q)' as a tensor with 384 float elements, used for ranking calculations.",
            "keywords": [
                "rank-profile",
                "default",
                "inherits",
                "default",
                "inputs",
                "query",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L32-L35",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "The first-phase ranking defines a custom expression using cosine similarity, calculated as the cosine of the distance between fields and the 'embedding'. This score determines the document order during ranking.\n```\nfirst-phase {\n      expression: cos(distance(field,embedding))\n    }\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L32-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L32-L35",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 35,
            "code": "first-phase {\n      expression: cos(distance(field,embedding))\n    }\n  }",
            "explanation": "The first-phase ranking defines a custom expression using cosine similarity, calculated as the cosine of the distance between fields and the 'embedding'. This score determines the document order during ranking.",
            "keywords": [
                "first-phase",
                "expression",
                "cos",
                "distance",
                "field",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L37-L41",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A rank profile 'simple-similarity' that inherits from 'default' is configured, introducing a constant tensor 'W' for a custom weight matrix, loaded from a JSON file. The weights influence the ranking in the specified profile.\n```\nrank-profile simple-similarity inherits default {\n    # One way to obtain the custom weight matrix\n    constants  {\n      W tensor<float>(w[128],x[384]): file: constants/weights.json\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L37-L41",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L37-L41",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 41,
            "code": "rank-profile simple-similarity inherits default {\n    # One way to obtain the custom weight matrix\n    constants  {\n      W tensor<float>(w[128],x[384]): file: constants/weights.json\n    }",
            "explanation": "A rank profile 'simple-similarity' that inherits from 'default' is configured, introducing a constant tensor 'W' for a custom weight matrix, loaded from a JSON file. The weights influence the ranking in the specified profile.",
            "keywords": [
                "rank-profile",
                "simple-similarity",
                "inherits",
                "default",
                "constants",
                "W",
                "tensor",
                "float",
                "file"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L42-L44",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A 'transform_query' function is defined, which calculates a transformed query by multiplying the input query tensor by a constant weight matrix 'W' and summing across dimensions, used in ranking expressions.\n```\nfunction transform_query() {\n      expression: sum(query(q) * constant(W), w)\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L42-L44",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L42-L44",
            "namespace": "code-p",
            "start_line": 42,
            "end_line": 44,
            "code": "function transform_query() {\n      expression: sum(query(q) * constant(W), w)\n    }",
            "explanation": "A 'transform_query' function is defined, which calculates a transformed query by multiplying the input query tensor by a constant weight matrix 'W' and summing across dimensions, used in ranking expressions.",
            "keywords": [
                "function",
                "transform_query",
                "expression",
                "sum",
                "query",
                "constant"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L45-L48",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A first-phase ranking expression that calculates similarity as the sum of normalized values of the transformed query and the embedding attribute. L2 normalization is applied to both before computing their similarity for ranking.\n```\nfirst-phase {\n      expression: sum(l2_normalize(transform_query(),x) * l2_normalize(attribute(embedding),x),x)\n    }\n  }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L45-L48",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L45-L48",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 48,
            "code": "first-phase {\n      expression: sum(l2_normalize(transform_query(),x) * l2_normalize(attribute(embedding),x),x)\n    }\n  }",
            "explanation": "A first-phase ranking expression that calculates similarity as the sum of normalized values of the transformed query and the embedding attribute. L2 normalization is applied to both before computing their similarity for ranking.",
            "keywords": [
                "first-phase",
                "expression",
                "sum",
                "l2_normalize",
                "transform_query",
                "l2_normalize",
                "attribute",
                "embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L50-L54",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "The 'custom-similarity' rank profile inherits from 'simple-similarity' and includes a 'query_input' function. This function prepares the query input by expanding it with a tensor multiplication intended for ONNX model processing.\n```\nrank-profile custom-similarity inherits simple-similarity {\n\n    function query_input() {\n      expression: query(q) * tensor<float>(batch[1]):[1]\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L50-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L50-L54",
            "namespace": "code-p",
            "start_line": 50,
            "end_line": 54,
            "code": "rank-profile custom-similarity inherits simple-similarity {\n\n    function query_input() {\n      expression: query(q) * tensor<float>(batch[1]):[1]\n    }",
            "explanation": "The 'custom-similarity' rank profile inherits from 'simple-similarity' and includes a 'query_input' function. This function prepares the query input by expanding it with a tensor multiplication intended for ONNX model processing.",
            "keywords": [
                "rank-profile",
                "custom-similarity",
                "inherits",
                "simple-similarity",
                "function",
                "query_input",
                "expression",
                "query",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L56-L58",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "A 'document_input' function is defined to prepare document embeddings for ONNX model evaluation. It multiplies the embedding attribute with a tensor, structuring it for batch processing during inference.\n```\nfunction document_input() {\n      expression: attribute(embedding) * tensor<float>(batch[1]):[1]\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L56-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L56-L58",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 58,
            "code": "function document_input() {\n      expression: attribute(embedding) * tensor<float>(batch[1]):[1]\n    }",
            "explanation": "A 'document_input' function is defined to prepare document embeddings for ONNX model evaluation. It multiplies the embedding attribute with a tensor, structuring it for batch processing during inference.",
            "keywords": [
                "function",
                "document_input",
                "expression",
                "attribute",
                "embedding",
                "tensor",
                "float"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L60-L65",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "An ONNX model 'dnn' is incorporated, which utilizes 'query_input' and 'document_input' functions as inputs to compute similarity scores. The model's operations are defined in 'custom_similarity.onnx'.\n```\nonnx-model dnn {\n      file: models/custom_similarity.onnx\n      input \"query\": query_input\n      input \"document\": document_input\n      output \"similarity\": score\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L60-L65",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L60-L65",
            "namespace": "code-p",
            "start_line": 60,
            "end_line": 65,
            "code": "onnx-model dnn {\n      file: models/custom_similarity.onnx\n      input \"query\": query_input\n      input \"document\": document_input\n      output \"similarity\": score\n    }",
            "explanation": "An ONNX model 'dnn' is incorporated, which utilizes 'query_input' and 'document_input' functions as inputs to compute similarity scores. The model's operations are defined in 'custom_similarity.onnx'.",
            "keywords": [
                "onnx-model",
                "dnn",
                "file",
                "input",
                "query",
                "input",
                "document",
                "output",
                "similarity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::custom-embeddings/schemas/doc.sd#L66-L70",
        "fields": {
            "title": "custom-embeddings/schemas/doc.sd",
            "doc_id": "custom-embeddings/schemas/doc.sd",
            "content": "The second-phase ranking uses the ONNX model to generate similarity scores, which are summed to determine a final rank score for retrieval. This enhances ranking with deep learning-based similarity measures.\n```\nsecond-phase {\n      expression: sum(onnx(dnn).score)\n    }\n  }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "custom-embeddings/schemas/doc.sd#L66-L70",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/custom-embeddings/schemas/doc.sd#L66-L70",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 70,
            "code": "second-phase {\n      expression: sum(onnx(dnn).score)\n    }\n  }\n}",
            "explanation": "The second-phase ranking uses the ONNX model to generate similarity scores, which are summed to determine a final rank score for retrieval. This enhances ranking with deep learning-based similarity measures.",
            "keywords": [
                "second-phase",
                "expression",
                "sum",
                "onnx",
                "score"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L7-L7",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Begins the definition of a schema named 'music', specifying how documents of the 'music' type are stored and indexed in Vespa.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "schema music {",
            "explanation": "Begins the definition of a schema named 'music', specifying how documents of the 'music' type are stored and indexed in Vespa.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L9-L9",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Declares a document type named 'music' within the schema, which will define fields and how they are indexed and stored.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "document music {",
            "explanation": "Declares a document type named 'music' within the schema, which will define fields and how they are indexed and stored.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L11-L13",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Defines a field named 'artist' with a data type 'string'. This field will be indexed and also available in the summary, allowing it to be searchable and retrievable.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named 'artist' with a data type 'string'. This field will be indexed and also available in the summary, allowing it to be searchable and retrievable.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L15-L17",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Defines a field named 'album' with type 'string'. It is indexed and stored in the summary for efficient search and retrieval.\n```\nfield album type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L15-L17",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L15-L17",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 17,
            "code": "field album type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named 'album' with type 'string'. It is indexed and stored in the summary for efficient search and retrieval.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L19-L21",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Specifies a field named 'year' of type 'int'. It is indexed as an attribute and included in the summary for retrieval purposes.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L19-L21",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L19-L21",
            "namespace": "code-p",
            "start_line": 19,
            "end_line": 21,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Specifies a field named 'year' of type 'int'. It is indexed as an attribute and included in the summary for retrieval purposes.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L23-L25",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Specifies a field 'category_scores' of type 'tensor<float>(cat{})'. The field is indexed both as an attribute and in the summary, enabling retrieval and complex operations like ranking.\n```\nfield category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L23-L25",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L23-L25",
            "namespace": "code-p",
            "start_line": 23,
            "end_line": 25,
            "code": "field category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}",
            "explanation": "Specifies a field 'category_scores' of type 'tensor<float>(cat{})'. The field is indexed both as an attribute and in the summary, enabling retrieval and complex operations like ranking.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor",
                "float",
                "cat",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L29-L31",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Defines a fieldset named 'default' which includes the fields 'artist' and 'album'. Fieldsets group fields for collective operations.\n```\nfieldset default {\n    fields: artist, album\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L29-L31",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L29-L31",
            "namespace": "code-p",
            "start_line": 29,
            "end_line": 31,
            "code": "fieldset default {\n    fields: artist, album\n}",
            "explanation": "Defines a fieldset named 'default' which includes the fields 'artist' and 'album'. Fieldsets group fields for collective operations.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "artist",
                "album"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L39-L39",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Defines a ranking profile 'rank_albums' that inherits from the 'default' profile, specifying computation rules for ranking music documents during queries.\n```\nrank-profile rank_albums inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L39-L39",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L39-L39",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 39,
            "code": "rank-profile rank_albums inherits default {",
            "explanation": "Defines a ranking profile 'rank_albums' that inherits from the 'default' profile, specifying computation rules for ranking music documents during queries.",
            "keywords": [
                "rank-profile",
                "rank_albums",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L40-L42",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "Specifies that the ranking profile 'rank_albums' takes an input 'user_profile' which is a tensor of type 'tensor<float>(cat{})'.\n```\ninputs {\n    query(user_profile) tensor<float>(cat{})\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L40-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L40-L42",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 42,
            "code": "inputs {\n    query(user_profile) tensor<float>(cat{})\n}",
            "explanation": "Specifies that the ranking profile 'rank_albums' takes an input 'user_profile' which is a tensor of type 'tensor<float>(cat{})'.",
            "keywords": [
                "inputs",
                "query",
                "user_profile",
                "tensor",
                "float",
                "cat"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation-java/src/main/application/schemas/music.sd#L43-L45",
        "fields": {
            "title": "album-recommendation-java/src/main/application/schemas/music.sd",
            "doc_id": "album-recommendation-java/src/main/application/schemas/music.sd",
            "content": "In the 'first-phase' of the ranking profile 'rank_albums', computes a score by summing the product of the input 'user_profile' tensor and the 'category_scores' attribute tensor. This specifies the initial ranking criteria.\n```\nfirst-phase {\n    expression: sum(query(user_profile) * attribute(category_scores))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation-java/src/main/application/schemas/music.sd#L43-L45",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation-java/src/main/application/schemas/music.sd#L43-L45",
            "namespace": "code-p",
            "start_line": 43,
            "end_line": 45,
            "code": "first-phase {\n    expression: sum(query(user_profile) * attribute(category_scores))\n}",
            "explanation": "In the 'first-phase' of the ranking profile 'rank_albums', computes a score by summing the product of the input 'user_profile' tensor and the 'category_scores' attribute tensor. This specifies the initial ranking criteria.",
            "keywords": [
                "first-phase",
                "expression",
                "sum",
                "query",
                "user_profile",
                "attribute",
                "category_scores"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L7-L7",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Begins the definition of the 'music' schema for a Vespa application, which organizes how data related to music is structured and processed.\n```\nschema music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L7-L7",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L7-L7",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 7,
            "code": "schema music {",
            "explanation": "Begins the definition of the 'music' schema for a Vespa application, which organizes how data related to music is structured and processed.",
            "keywords": [
                "schema",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L9-L9",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Starts the definition of a document type named 'music', which specifies the fields and properties of music-related entries within the schema.\n```\ndocument music {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L9-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L9-L9",
            "namespace": "code-p",
            "start_line": 9,
            "end_line": 9,
            "code": "document music {",
            "explanation": "Starts the definition of a document type named 'music', which specifies the fields and properties of music-related entries within the schema.",
            "keywords": [
                "document",
                "music"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L11-L13",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Defines a field named 'artist' of type 'string', and specifies that this field should be indexed and available in the summary, enabling both search and retrieval features.\n```\nfield artist type string {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L11-L13",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L11-L13",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 13,
            "code": "field artist type string {\n    indexing: summary | index\n}",
            "explanation": "Defines a field named 'artist' of type 'string', and specifies that this field should be indexed and available in the summary, enabling both search and retrieval features.",
            "keywords": [
                "field",
                "artist",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L15-L18",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Specifies a field 'album' of type 'string' with indexing for summary and search. Additionally, it enables BM25 ranking on this field to improve search result relevance.\n```\nfield album type string {\n    indexing: summary | index\n    index: enable-bm25\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L15-L18",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L15-L18",
            "namespace": "code-p",
            "start_line": 15,
            "end_line": 18,
            "code": "field album type string {\n    indexing: summary | index\n    index: enable-bm25\n}",
            "explanation": "Specifies a field 'album' of type 'string' with indexing for summary and search. Additionally, it enables BM25 ranking on this field to improve search result relevance.",
            "keywords": [
                "field",
                "album",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "index",
                "enable-bm25"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L20-L22",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Introduces a field 'year' of type 'int', marking it as available in summary and as an attribute, allowing it to be used for filtering or sorting in queries.\n```\nfield year type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L20-L22",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L20-L22",
            "namespace": "code-p",
            "start_line": 20,
            "end_line": 22,
            "code": "field year type int {\n    indexing: summary | attribute\n}",
            "explanation": "Introduces a field 'year' of type 'int', marking it as available in summary and as an attribute, allowing it to be used for filtering or sorting in queries.",
            "keywords": [
                "field",
                "year",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L24-L26",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Defines a field named 'category_scores' as a tensor of floats, allowing for detailed categorical data representation. It is indexed as both summary and attribute for flexible query use.\n```\nfield category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L24-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L24-L26",
            "namespace": "code-p",
            "start_line": 24,
            "end_line": 26,
            "code": "field category_scores type tensor<float>(cat{}) {\n    indexing: summary | attribute\n}",
            "explanation": "Defines a field named 'category_scores' as a tensor of floats, allowing for detailed categorical data representation. It is indexed as both summary and attribute for flexible query use.",
            "keywords": [
                "field",
                "category_scores",
                "type",
                "tensor",
                "float",
                "cat",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L30-L32",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Creates a fieldset named 'default' that groups the 'artist' and 'album' fields together, presumably for convenient access or indexing operations.\n```\nfieldset default {\n    fields: artist, album\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L30-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L30-L32",
            "namespace": "code-p",
            "start_line": 30,
            "end_line": 32,
            "code": "fieldset default {\n    fields: artist, album\n}",
            "explanation": "Creates a fieldset named 'default' that groups the 'artist' and 'album' fields together, presumably for convenient access or indexing operations.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "artist",
                "album"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L40-L40",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Defines a rank profile named 'rank_albums' that inherits settings from the 'default' rank profile, determining how documents are ranked during query processing.\n```\nrank-profile rank_albums inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L40-L40",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L40-L40",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 40,
            "code": "rank-profile rank_albums inherits default {",
            "explanation": "Defines a rank profile named 'rank_albums' that inherits settings from the 'default' rank profile, determining how documents are ranked during query processing.",
            "keywords": [
                "rank-profile",
                "rank_albums",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L41-L43",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Specifies an input tensor named 'query(user_profile)' of float type with open categories, allowing the use of user profile information for personalized ranking.\n```\ninputs {\n    query(user_profile) tensor<float>(cat{})\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L41-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L41-L43",
            "namespace": "code-p",
            "start_line": 41,
            "end_line": 43,
            "code": "inputs {\n    query(user_profile) tensor<float>(cat{})\n}",
            "explanation": "Specifies an input tensor named 'query(user_profile)' of float type with open categories, allowing the use of user profile information for personalized ranking.",
            "keywords": [
                "inputs",
                "query",
                "user_profile",
                "tensor",
                "float",
                "cat"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::album-recommendation/schemas/music.sd#L44-L46",
        "fields": {
            "title": "album-recommendation/schemas/music.sd",
            "doc_id": "album-recommendation/schemas/music.sd",
            "content": "Describes the first-phase ranking expression using a combination of BM25 on 'album' and a weighted sum of user profile and category scores, enhancing personalized relevance.\n```\nfirst-phase {\n    expression: bm25(album) + 0.25 * sum(query(user_profile) * attribute(category_scores))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "album-recommendation/schemas/music.sd#L44-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/album-recommendation/schemas/music.sd#L44-L46",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 46,
            "code": "first-phase {\n    expression: bm25(album) + 0.25 * sum(query(user_profile) * attribute(category_scores))\n}",
            "explanation": "Describes the first-phase ranking expression using a combination of BM25 on 'album' and a weighted sum of user profile and category scores, enhancing personalized relevance.",
            "keywords": [
                "first-phase",
                "expression",
                "bm25",
                "album",
                "query",
                "user_profile",
                "attribute",
                "category_scores"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L1-L1",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "The schema definition begins with defining a new schema named 'term'. This will encapsulate the document and field configurations for indexing and retrieval in Vespa.\n```\nschema term {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L1-L1",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L1-L1",
            "namespace": "code-p",
            "start_line": 1,
            "end_line": 1,
            "code": "schema term {",
            "explanation": "The schema definition begins with defining a new schema named 'term'. This will encapsulate the document and field configurations for indexing and retrieval in Vespa.",
            "keywords": [
                "schema",
                "term"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L3-L3",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "Within the 'term' schema, a document type named 'term' is defined. This document type will have various fields that are indexed and accessible in the schema.\n```\ndocument term {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "document term {",
            "explanation": "Within the 'term' schema, a document type named 'term' is defined. This document type will have various fields that are indexed and accessible in the schema.",
            "keywords": [
                "document",
                "term"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L5-L5",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "A field named 'term' with a type of string is defined. This field's configuration includes indexing options and allows for summary and fast-search attributes.\n```\nfield term type string {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "field term type string {",
            "explanation": "A field named 'term' with a type of string is defined. This field's configuration includes indexing options and allows for summary and fast-search attributes.",
            "keywords": [
                "field",
                "term",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L10-L12",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "The 'query_count' field of type integer is defined. It supports both summary and attribute indexing, making it available for fast retrieval and analysis.\n```\nfield query_count type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L10-L12",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L10-L12",
            "namespace": "code-p",
            "start_line": 10,
            "end_line": 12,
            "code": "field query_count type int {\n    indexing: summary | attribute\n}",
            "explanation": "The 'query_count' field of type integer is defined. It supports both summary and attribute indexing, making it available for fast retrieval and analysis.",
            "keywords": [
                "field",
                "query_count",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L14-L16",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "The 'query_hits' field is an integer that is indexed similarly to 'query_count', with both summary and attribute capabilities for efficient querying.\n```\nfield query_hits type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L14-L16",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L14-L16",
            "namespace": "code-p",
            "start_line": 14,
            "end_line": 16,
            "code": "field query_hits type int {\n    indexing: summary | attribute\n}",
            "explanation": "The 'query_hits' field is an integer that is indexed similarly to 'query_count', with both summary and attribute capabilities for efficient querying.",
            "keywords": [
                "field",
                "query_hits",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L18-L20",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "The 'corpus_count' field, also an integer, includes summary and attribute indexing options. This allows it to be efficiently used in search operations and analyses.\n```\nfield corpus_count type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L18-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L18-L20",
            "namespace": "code-p",
            "start_line": 18,
            "end_line": 20,
            "code": "field corpus_count type int {\n    indexing: summary | attribute\n}",
            "explanation": "The 'corpus_count' field, also an integer, includes summary and attribute indexing options. This allows it to be efficiently used in search operations and analyses.",
            "keywords": [
                "field",
                "corpus_count",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L22-L24",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "This snippet defines the 'document_count' field of type integer with summary and attribute indexing. It's designed for quick access during retrieval processes.\n```\nfield document_count type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L22-L24",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L22-L24",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 24,
            "code": "field document_count type int {\n    indexing: summary | attribute\n}",
            "explanation": "This snippet defines the 'document_count' field of type integer with summary and attribute indexing. It's designed for quick access during retrieval processes.",
            "keywords": [
                "field",
                "document_count",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L26-L29",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "An 'array' field named 'terms' contains strings and includes both summary and attribute indexing. The fast-search attribute is enabled for rapid lookup and search operations.\n```\nfield terms type array<string> {\n    indexing: summary | attribute\n    attribute: fast-search\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L26-L29",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L26-L29",
            "namespace": "code-p",
            "start_line": 26,
            "end_line": 29,
            "code": "field terms type array<string> {\n    indexing: summary | attribute\n    attribute: fast-search\n}",
            "explanation": "An 'array' field named 'terms' contains strings and includes both summary and attribute indexing. The fast-search attribute is enabled for rapid lookup and search operations.",
            "keywords": [
                "field",
                "terms",
                "type",
                "array<string>",
                "indexing",
                "summary",
                "attribute",
                "fast-search"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L33-L35",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "A fieldset named 'default' is created, grouping all fields under the 'term' document. This fieldset configuration allows for batch processing or retrieval.\n```\nfieldset default {\n    fields: term\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L33-L35",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L33-L35",
            "namespace": "code-p",
            "start_line": 33,
            "end_line": 35,
            "code": "fieldset default {\n    fields: term\n}",
            "explanation": "A fieldset named 'default' is created, grouping all fields under the 'term' document. This fieldset configuration allows for batch processing or retrieval.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "term"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L37-L37",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "A rank-profile named 'term_rank' is defined, inheriting properties from the default profile. This is used for scoring documents during search queries.\n```\nrank-profile term_rank inherits default {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L37-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L37-L37",
            "namespace": "code-p",
            "start_line": 37,
            "end_line": 37,
            "code": "rank-profile term_rank inherits default {",
            "explanation": "A rank-profile named 'term_rank' is defined, inheriting properties from the default profile. This is used for scoring documents during search queries.",
            "keywords": [
                "rank-profile",
                "term_rank",
                "inherits",
                "default"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-suggestions/src/main/application/schemas/term.sd#L38-L43",
        "fields": {
            "title": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "doc_id": "incremental-search/search-suggestions/src/main/application/schemas/term.sd",
            "content": "Within the rank-profile, a first-phase ranking expression is defined. It calculates scores using weighted attribute values of 'query_count' and 'corpus_count' for ranking documents during searches.\n```\nfirst-phase {\n    expression {\n      10*max(0, attribute(query_count))\n      + max(0, attribute(corpus_count))\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-suggestions/src/main/application/schemas/term.sd#L38-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-suggestions/src/main/application/schemas/term.sd#L38-L43",
            "namespace": "code-p",
            "start_line": 38,
            "end_line": 43,
            "code": "first-phase {\n    expression {\n      10*max(0, attribute(query_count))\n      + max(0, attribute(corpus_count))\n    }\n}",
            "explanation": "Within the rank-profile, a first-phase ranking expression is defined. It calculates scores using weighted attribute values of 'query_count' and 'corpus_count' for ranking documents during searches.",
            "keywords": [
                "first-phase",
                "expression",
                "max",
                "attribute",
                "query_count",
                "corpus_count"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L4-L11",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This snippet defines a field named 'gram_title' of type string for indexing and retrieval. It uses grams as the matching technique with a size of 3, which means it breaks the content into 3-character sequences. The field is indexed and summarized dynamically and takes its input from 'title'.\n```\nfield gram_title type string {\n    indexing: input title | index | summary\n    match {\n        gram\n        gram-size: 3\n    }\n    summary: dynamic\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L4-L11",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L4-L11",
            "namespace": "code-p",
            "start_line": 4,
            "end_line": 11,
            "code": "field gram_title type string {\n    indexing: input title | index | summary\n    match {\n        gram\n        gram-size: 3\n    }\n    summary: dynamic\n}",
            "explanation": "This snippet defines a field named 'gram_title' of type string for indexing and retrieval. It uses grams as the matching technique with a size of 3, which means it breaks the content into 3-character sequences. The field is indexed and summarized dynamically and takes its input from 'title'.",
            "keywords": [
                "field",
                "gram_title",
                "type",
                "string",
                "indexing",
                "input",
                "title",
                "index",
                "summary",
                "match",
                "gram",
                "gram-size",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L13-L20",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'gram_content' field is defined as a string type and processes the input from 'content'. This field is indexed, summarized dynamically, and uses a 3-character gram for text analysis. It is useful for content-based retrieval.\n```\nfield gram_content type string {\n    indexing: input content | index | summary\n    match {\n        gram\n        gram-size: 3\n    }\n    summary: dynamic\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L13-L20",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L13-L20",
            "namespace": "code-p",
            "start_line": 13,
            "end_line": 20,
            "code": "field gram_content type string {\n    indexing: input content | index | summary\n    match {\n        gram\n        gram-size: 3\n    }\n    summary: dynamic\n}",
            "explanation": "The 'gram_content' field is defined as a string type and processes the input from 'content'. This field is indexed, summarized dynamically, and uses a 3-character gram for text analysis. It is useful for content-based retrieval.",
            "keywords": [
                "field",
                "gram_content",
                "type",
                "string",
                "indexing",
                "input",
                "content",
                "index",
                "summary",
                "match",
                "gram",
                "gram-size",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L22-L26",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This document block named 'doc' begins with the definition of a field called 'path' of type string. It specifies that the 'path' field should be indexed and included in summaries, allowing for document retrieval based on file paths.\n```\ndocument doc {\n\n    field path type string {\n        indexing: summary | index\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L22-L26",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L22-L26",
            "namespace": "code-p",
            "start_line": 22,
            "end_line": 26,
            "code": "document doc {\n\n    field path type string {\n        indexing: summary | index\n    }",
            "explanation": "This document block named 'doc' begins with the definition of a field called 'path' of type string. It specifies that the 'path' field should be indexed and included in summaries, allowing for document retrieval based on file paths.",
            "keywords": [
                "document",
                "doc",
                "field",
                "path",
                "type",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L28-L32",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'title' field is defined as a string within the document, with indexing and summary functionalities enabled. The field utilizes dynamic summary generation and employs the 'best' stemming strategy to improve search relevance.\n```\nfield title type string {\n    indexing: index | summary\n    summary: dynamic\n    stemming: best\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L28-L32",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L28-L32",
            "namespace": "code-p",
            "start_line": 28,
            "end_line": 32,
            "code": "field title type string {\n    indexing: index | summary\n    summary: dynamic\n    stemming: best\n}",
            "explanation": "The 'title' field is defined as a string within the document, with indexing and summary functionalities enabled. The field utilizes dynamic summary generation and employs the 'best' stemming strategy to improve search relevance.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "summary",
                "stemming"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L34-L38",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This field, named 'content', is of string type and lies within the document. It is indexed and included in summaries, both dynamically managed, with the 'best' stemming technique applied for optimized search relevance.\n```\nfield content type string {\n    indexing: index | summary\n    summary: dynamic\n    stemming: best\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L34-L38",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L34-L38",
            "namespace": "code-p",
            "start_line": 34,
            "end_line": 38,
            "code": "field content type string {\n    indexing: index | summary\n    summary: dynamic\n    stemming: best\n}",
            "explanation": "This field, named 'content', is of string type and lies within the document. It is indexed and included in summaries, both dynamically managed, with the 'best' stemming technique applied for optimized search relevance.",
            "keywords": [
                "field",
                "content",
                "type",
                "string",
                "indexing",
                "index",
                "summary",
                "summary",
                "stemming"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L40-L42",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'namespace' field is defined as a string that is indexed for summaries and as an attribute. This allows retrieval systems to use the 'namespace' as a searchable attribute, improving organizational search flexibility.\n```\nfield namespace type string {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L40-L42",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L40-L42",
            "namespace": "code-p",
            "start_line": 40,
            "end_line": 42,
            "code": "field namespace type string {\n    indexing: summary | attribute\n}",
            "explanation": "The 'namespace' field is defined as a string that is indexed for summaries and as an attribute. This allows retrieval systems to use the 'namespace' as a searchable attribute, improving organizational search flexibility.",
            "keywords": [
                "field",
                "namespace",
                "type",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L44-L46",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "In this snippet, the 'outlinks' field of type array of strings is specified. It is indexed for inclusion in both summaries and search indexes, facilitating the retrieval of documents based on their outgoing links.\n```\nfield outlinks type array<string> {\n    indexing: summary | index\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L44-L46",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L44-L46",
            "namespace": "code-p",
            "start_line": 44,
            "end_line": 46,
            "code": "field outlinks type array<string> {\n    indexing: summary | index\n}",
            "explanation": "In this snippet, the 'outlinks' field of type array of strings is specified. It is indexed for inclusion in both summaries and search indexes, facilitating the retrieval of documents based on their outgoing links.",
            "keywords": [
                "field",
                "outlinks",
                "type",
                "array",
                "string",
                "indexing",
                "summary",
                "index"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L48-L50",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'inlinks' field is defined as a weighted set of strings, indexed for summary and as an attribute. This configuration enables the document to use inlink weighting to enhance relevance during searches.\n```\nfield inlinks type weightedset<string> {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L48-L50",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L48-L50",
            "namespace": "code-p",
            "start_line": 48,
            "end_line": 50,
            "code": "field inlinks type weightedset<string> {\n    indexing: summary | attribute\n}",
            "explanation": "The 'inlinks' field is defined as a weighted set of strings, indexed for summary and as an attribute. This configuration enables the document to use inlink weighting to enhance relevance during searches.",
            "keywords": [
                "field",
                "inlinks",
                "type",
                "weightedset",
                "string",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L52-L54",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "A field named 'term_count' is defined as an integer, indexed for summary and made available as an attribute. This field tracks the number of terms in a document, useful for evaluating document length or complexity.\n```\nfield term_count type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L52-L54",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L52-L54",
            "namespace": "code-p",
            "start_line": 52,
            "end_line": 54,
            "code": "field term_count type int {\n    indexing: summary | attribute\n}",
            "explanation": "A field named 'term_count' is defined as an integer, indexed for summary and made available as an attribute. This field tracks the number of terms in a document, useful for evaluating document length or complexity.",
            "keywords": [
                "field",
                "term_count",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L56-L58",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'last_updated' field, defined as an integer, is indexed for inclusion in summaries and attributes. This captures the timestamp of the last update, supporting retrieval based on recency or data freshness.\n```\nfield last_updated type int {\n    indexing: summary | attribute\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L56-L58",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L56-L58",
            "namespace": "code-p",
            "start_line": 56,
            "end_line": 58,
            "code": "field last_updated type int {\n    indexing: summary | attribute\n}",
            "explanation": "The 'last_updated' field, defined as an integer, is indexed for inclusion in summaries and attributes. This captures the timestamp of the last update, supporting retrieval based on recency or data freshness.",
            "keywords": [
                "field",
                "last_updated",
                "type",
                "int",
                "indexing",
                "summary",
                "attribute"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L62-L64",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This snippet defines a fieldset named 'default' that includes the 'title' and 'content' fields. Fieldsets group related fields for convenient handling and management, especially during searches and indexing.\n```\nfieldset default {\n    fields: title, content\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L62-L64",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L62-L64",
            "namespace": "code-p",
            "start_line": 62,
            "end_line": 64,
            "code": "fieldset default {\n    fields: title, content\n}",
            "explanation": "This snippet defines a fieldset named 'default' that includes the 'title' and 'content' fields. Fieldsets group related fields for convenient handling and management, especially during searches and indexing.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "content"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L66-L68",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "The 'grams' fieldset is defined to include 'gram_title' and 'gram_content' fields. This grouping is intended for managing fields that use n-gram tokenization to facilitate detailed search functions.\n```\nfieldset grams {\n    fields: gram_title, gram_content\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L66-L68",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L66-L68",
            "namespace": "code-p",
            "start_line": 66,
            "end_line": 68,
            "code": "fieldset grams {\n    fields: gram_title, gram_content\n}",
            "explanation": "The 'grams' fieldset is defined to include 'gram_title' and 'gram_content' fields. This grouping is intended for managing fields that use n-gram tokenization to facilitate detailed search functions.",
            "keywords": [
                "fieldset",
                "grams",
                "fields",
                "gram_title",
                "gram_content"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L70-L76",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This rank-profile named 'weighted_doc_rank' inherits from the 'default' profile and sets various weights for rank properties. It assigns higher weights to the 'title' and 'content' fields, indicating their importance in ranking documents compared to 'gram_title' and 'gram_content'.\n```\nrank-profile weighted_doc_rank inherits default {\n    rank-properties {\n        $titleWeight: 20.0\n        $contentWeight: 10.0\n        $gramTitleWeight: 2.0\n        $gramContentWeight: 1.0\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L70-L76",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L70-L76",
            "namespace": "code-p",
            "start_line": 70,
            "end_line": 76,
            "code": "rank-profile weighted_doc_rank inherits default {\n    rank-properties {\n        $titleWeight: 20.0\n        $contentWeight: 10.0\n        $gramTitleWeight: 2.0\n        $gramContentWeight: 1.0\n    }",
            "explanation": "This rank-profile named 'weighted_doc_rank' inherits from the 'default' profile and sets various weights for rank properties. It assigns higher weights to the 'title' and 'content' fields, indicating their importance in ranking documents compared to 'gram_title' and 'gram_content'.",
            "keywords": [
                "rank-profile",
                "weighted_doc_rank",
                "inherits",
                "default",
                "rank-properties"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L77-L84",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "In the first-phase ranking expression, multiple weighted terms are combined to compute the rank score based on the fields 'title', 'content', 'gram_title', and 'gram_content'. The query uses specific weights to boost the impact of each field on the final relevance score.\n```\nfirst-phase {\n    expression {\n        query(titleWeight) * nativeRank(title)\n        + query(contentWeight) * nativeRank(content)\n        + query(gramTitleWeight) * nativeRank(gram_title)\n        + query(gramContentWeight) * nativeRank(gram_content)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L77-L84",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L77-L84",
            "namespace": "code-p",
            "start_line": 77,
            "end_line": 84,
            "code": "first-phase {\n    expression {\n        query(titleWeight) * nativeRank(title)\n        + query(contentWeight) * nativeRank(content)\n        + query(gramTitleWeight) * nativeRank(gram_title)\n        + query(gramContentWeight) * nativeRank(gram_content)\n    }\n}",
            "explanation": "In the first-phase ranking expression, multiple weighted terms are combined to compute the rank score based on the fields 'title', 'content', 'gram_title', and 'gram_content'. The query uses specific weights to boost the impact of each field on the final relevance score.",
            "keywords": [
                "first-phase",
                "expression",
                "query",
                "titleWeight",
                "nativeRank",
                "title",
                "query",
                "contentWeight",
                "nativeRank",
                "content",
                "query",
                "gramTitleWeight",
                "nativeRank",
                "gram_title",
                "query",
                "gramContentWeight",
                "nativeRank",
                "gram_content"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L85-L91",
        "fields": {
            "title": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "doc_id": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd",
            "content": "This snippet lists the summary-features, including the 'namespace' attribute and native ranks for 'title', 'content', 'gram_title', and 'gram_content'. These features are essential to generate document summaries and influence rendering based on computed rankings.\n```\nsummary-features {\n    attribute(namespace)\n    nativeRank(title)\n    nativeRank(content)\n    nativeRank(gram_title)\n    nativeRank(gram_content)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L85-L91",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/incremental-search/search-as-you-type/src/main/application/schemas/doc.sd#L85-L91",
            "namespace": "code-p",
            "start_line": 85,
            "end_line": 91,
            "code": "summary-features {\n    attribute(namespace)\n    nativeRank(title)\n    nativeRank(content)\n    nativeRank(gram_title)\n    nativeRank(gram_content)\n}",
            "explanation": "This snippet lists the summary-features, including the 'namespace' attribute and native ranks for 'title', 'content', 'gram_title', and 'gram_content'. These features are essential to generate document summaries and influence rendering based on computed rankings.",
            "keywords": [
                "summary-features",
                "attribute",
                "namespace",
                "nativeRank",
                "title",
                "nativeRank",
                "content",
                "nativeRank",
                "gram_title",
                "nativeRank",
                "gram_content"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L3-L3",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The schema named 'product' defines the structure and behavior of documents in this Vespa application. This schema will be used to specify document and rank-profile configurations as they relate to products.\n```\nschema product {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L3-L3",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L3-L3",
            "namespace": "code-p",
            "start_line": 3,
            "end_line": 3,
            "code": "schema product {",
            "explanation": "The schema named 'product' defines the structure and behavior of documents in this Vespa application. This schema will be used to specify document and rank-profile configurations as they relate to products.",
            "keywords": [
                "schema",
                "product"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L5-L5",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The code defines that the document type is 'product', which sets the context for subsequent fields and configuration settings within this document schema.\n```\ndocument product {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L5-L5",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L5-L5",
            "namespace": "code-p",
            "start_line": 5,
            "end_line": 5,
            "code": "document product {",
            "explanation": "The code defines that the document type is 'product', which sets the context for subsequent fields and configuration settings within this document schema.",
            "keywords": [
                "document",
                "product"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L7-L9",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This code snippet defines a field named 'locale' of type 'string'. It specifies that this field will be indexed with an English language setting, which aids in processing language-specific features like text analysis.\n```\nfield locale type string {\n    indexing: \"en\" | set_language\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L7-L9",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L7-L9",
            "namespace": "code-p",
            "start_line": 7,
            "end_line": 9,
            "code": "field locale type string {\n    indexing: \"en\" | set_language\n}",
            "explanation": "This code snippet defines a field named 'locale' of type 'string'. It specifies that this field will be indexed with an English language setting, which aids in processing language-specific features like text analysis.",
            "keywords": [
                "field",
                "locale",
                "type",
                "string",
                "indexing",
                "set_language"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L11-L15",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "Defines a field 'id' of type 'string' with indexing set for summary and index, using it as a filter in ranking. The match setting 'word' specifies that it will be matched as a complete word.\n```\nfield id type string {\n    indexing: summary | index \n    rank:filter\n    match:word\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L11-L15",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L11-L15",
            "namespace": "code-p",
            "start_line": 11,
            "end_line": 15,
            "code": "field id type string {\n    indexing: summary | index \n    rank:filter\n    match:word\n}",
            "explanation": "Defines a field 'id' of type 'string' with indexing set for summary and index, using it as a filter in ranking. The match setting 'word' specifies that it will be matched as a complete word.",
            "keywords": [
                "field",
                "id",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "rank",
                "filter",
                "match",
                "word"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L17-L23",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'title' field of type 'string' is configured to be indexed with summary and index options, utilizing BM25 ranking. Text matching is enabled, with a weight of 300, and bolding of matched terms is turned on for display purposes.\n```\nfield title type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight:300\n    bolding:on\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L17-L23",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L17-L23",
            "namespace": "code-p",
            "start_line": 17,
            "end_line": 23,
            "code": "field title type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight:300\n    bolding:on\n}",
            "explanation": "The 'title' field of type 'string' is configured to be indexed with summary and index options, utilizing BM25 ranking. Text matching is enabled, with a weight of 300, and bolding of matched terms is turned on for display purposes.",
            "keywords": [
                "field",
                "title",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "index",
                "enable-bm25",
                "match",
                "text",
                "weight",
                "bolding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L25-L30",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This snippet defines a 'description' field as a string type, with indexing set for both summary and index. BM25 is used for ranking, with a weight of 200 and text matching enabled, providing a setup for handling descriptive content.\n```\nfield description type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight: 200\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L25-L30",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L25-L30",
            "namespace": "code-p",
            "start_line": 25,
            "end_line": 30,
            "code": "field description type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight: 200\n}",
            "explanation": "This snippet defines a 'description' field as a string type, with indexing set for both summary and index. BM25 is used for ranking, with a weight of 200 and text matching enabled, providing a setup for handling descriptive content.",
            "keywords": [
                "field",
                "description",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "index",
                "enable-bm25",
                "match",
                "text",
                "weight"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L32-L37",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'bullets' field is a string configured similarly to 'description', intended to support indexing and BM25-based ranking with a weight of 200, ideal for handling bullet-point descriptions.\n```\nfield bullets type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight: 200\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L32-L37",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L32-L37",
            "namespace": "code-p",
            "start_line": 32,
            "end_line": 37,
            "code": "field bullets type string {\n    indexing: summary | index\n    index: enable-bm25\n    match:text\n    weight: 200\n}",
            "explanation": "The 'bullets' field is a string configured similarly to 'description', intended to support indexing and BM25-based ranking with a weight of 200, ideal for handling bullet-point descriptions.",
            "keywords": [
                "field",
                "bullets",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "index",
                "enable-bm25",
                "match",
                "text",
                "weight"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L39-L43",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'brand' field is a string with indexing capabilities for summary, index, and attribute. It facilitates text matching and is weighted at 100, typically for handling brand names in retrieval and ranking processes.\n```\nfield brand type string {\n    indexing: summary | index | attribute\n    match:text\n    weight:100\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L39-L43",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L39-L43",
            "namespace": "code-p",
            "start_line": 39,
            "end_line": 43,
            "code": "field brand type string {\n    indexing: summary | index | attribute\n    match:text\n    weight:100\n}",
            "explanation": "The 'brand' field is a string with indexing capabilities for summary, index, and attribute. It facilitates text matching and is weighted at 100, typically for handling brand names in retrieval and ranking processes.",
            "keywords": [
                "field",
                "brand",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "attribute",
                "match",
                "text",
                "weight"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L45-L49",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'color' field is defined as a string, indexed as summary, index, and attribute. It's also set to text match with a weight of 100, useful for queries that consider product color as a factor.\n```\nfield color type string {\n    indexing: summary | index | attribute\n    match:text\n    weight:100\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L45-L49",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L45-L49",
            "namespace": "code-p",
            "start_line": 45,
            "end_line": 49,
            "code": "field color type string {\n    indexing: summary | index | attribute\n    match:text\n    weight:100\n}",
            "explanation": "The 'color' field is defined as a string, indexed as summary, index, and attribute. It's also set to text match with a weight of 100, useful for queries that consider product color as a factor.",
            "keywords": [
                "field",
                "color",
                "type",
                "string",
                "indexing",
                "summary",
                "index",
                "attribute",
                "match",
                "text",
                "weight"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L53-L59",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'fuzzy' field is a string type indexed from the 'title', with a n-gram matching process. The n-gram size is set to 2, enabling fuzzy matching to accommodate typographical errors or variations in search terms.\n```\nfield fuzzy type string {\n    indexing: input title | index\n    match {\n        gram\n        gram-size: 2\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L53-L59",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L53-L59",
            "namespace": "code-p",
            "start_line": 53,
            "end_line": 59,
            "code": "field fuzzy type string {\n    indexing: input title | index\n    match {\n        gram\n        gram-size: 2\n    }\n}",
            "explanation": "The 'fuzzy' field is a string type indexed from the 'title', with a n-gram matching process. The n-gram size is set to 2, enabling fuzzy matching to accommodate typographical errors or variations in search terms.",
            "keywords": [
                "field",
                "fuzzy",
                "type",
                "string",
                "indexing",
                "input",
                "title",
                "index",
                "match",
                "gram",
                "gram-size"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L61-L63",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This field 'title_tokens' represents a tensor of floats with a dimension size of 128. It is indexed by embedding the 'title' field, with tokenizer, attribute, and summary operations, facilitating advanced search and analysis techniques.\n```\nfield title_tokens type tensor<float>(d0[128]) {\n    indexing: input title | embed tokenizer | attribute | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L61-L63",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L61-L63",
            "namespace": "code-p",
            "start_line": 61,
            "end_line": 63,
            "code": "field title_tokens type tensor<float>(d0[128]) {\n    indexing: input title | embed tokenizer | attribute | summary\n}",
            "explanation": "This field 'title_tokens' represents a tensor of floats with a dimension size of 128. It is indexed by embedding the 'title' field, with tokenizer, attribute, and summary operations, facilitating advanced search and analysis techniques.",
            "keywords": [
                "field",
                "title_tokens",
                "type",
                "tensor",
                "float",
                "d0",
                "indexing",
                "input",
                "title",
                "embed",
                "tokenizer",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L65-L67",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'description_tokens' field stores tensor data, with input taken from the 'description', used in embedding and tokenization. This setup allows for complex processing and retrieval functions based on numerical representations of text data.\n```\nfield description_tokens type tensor<float>(d0[128]) {\n    indexing: input description | embed tokenizer | attribute | summary\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L65-L67",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L65-L67",
            "namespace": "code-p",
            "start_line": 65,
            "end_line": 67,
            "code": "field description_tokens type tensor<float>(d0[128]) {\n    indexing: input description | embed tokenizer | attribute | summary\n}",
            "explanation": "The 'description_tokens' field stores tensor data, with input taken from the 'description', used in embedding and tokenization. This setup allows for complex processing and retrieval functions based on numerical representations of text data.",
            "keywords": [
                "field",
                "description_tokens",
                "type",
                "tensor",
                "float",
                "d0",
                "indexing",
                "input",
                "description",
                "embed",
                "tokenizer",
                "attribute",
                "summary"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L69-L74",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This snippet defines 'title_embedding', a tensor type field with a dimension of 384. It utilizes title input for embedding and is indexed with attributes and summary, using angular distance as the metric, useful for semantic similarity search tasks.\n```\nfield title_embedding type tensor(d0[384]) {\n    indexing: input title | embed title | attribute | summary\n    attribute {\n        distance-metric: angular \n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L69-L74",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L69-L74",
            "namespace": "code-p",
            "start_line": 69,
            "end_line": 74,
            "code": "field title_embedding type tensor(d0[384]) {\n    indexing: input title | embed title | attribute | summary\n    attribute {\n        distance-metric: angular \n    }\n}",
            "explanation": "This snippet defines 'title_embedding', a tensor type field with a dimension of 384. It utilizes title input for embedding and is indexed with attributes and summary, using angular distance as the metric, useful for semantic similarity search tasks.",
            "keywords": [
                "field",
                "title_embedding",
                "type",
                "tensor",
                "d0",
                "indexing",
                "input",
                "title",
                "embed",
                "attribute",
                "summary",
                "attribute",
                "distance-metric"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L75-L80",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'description_embedding' field is defined as a tensor with a dimensionality of 384, using the 'description' for input embedding. It is indexed for attributes and summary, with an angular distance metric to assist in relevance computations.\n```\nfield description_embedding type tensor(d0[384]) {\n    indexing: input description | embed description | attribute | summary\n    attribute {\n        distance-metric: angular \n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L75-L80",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L75-L80",
            "namespace": "code-p",
            "start_line": 75,
            "end_line": 80,
            "code": "field description_embedding type tensor(d0[384]) {\n    indexing: input description | embed description | attribute | summary\n    attribute {\n        distance-metric: angular \n    }\n}",
            "explanation": "The 'description_embedding' field is defined as a tensor with a dimensionality of 384, using the 'description' for input embedding. It is indexed for attributes and summary, with an angular distance metric to assist in relevance computations.",
            "keywords": [
                "field",
                "description_embedding",
                "type",
                "tensor",
                "d0",
                "indexing",
                "input",
                "description",
                "embed",
                "attribute",
                "summary",
                "attribute",
                "distance-metric"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L82-L84",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'fieldset' named 'default' specifies a group of fields including title, description, bullets, brand, and color, simplifying reference to this collection in other parts of the schema.\n```\nfieldset default {\n    fields: title, description, bullets, brand, color \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L82-L84",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L82-L84",
            "namespace": "code-p",
            "start_line": 82,
            "end_line": 84,
            "code": "fieldset default {\n    fields: title, description, bullets, brand, color \n}",
            "explanation": "The 'fieldset' named 'default' specifies a group of fields including title, description, bullets, brand, and color, simplifying reference to this collection in other parts of the schema.",
            "keywords": [
                "fieldset",
                "default",
                "fields",
                "title",
                "description",
                "bullets",
                "brand",
                "color"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L86-L91",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This snippet defines an ONNX model 'title_cross', specifying the model file location and input parameters. The inputs are 'title_input_ids', 'title_attention_mask', and 'title_token_type_ids', essential for configuring model inference processes.\n```\nonnx-model title_cross {\n  file: models/title_ranker.onnx\n  input input_ids: title_input_ids\n  input attention_mask: title_attention_mask\n  input token_type_ids: title_token_type_ids\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L86-L91",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L86-L91",
            "namespace": "code-p",
            "start_line": 86,
            "end_line": 91,
            "code": "onnx-model title_cross {\n  file: models/title_ranker.onnx\n  input input_ids: title_input_ids\n  input attention_mask: title_attention_mask\n  input token_type_ids: title_token_type_ids\n}",
            "explanation": "This snippet defines an ONNX model 'title_cross', specifying the model file location and input parameters. The inputs are 'title_input_ids', 'title_attention_mask', and 'title_token_type_ids', essential for configuring model inference processes.",
            "keywords": [
                "onnx-model",
                "title_cross",
                "file",
                "input",
                "input_ids",
                "attention_mask",
                "token_type_ids"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L93-L99",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The default rank-profile defines tensor-type inputs for queries, including query_tokens, q_title, and q_description, used for managing how search inputs are processed and ranked in the Vespa engine.\n```\nrank-profile default {\n    inputs {\n        query(query_tokens) tensor<float>(d0[32])\n        query(q_title) tensor<float>(d0[384])\n        query(q_description) tensor<float>(d0[384])\n    } \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L93-L99",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L93-L99",
            "namespace": "code-p",
            "start_line": 93,
            "end_line": 99,
            "code": "rank-profile default {\n    inputs {\n        query(query_tokens) tensor<float>(d0[32])\n        query(q_title) tensor<float>(d0[384])\n        query(q_description) tensor<float>(d0[384])\n    } \n}",
            "explanation": "The default rank-profile defines tensor-type inputs for queries, including query_tokens, q_title, and q_description, used for managing how search inputs are processed and ranked in the Vespa engine.",
            "keywords": [
                "rank-profile",
                "default",
                "inputs",
                "query",
                "query_tokens",
                "tensor",
                "float",
                "d0",
                "query",
                "q_title",
                "query",
                "q_description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L101-L105",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This rank-profile named 'random' inherits settings from the default profile and uses a random expression in its first-phase, suitable for non-deterministic or load testing scenarios.\n```\nrank-profile random inherits default {\n    first-phase {\n        expression: random \n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L101-L105",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L101-L105",
            "namespace": "code-p",
            "start_line": 101,
            "end_line": 105,
            "code": "rank-profile random inherits default {\n    first-phase {\n        expression: random \n    }\n}",
            "explanation": "This rank-profile named 'random' inherits settings from the default profile and uses a random expression in its first-phase, suitable for non-deterministic or load testing scenarios.",
            "keywords": [
                "rank-profile",
                "random",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "random"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L107-L111",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'bm25' rank-profile uses the BM25 ranking function applied to both the 'title' and 'description' fields. This profile inherits from the default, emphasizing the BM25 algorithm for relevance scoring.\n```\nrank-profile bm25 inherits default {\n    first-phase {\n        expression: bm25(title) + bm25(description)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L107-L111",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L107-L111",
            "namespace": "code-p",
            "start_line": 107,
            "end_line": 111,
            "code": "rank-profile bm25 inherits default {\n    first-phase {\n        expression: bm25(title) + bm25(description)\n    }\n}",
            "explanation": "The 'bm25' rank-profile uses the BM25 ranking function applied to both the 'title' and 'description' fields. This profile inherits from the default, emphasizing the BM25 algorithm for relevance scoring.",
            "keywords": [
                "rank-profile",
                "bm25",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "bm25",
                "title",
                "bm25",
                "description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L113-L117",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'nativeRank' profile inherits properties from the default profile and applies the native ranking function to both the 'title' and 'description' fields, combining their rank scores in its first-phase expression.\n```\nrank-profile nativeRank inherits default {\n    first-phase {\n        expression: nativeRank(title) + nativeRank(description)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L113-L117",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L113-L117",
            "namespace": "code-p",
            "start_line": 113,
            "end_line": 117,
            "code": "rank-profile nativeRank inherits default {\n    first-phase {\n        expression: nativeRank(title) + nativeRank(description)\n    }\n}",
            "explanation": "The 'nativeRank' profile inherits properties from the default profile and applies the native ranking function to both the 'title' and 'description' fields, combining their rank scores in its first-phase expression.",
            "keywords": [
                "rank-profile",
                "nativeRank",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "nativeRank",
                "title",
                "nativeRank",
                "description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L119-L123",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This 'fieldMatch' rank-profile inherits from the default rank-profile. It computes fieldMatch scores for both 'title' and 'description' fields, used for relevance rankings based on field statistics.\n```\nrank-profile fieldMatch inherits default {\n    first-phase {\n        expression: fieldMatch(title) + fieldMatch(description)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L119-L123",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L119-L123",
            "namespace": "code-p",
            "start_line": 119,
            "end_line": 123,
            "code": "rank-profile fieldMatch inherits default {\n    first-phase {\n        expression: fieldMatch(title) + fieldMatch(description)\n    }\n}",
            "explanation": "This 'fieldMatch' rank-profile inherits from the default rank-profile. It computes fieldMatch scores for both 'title' and 'description' fields, used for relevance rankings based on field statistics.",
            "keywords": [
                "rank-profile",
                "fieldMatch",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "fieldMatch",
                "title",
                "fieldMatch",
                "description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L125-L129",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "In the 'semantic-title' rank-profile, the first-phase expression calculates closeness between query fields and 'title_embedding'. It inherits from the default profile and utilizes embedding-based similarity for ranking.\n```\nrank-profile semantic-title inherits default {\n    first-phase {\n        expression: closeness(field, title_embedding)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L125-L129",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L125-L129",
            "namespace": "code-p",
            "start_line": 125,
            "end_line": 129,
            "code": "rank-profile semantic-title inherits default {\n    first-phase {\n        expression: closeness(field, title_embedding)\n    }\n}",
            "explanation": "In the 'semantic-title' rank-profile, the first-phase expression calculates closeness between query fields and 'title_embedding'. It inherits from the default profile and utilizes embedding-based similarity for ranking.",
            "keywords": [
                "rank-profile",
                "semantic-title",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "closeness",
                "field",
                "title_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L131-L135",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'semantic-description' rank-profile inherits from the default rank-profile and focuses on calculating the closeness between fields and 'description_embedding', using embedding similarities for ranking products.\n```\nrank-profile semantic-description inherits default {\n    first-phase {\n        expression: closeness(field, description_embedding)\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L131-L135",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L131-L135",
            "namespace": "code-p",
            "start_line": 131,
            "end_line": 135,
            "code": "rank-profile semantic-description inherits default {\n    first-phase {\n        expression: closeness(field, description_embedding)\n    }\n}",
            "explanation": "The 'semantic-description' rank-profile inherits from the default rank-profile and focuses on calculating the closeness between fields and 'description_embedding', using embedding similarities for ranking products.",
            "keywords": [
                "rank-profile",
                "semantic-description",
                "inherits",
                "default",
                "first-phase",
                "expression",
                "closeness",
                "field",
                "description_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L137-L142",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This 'cross-title' rank-profile inherits the default configuration and defines input tensors for query tokens, query title, and query description. It sets up inputs for usage with cross-encoder models or similar advanced evaluation techniques.\n```\nrank-profile cross-title inherits default {\n    inputs {\n        query(query_tokens) tensor<float>(d0[32])\n        query(q_title) tensor<float>(d0[384])\n        query(q_description) tensor<float>(d0[384])\n    }\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L137-L142",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L137-L142",
            "namespace": "code-p",
            "start_line": 137,
            "end_line": 142,
            "code": "rank-profile cross-title inherits default {\n    inputs {\n        query(query_tokens) tensor<float>(d0[32])\n        query(q_title) tensor<float>(d0[384])\n        query(q_description) tensor<float>(d0[384])\n    } ",
            "explanation": "This 'cross-title' rank-profile inherits the default configuration and defines input tensors for query tokens, query title, and query description. It sets up inputs for usage with cross-encoder models or similar advanced evaluation techniques.",
            "keywords": [
                "rank-profile",
                "cross-title",
                "inherits",
                "default",
                "inputs",
                "query",
                "query_tokens",
                "tensor",
                "float",
                "d0",
                "query",
                "q_title",
                "query",
                "q_description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L144-L146",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'title_input_ids' function computes token IDs for titles, taking in query tokens and title tokens attributes. It's an integral part of preparing data for ONNX model processing in the ranking scheme.\n```\nfunction title_input_ids() {\n    expression: tokenInputIds(96, query(query_tokens), attribute(title_tokens))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L144-L146",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L144-L146",
            "namespace": "code-p",
            "start_line": 144,
            "end_line": 146,
            "code": "function title_input_ids() {\n    expression: tokenInputIds(96, query(query_tokens), attribute(title_tokens))\n}",
            "explanation": "The 'title_input_ids' function computes token IDs for titles, taking in query tokens and title tokens attributes. It's an integral part of preparing data for ONNX model processing in the ranking scheme.",
            "keywords": [
                "function",
                "title_input_ids",
                "expression",
                "tokenInputIds",
                "query",
                "query_tokens",
                "attribute",
                "title_tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L148-L150",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This function 'title_token_type_ids' generates token type IDs necessary for input to specific models. Using query tokens and title tokens, it is part of the model-data pre-processing steps in the ranking workflow.\n```\nfunction title_token_type_ids() {\n    expression: tokenTypeIds(96, query(query_tokens), attribute(title_tokens))\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L148-L150",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L148-L150",
            "namespace": "code-p",
            "start_line": 148,
            "end_line": 150,
            "code": "function title_token_type_ids() {\n    expression: tokenTypeIds(96, query(query_tokens), attribute(title_tokens))\n}",
            "explanation": "This function 'title_token_type_ids' generates token type IDs necessary for input to specific models. Using query tokens and title tokens, it is part of the model-data pre-processing steps in the ranking workflow.",
            "keywords": [
                "function",
                "title_token_type_ids",
                "expression",
                "tokenTypeIds",
                "query",
                "query_tokens",
                "attribute",
                "title_tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L152-L154",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'title_attention_mask' function creates an attention mask for query processing, interacting with title tokens. It supports model inference by indicating which tokens should be accounted for in calculations.\n```\nfunction title_attention_mask() {\n    expression: tokenAttentionMask(96, query(query_tokens), attribute(title_tokens)) \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L152-L154",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L152-L154",
            "namespace": "code-p",
            "start_line": 152,
            "end_line": 154,
            "code": "function title_attention_mask() {\n    expression: tokenAttentionMask(96, query(query_tokens), attribute(title_tokens)) \n}",
            "explanation": "The 'title_attention_mask' function creates an attention mask for query processing, interacting with title tokens. It supports model inference by indicating which tokens should be accounted for in calculations.",
            "keywords": [
                "function",
                "title_attention_mask",
                "expression",
                "tokenAttentionMask",
                "query",
                "query_tokens",
                "attribute",
                "title_tokens"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L156-L158",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'cross_encoder' function applies the ONNX title-cross model expression, handling the computation needed for complex cross-encoding tasks, potentially boosting inference and ranking results based on model predictions.\n```\nfunction cross_encoder() {\n    expression: onnx(title_cross){d0:0,d1:0} \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L156-L158",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L156-L158",
            "namespace": "code-p",
            "start_line": 156,
            "end_line": 158,
            "code": "function cross_encoder() {\n    expression: onnx(title_cross){d0:0,d1:0} \n}",
            "explanation": "The 'cross_encoder' function applies the ONNX title-cross model expression, handling the computation needed for complex cross-encoding tasks, potentially boosting inference and ranking results based on model predictions.",
            "keywords": [
                "function",
                "cross_encoder",
                "expression",
                "onnx",
                "title_cross"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L159-L161",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "In this snippet, a global-phase expression is defined to execute the 'cross_encoder' function. This organizes rank profiles to utilize cross-encoding computations at a comprehensive level of ranking.\n```\nglobal-phase {\n    expression: cross_encoder() \n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L159-L161",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L159-L161",
            "namespace": "code-p",
            "start_line": 159,
            "end_line": 161,
            "code": "global-phase {\n    expression: cross_encoder() \n}",
            "explanation": "In this snippet, a global-phase expression is defined to execute the 'cross_encoder' function. This organizes rank profiles to utilize cross-encoding computations at a comprehensive level of ranking.",
            "keywords": [
                "global-phase",
                "expression",
                "cross_encoder"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L164-L164",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This 'features' rank-profile inherits from the 'cross-title' profile and indicates that additional functions and ranking calculations will be used, building upon the previously established cross-encoder inputs.\n```\nrank-profile features inherits cross-title {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L164-L164",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L164-L164",
            "namespace": "code-p",
            "start_line": 164,
            "end_line": 164,
            "code": "rank-profile features inherits cross-title {",
            "explanation": "This 'features' rank-profile inherits from the 'cross-title' profile and indicates that additional functions and ranking calculations will be used, building upon the previously established cross-encoder inputs.",
            "keywords": [
                "rank-profile",
                "features",
                "inherits",
                "cross-title"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L166-L168",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'bi_encoder' function computes closeness between fields and title_embedding, involved in ranking processes for bi-encoding scenarios, which utilize reduced memory footprints compared to other encoder setups.\n```\nfunction bi_encoder() {\n    expression: closeness(field, title_embedding)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L166-L168",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L166-L168",
            "namespace": "code-p",
            "start_line": 166,
            "end_line": 168,
            "code": "function bi_encoder() {\n    expression: closeness(field, title_embedding)\n}",
            "explanation": "The 'bi_encoder' function computes closeness between fields and title_embedding, involved in ranking processes for bi-encoding scenarios, which utilize reduced memory footprints compared to other encoder setups.",
            "keywords": [
                "function",
                "bi_encoder",
                "expression",
                "closeness",
                "field",
                "title_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L170-L172",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'bi_encoder_description' function correlates fields and description_embedding by calculating their closeness, important for enhancing ranking quality in bi-encoder style machine learning models.\n```\nfunction bi_encoder_description() {\n    expression: closeness(field, description_embedding)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L170-L172",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L170-L172",
            "namespace": "code-p",
            "start_line": 170,
            "end_line": 172,
            "code": "function bi_encoder_description() {\n    expression: closeness(field, description_embedding)\n}",
            "explanation": "The 'bi_encoder_description' function correlates fields and description_embedding by calculating their closeness, important for enhancing ranking quality in bi-encoder style machine learning models.",
            "keywords": [
                "function",
                "bi_encoder_description",
                "expression",
                "closeness",
                "field",
                "description_embedding"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L175-L177",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'max_title_significance' function determines the maximum significance of terms in a title above a threshold of 0.5, aiding in isolating the most influential query terms during ranking.\n```\nfunction max_title_significance() {\n    expression: foreach(terms, N, term(N).significance, \">0.5\", max)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L175-L177",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L175-L177",
            "namespace": "code-p",
            "start_line": 175,
            "end_line": 177,
            "code": "function max_title_significance() {\n    expression: foreach(terms, N, term(N).significance, \">0.5\", max)\n}",
            "explanation": "The 'max_title_significance' function determines the maximum significance of terms in a title above a threshold of 0.5, aiding in isolating the most influential query terms during ranking.",
            "keywords": [
                "function",
                "max_title_significance",
                "expression",
                "foreach",
                "terms",
                "N",
                "term",
                "N",
                "significance",
                "max"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L179-L181",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This function, 'mean_title_significance', calculates the average significance of terms in a title that exceed a 0.5 threshold, providing an aggregated measure of term importance in ranking decisions.\n```\nfunction mean_title_significance() {\n    expression: foreach(terms, N, term(N).significance, \">0.5\", average)\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L179-L181",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L179-L181",
            "namespace": "code-p",
            "start_line": 179,
            "end_line": 181,
            "code": "function mean_title_significance() {\n    expression: foreach(terms, N, term(N).significance, \">0.5\", average)\n}",
            "explanation": "This function, 'mean_title_significance', calculates the average significance of terms in a title that exceed a 0.5 threshold, providing an aggregated measure of term importance in ranking decisions.",
            "keywords": [
                "function",
                "mean_title_significance",
                "expression",
                "foreach",
                "terms",
                "N",
                "term",
                "N",
                "significance",
                "average"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L102-L104",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "Within a rank-profile, the first-phase block is assigned a random expression, indicating that initial ranking results may be random, typically precedes or is improved by detailed ranking logic in upper phases.\n```\nfirst-phase {\n    expression: random\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L102-L104",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L102-L104",
            "namespace": "code-p",
            "start_line": 102,
            "end_line": 104,
            "code": "first-phase {\n    expression: random\n}",
            "explanation": "Within a rank-profile, the first-phase block is assigned a random expression, indicating that initial ranking results may be random, typically precedes or is improved by detailed ranking logic in upper phases.",
            "keywords": [
                "first-phase",
                "expression",
                "random"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L187-L187",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The match-features block specifies criteria and metrics to consider when matching documents against queries, encompassing various feature-based mechanisms that influence the effectiveness of retrieval.\n```\nmatch-features {\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L187-L187",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L187-L187",
            "namespace": "code-p",
            "start_line": 187,
            "end_line": 187,
            "code": "match-features {",
            "explanation": "The match-features block specifies criteria and metrics to consider when matching documents against queries, encompassing various feature-based mechanisms that influence the effectiveness of retrieval.",
            "keywords": [
                "match-features"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L189-L191",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "These matching features include counting query terms and assessing maximum and mean title significance, useful for determining the interaction level of queries with document attributes in retrieval context.\n```\nqueryTermCount\nmax_title_significance\nmean_title_significance\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L189-L191",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L189-L191",
            "namespace": "code-p",
            "start_line": 189,
            "end_line": 191,
            "code": "queryTermCount\nmax_title_significance\nmean_title_significance",
            "explanation": "These matching features include counting query terms and assessing maximum and mean title significance, useful for determining the interaction level of queries with document attributes in retrieval context.",
            "keywords": [
                "queryTermCount",
                "max_title_significance",
                "mean_title_significance"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L193-L195",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The features cross_encoder, bi_encoder, and bi_encoder_description are functions used for document-query matching, leveraging advanced neural network computations and embedding-based proximity assessments.\n```\ncross_encoder()\nbi_encoder()\nbi_encoder_description()\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L193-L195",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L193-L195",
            "namespace": "code-p",
            "start_line": 193,
            "end_line": 195,
            "code": "cross_encoder()\nbi_encoder()\nbi_encoder_description()",
            "explanation": "The features cross_encoder, bi_encoder, and bi_encoder_description are functions used for document-query matching, leveraging advanced neural network computations and embedding-based proximity assessments.",
            "keywords": [
                "cross_encoder",
                "bi_encoder",
                "bi_encoder_description"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L197-L201",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "BM25 functions for 'title', 'description', 'bullets', 'color', and 'brand' are specified as match-features, supported by term frequency and inverse document frequency algorithms to rank textual fields appropriately.\n```\nbm25(title)\nbm25(description)\nbm25(bullets)\nbm25(color)\nbm25(brand)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L197-L201",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L197-L201",
            "namespace": "code-p",
            "start_line": 197,
            "end_line": 201,
            "code": "bm25(title)\nbm25(description)\nbm25(bullets)\nbm25(color)\nbm25(brand)",
            "explanation": "BM25 functions for 'title', 'description', 'bullets', 'color', and 'brand' are specified as match-features, supported by term frequency and inverse document frequency algorithms to rank textual fields appropriately.",
            "keywords": [
                "bm25",
                "title",
                "bm25",
                "description",
                "bm25",
                "bullets",
                "bm25",
                "color",
                "bm25",
                "brand"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L203-L205",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "These match feature functions specify that the presence of specific matches in 'brand', 'title', and 'color' fields should influence the ranking, determined by each field's respective content and search priorities.\n```\nmatches(brand)\nmatches(title)\nmatches(color)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L203-L205",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L203-L205",
            "namespace": "code-p",
            "start_line": 203,
            "end_line": 205,
            "code": "matches(brand)\nmatches(title)\nmatches(color)",
            "explanation": "These match feature functions specify that the presence of specific matches in 'brand', 'title', and 'color' fields should influence the ranking, determined by each field's respective content and search priorities.",
            "keywords": [
                "matches",
                "brand",
                "matches",
                "title",
                "matches",
                "color"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L207-L216",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The native rank and native proximity computations are defined for 'title', 'description', 'bullets', 'color', and 'brand' fields, providing a baseline or complementary ranking process based on native (field-based) statistics and spatial proximity.\n```\nnativeRank(title)\nnativeProximity(title)\nnativeRank(description)\nnativeProximity(description)\nnativeRank(bullets)\nnativeProximity(bullets)\nnativeRank(color)\nnativeProximity(color)\nnativeRank(brand)\nnativeProximity(brand)\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L207-L216",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L207-L216",
            "namespace": "code-p",
            "start_line": 207,
            "end_line": 216,
            "code": "nativeRank(title)\nnativeProximity(title)\nnativeRank(description)\nnativeProximity(description)\nnativeRank(bullets)\nnativeProximity(bullets)\nnativeRank(color)\nnativeProximity(color)\nnativeRank(brand)\nnativeProximity(brand)",
            "explanation": "The native rank and native proximity computations are defined for 'title', 'description', 'bullets', 'color', and 'brand' fields, providing a baseline or complementary ranking process based on native (field-based) statistics and spatial proximity.",
            "keywords": [
                "nativeRank",
                "title",
                "nativeProximity",
                "title",
                "nativeRank",
                "description",
                "nativeProximity",
                "description",
                "nativeRank",
                "bullets",
                "nativeProximity",
                "bullets",
                "nativeRank",
                "color",
                "nativeProximity",
                "color",
                "nativeRank",
                "brand",
                "nativeProximity",
                "brand"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L218-L219",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "Functions for evaluating text similarity in 'title' using 'order' and 'proximity' are defined. These help assess relevance by examining the sequence and closeness of terms in a query relative to the document title.\n```\ntextSimilarity(title).order\ntextSimilarity(title).proximity\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L218-L219",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L218-L219",
            "namespace": "code-p",
            "start_line": 218,
            "end_line": 219,
            "code": "textSimilarity(title).order\ntextSimilarity(title).proximity",
            "explanation": "Functions for evaluating text similarity in 'title' using 'order' and 'proximity' are defined. These help assess relevance by examining the sequence and closeness of terms in a query relative to the document title.",
            "keywords": [
                "textSimilarity",
                "title",
                "order",
                "textSimilarity",
                "title",
                "proximity"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L221-L233",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "Various field match features for the 'title' field are defined, covering proximity, completeness metrics, order, relatedness, earliness, and significant occurrences as part of the ranking mechanism based on field statistics.\n```\nfieldMatch(title)\nfieldMatch(title).proximity\nfieldMatch(title).completeness\nfieldMatch(title).queryCompleteness\nfieldMatch(title).fieldCompleteness\nfieldMatch(title).orderness\nfieldMatch(title).relatedness\nfieldMatch(title).orderness\nfieldMatch(title).earliness\nfieldMatch(title).significantOccurrence\nfieldMatch(title).matches\nfieldMatch(title).head\nfieldMatch(title).tail\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L221-L233",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L221-L233",
            "namespace": "code-p",
            "start_line": 221,
            "end_line": 233,
            "code": "fieldMatch(title)\nfieldMatch(title).proximity\nfieldMatch(title).completeness\nfieldMatch(title).queryCompleteness\nfieldMatch(title).fieldCompleteness\nfieldMatch(title).orderness\nfieldMatch(title).relatedness\nfieldMatch(title).orderness\nfieldMatch(title).earliness\nfieldMatch(title).significantOccurrence\nfieldMatch(title).matches\nfieldMatch(title).head\nfieldMatch(title).tail",
            "explanation": "Various field match features for the 'title' field are defined, covering proximity, completeness metrics, order, relatedness, earliness, and significant occurrences as part of the ranking mechanism based on field statistics.",
            "keywords": [
                "fieldMatch",
                "title",
                "proximity",
                "fieldMatch",
                "title",
                "completeness",
                "fieldMatch",
                "title",
                "queryCompleteness",
                "fieldMatch",
                "title",
                "fieldCompleteness",
                "fieldMatch",
                "title",
                "orderness",
                "fieldMatch",
                "title",
                "relatedness",
                "fieldMatch",
                "title",
                "orderness",
                "fieldMatch",
                "title",
                "earliness",
                "fieldMatch",
                "title",
                "significantOccurrence",
                "fieldMatch",
                "title",
                "matches",
                "fieldMatch",
                "title",
                "head",
                "fieldMatch",
                "title",
                "tail"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L235-L239",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "These lines specify the significance evaluation for the first five terms (indexed 0 to 4), useful for determining their importance in the context of search and to evaluate how individual terms contribute to overall relevance.\n```\nterm(0).significance\nterm(1).significance\nterm(2).significance\nterm(3).significance\nterm(4).significance\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L235-L239",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L235-L239",
            "namespace": "code-p",
            "start_line": 235,
            "end_line": 239,
            "code": "term(0).significance\nterm(1).significance\nterm(2).significance\nterm(3).significance\nterm(4).significance",
            "explanation": "These lines specify the significance evaluation for the first five terms (indexed 0 to 4), useful for determining their importance in the context of search and to evaluate how individual terms contribute to overall relevance.",
            "keywords": [
                "term",
                "0",
                "significance",
                "term",
                "1",
                "significance",
                "term",
                "2",
                "significance",
                "term",
                "3",
                "significance",
                "term",
                "4",
                "significance"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L243-L247",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The rank-profile 'gbdt-lightgbm-simple' inherits from 'features' and uses a first-phase expression that applies a LightGBM model from 'product_ranker_simple_lightgbm.json'. It integrates gradient boosting decision trees for ranking.\n```\nrank-profile gbdt-lightgbm-simple inherits features {\n    first-phase {\n        expression: lightgbm(\"product_ranker_simple_lightgbm.json\")\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L243-L247",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L243-L247",
            "namespace": "code-p",
            "start_line": 243,
            "end_line": 247,
            "code": "rank-profile gbdt-lightgbm-simple inherits features {\n    first-phase {\n        expression: lightgbm(\"product_ranker_simple_lightgbm.json\")\n    }\n}",
            "explanation": "The rank-profile 'gbdt-lightgbm-simple' inherits from 'features' and uses a first-phase expression that applies a LightGBM model from 'product_ranker_simple_lightgbm.json'. It integrates gradient boosting decision trees for ranking.",
            "keywords": [
                "rank-profile",
                "gbdt-lightgbm-simple",
                "inherits",
                "features",
                "first-phase",
                "expression",
                "lightgbm",
                "product_ranker_simple_lightgbm.json"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L249-L254",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "Similar to the LightGBM profile, the 'gbdt-xgboost-simple' rank-profile employs 'xgboost' in its first-phase expression, essential for integrating XGBoost ranking model calculations using 'product_ranker_simple_xgboost.json'.\n```\nrank-profile gbdt-xgboost-simple inherits features {\n    \n    first-phase {\n        expression: xgboost(\"product_ranker_simple_xgboost.json\")\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L249-L254",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L249-L254",
            "namespace": "code-p",
            "start_line": 249,
            "end_line": 254,
            "code": "rank-profile gbdt-xgboost-simple inherits features {\n    \n    first-phase {\n        expression: xgboost(\"product_ranker_simple_xgboost.json\")\n    }\n}",
            "explanation": "Similar to the LightGBM profile, the 'gbdt-xgboost-simple' rank-profile employs 'xgboost' in its first-phase expression, essential for integrating XGBoost ranking model calculations using 'product_ranker_simple_xgboost.json'.",
            "keywords": [
                "rank-profile",
                "gbdt-xgboost-simple",
                "inherits",
                "features",
                "first-phase",
                "expression",
                "xgboost",
                "product_ranker_simple_xgboost.json"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L256-L260",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "This rank-profile 'gbdt-lightgbm-full' also inherits from 'features' and uses a 'lightgbm' model configuration defined in 'product_ranker_lightgbm.json' for its first-phase, providing a more comprehensive gradient boosting approach.\n```\nrank-profile gbdt-lightgbm-full inherits features {\n    first-phase {\n        expression: lightgbm(\"product_ranker_lightgbm.json\")\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L256-L260",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L256-L260",
            "namespace": "code-p",
            "start_line": 256,
            "end_line": 260,
            "code": "rank-profile gbdt-lightgbm-full inherits features {\n    first-phase {\n        expression: lightgbm(\"product_ranker_lightgbm.json\")\n    }\n}",
            "explanation": "This rank-profile 'gbdt-lightgbm-full' also inherits from 'features' and uses a 'lightgbm' model configuration defined in 'product_ranker_lightgbm.json' for its first-phase, providing a more comprehensive gradient boosting approach.",
            "keywords": [
                "rank-profile",
                "gbdt-lightgbm-full",
                "inherits",
                "features",
                "first-phase",
                "expression",
                "lightgbm",
                "product_ranker_lightgbm.json"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L262-L267",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'gbdt-xgboost-full' rank-profile utilizes the XGBoost model setup from 'product_ranker_xgboost.json', inheriting from 'features', to employ gradient boosting methods extensively for ranking evaluations.\n```\nrank-profile gbdt-xgboost-full inherits features {\n    \n    first-phase {\n        expression: xgboost(\"product_ranker_xgboost.json\")\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L262-L267",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L262-L267",
            "namespace": "code-p",
            "start_line": 262,
            "end_line": 267,
            "code": "rank-profile gbdt-xgboost-full inherits features {\n    \n    first-phase {\n        expression: xgboost(\"product_ranker_xgboost.json\")\n    }\n}",
            "explanation": "The 'gbdt-xgboost-full' rank-profile utilizes the XGBoost model setup from 'product_ranker_xgboost.json', inheriting from 'features', to employ gradient boosting methods extensively for ranking evaluations.",
            "keywords": [
                "rank-profile",
                "gbdt-xgboost-full",
                "inherits",
                "features",
                "first-phase",
                "expression",
                "xgboost",
                "product_ranker_xgboost.json"
            ]
        }
    },
    {
        "put": "id:code-p:code_snippet::commerce-product-ranking/application/schemas/product.sd#L269-L273",
        "fields": {
            "title": "commerce-product-ranking/application/schemas/product.sd",
            "doc_id": "commerce-product-ranking/application/schemas/product.sd",
            "content": "The 'ensemble' rank-profile combines the outputs of both XGBoost and LightGBM models from their respective JSON files in the first-phase. It's designed to employ ensemble techniques for potentially better ranking outcomes by leveraging multiple models.\n```\nrank-profile ensemble inherits features {\n    first-phase {\n        expression: xgboost(\"product_ranker_simple_xgboost.json\") + lightgbm(\"product_ranker_simple_lightgbm.json\")\n    }\n}\n```",
            "base_uri": "https://github.com/vespa-engine/sample-apps/tree/master/",
            "path": "commerce-product-ranking/application/schemas/product.sd#L269-L273",
            "url": "https://github.com/vespa-engine/sample-apps/tree/master/commerce-product-ranking/application/schemas/product.sd#L269-L273",
            "namespace": "code-p",
            "start_line": 269,
            "end_line": 273,
            "code": "rank-profile ensemble inherits features {\n    first-phase {\n        expression: xgboost(\"product_ranker_simple_xgboost.json\") + lightgbm(\"product_ranker_simple_lightgbm.json\")\n    }\n}",
            "explanation": "The 'ensemble' rank-profile combines the outputs of both XGBoost and LightGBM models from their respective JSON files in the first-phase. It's designed to employ ensemble techniques for potentially better ranking outcomes by leveraging multiple models.",
            "keywords": [
                "rank-profile",
                "ensemble",
                "inherits",
                "features",
                "first-phase",
                "expression",
                "xgboost",
                "product_ranker_simple_xgboost.json",
                "lightgbm",
                "product_ranker_simple_lightgbm.json"
            ]
        }
    }
]
